(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1381384,      25234]
NotebookOptionsPosition[   1367450,      25041]
NotebookOutlinePosition[   1367890,      25058]
CellTagsIndexPosition[   1367847,      25055]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["JAGROS, d.o.o.",
 FontWeight->"Bold",
 FontColor->RGBColor[1., 0., 0.]]], "Title",
 CellChangeTimes->{{3.9241601139471226`*^9, 
  3.9241601181475887`*^9}},ExpressionUUID->"8714285d-1c0c-b243-a8be-\
c16515793d5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{
   "Import", "[", 
    "\"\<C:\\Users\\HP\\Desktop\\Ra\[CHacek]unalni\[SHacek]ka orodja v \
matematiki\\Logotip podjetja.png\>\"", "]"}], ",", "\[IndentingNewLine]", 
   "\t       ", 
   RowBox[{"Text", "[", "\"\<Slika 1: Logotip podjetja\>\"", "]"}]}], 
  "]"}]], "Input",
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[1]:=",ExpressionUUID->"6c65cd28-ec78-4f40-81e9-b36a7a0db7a1"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    TagBox[
     RasterBox[CompressedData["
1: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
YbE65ZFtg0/MzRLdLmWKTQNUH6uF5CcP2Hd2X/sX7mtmQ3W6ich76nf7dRJ9
7qzv+ku+T5lJf1Ifc3J/SYwo7xz3X7+AnLMmn2oR0zrz31S7z6+XrPlD8pPj
9LoZTfoyT1WEHfxTpn36yHF6vKb053EVzvF84Tjl8bH6LXG5ngouSqmrdVRw
SlkF03u3x6S+HaBlS3yxWToQgrQhTNfKnaYNzN1yE3uj9MzB2Hv7jEz3T+45
LsaivffHS7V+WiMw8fgWXHksXY5iWvoLKIwjx8CTsGjWoP/GyBfoQj7OFicf
X5dqvdltwt9xYp4EjX9I4luMe3Sbfh1J/0sZTPvKFmgd6gj1OXZiHg2LJTQQ
GUqehdi81VTe7ZlPKvY/5PuBhN9BtLb5ENJ+k09syiPHd175FxO2xrD4ytTt
iZi6eymm7v2vZh1YhYB/osl1Qo7jtAGfrivq74bLPi7/M47TviGwj/h+cm4/
hJ7eItM+9Yrw+sTx8ZK6bb9HPjnneAFyfFfD5jhfXwUva7dhcwBJq7TarZFZ
oxVQpiXCBxGffLGkDhX1x3Ils9yJ3I+l46yw98EFme6fXHNckqey9fYpqdb/
jPi81sumYN916b5HzYO2jcZMx/X9r382fwCaLPfFOxnHkz5+mYZqk4aIc25k
xUDIMSg2vAeKTxmAYiH6KEaOb7FYCxSjx2M+6YcnkP44oDPkiL9Nl6Mx50/q
jmIje6LYOE0UI/11MeJ7F4sxRwn2/aLLV0l581LCQ6NP1wxtSx7qq/yH42P6
iOsPGYi/bstW+1J9nr1kfYTjgb04xznH843j5wjHn0k5H2d2PVEq6HndTFhd
ptIxlth7v4A5Pk8TaqtH4hXxr6UxmltRcUx/LD+5Xeq2/X3piOTZnbQtVD+b
T27MOK61KUjqdWZZ/NFNoi/uL4mHuKuh/hQD7L55CkdTr+NI6jUceXSF1edm
enwVR56Qz+9fxpGb53Dk1leUfIF855q4HF2efO/oo6vYkXwa9en4czrnUyFz
/OaLx59zPKs/ySPH69N8dJMqpJ9tRp5FWhMfXwN62+bJVNf9WkoyeyfL3jGw
OBR9l2Dyu8RWOMd/cI6n/iocp+/n5vSF38EEqdd/8u5lFoOY9M8iqb9LYyvN
ZpiJc9XRmBStuZrF8RBt2O4Mk3qdWeb953wI9g0/zVtK/HKVCCeZ1/c906P1
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
tD2k8ebA/uKYmpmSulPzBqDXuglF3bTP7OyD65Af1Vds57BsY86DtAhHC5/j
dnsiRX+cHq+YvMVVPtYfN6oMxz9kGyNG7dqjO6hM81dm9v/dcsY5xznHC5bj
c7VQOs4yX2LOBWX2K6ZDsGsIYbym6MvRZ/N5/TDtpOy5K/lpb969RcdQF3G8
4se53iTHN8ygaDj+1zzi+7YW5wSifUno4DzN69Y+2JHNhyfn2wEnki/K3K6Q
3Ssh+LQSnxF+z/gK5zjneP5zPKgXOm0YDxlLSReK/XX+AGFkS/HdYVZ+DfEv
6bHYeEu2+abz0+xXTBPn7WTzxWXl/HX+NBY1svDq1maZ3bIpECzrirmHNGcm
WBel4qzy5o/TuL9zc5iumCxzu2h0v1+EL4SR7YhPbvY75h5yjnOO5y/H6bw7
swdgzlnZ6ghSO/fgBjac3oMtFw5/U3+d3Y+d107KnLf2NP0FGtA6ivZNRd+S
5tFFmbH6umWjzLHp9kmZ259Xo/NlfJx7OauGny+tqdJDHIdKnx8KcR6JLLOj
fQudTzqrJlV+cJzO1UTzGUf1wD4Zrz9qlx7eQvnhPVnNySKPr9A+lo6doOIc
5xz/GTk+tCNKhpngdvpTmdZF6wgOjPGXzJfb+dtyb4VSI3rhwA3Z64u4r5kj
jsUc2ydbXSWxrldFcjzWXz8m87plNT86jz3NE6dzNWcxnB5XGhencxtnMepX
4jjNwfFVg8ZfU/PUvjk7lpLjpC5ytKh88kgDlFpig2rLXVFxsQPLa2XvpDnH
Ocd/Jo57t4behuky34t03DWdi5ONT8liNvVLfb8Q9eHslTFFhrnesmz7pWNi
XQ7KzJBstZUkNW1p/HfmkdW0c5F5G7m1O2mPoBUzTOQarcuYxfCscT9TB3zu
Z/5qHB/VDcUW6OKvO3l7DtII94EQ2EnyfFWILKesjjZG3cXuaDzGHC2GmUJ9
oj2qLrBmn3OOc47/NByn97Zrcyw/J1ttQ2r/0HmRP9ax6/Zp3Ev2mkhZIhw3
iA+UeVs0b015urGYS07f3WWvzUEZED4EwiwN9E0IwLHrZ2XeTk5Ga7AuOrwB
dSYPYXMesTpY2f1wyvCJmuKzQvYxi78ax2mtWfIc1HbtKLz9IHuu6qnky2If
P2tAtrlYC0OGKLvICg39DFCzvRq6Whugm4sFmjvqonqiEzlXhpzjnOM/B8c9
2qDOdEM2dkVWm/xPvDgvQBbHaEyY1j+aO1iMK2TXlN5QjnVG+lvZt8fys11V
xXqFWfzOOi7s3+T+m9OPzU/pv3I2DuYhjvOlbTx/AH3C3NlxE9xVv+ivukrq
qGiI7fiyhp+E47LMdyqrua6eBcGm3n84fkuGOsLUOtE6wk7NRI6PkeTEzx+A
P28czVM7Z+9YAjn/duIxKoyaWbTdieaoG+kIoV1DTJg5DXfTUhCz+y/0tDVG
89n2pA824hznHP+hOe69dr7IcTcV9Aj3wvbkM9hMno833jyBjbf/xcZrR7Hx
7H5sPHfgm9p04SD7yXw0Guf4OOelpsgwGlPIylvOEs29W2iMWSfXY/vdM9h4
4zhj48ZzOW8rS9suHcX8PSvFeTspm9j8El/JW6PbonmJvmqQ8+sCw9jhCN67
EldTkqU+VsfuXMDYLdHoFeosxsFZvacvnjdorIfVUOkvidt/pU0sX8UYk0+s
xlbik2+8fULq/ZdGO6+cgAat1eXc/FN7Q4agRKwlFpzdim3Jp1mez8arR767
rs3kXK8/uw+N6Htmegw+ctyE1VVrsswH628dx6ZrxyTXTe73h+YhbSTrrj6O
9P0TehbOO09yLiolOqDdBAdYB0/8eK7XH96LrhZ6aDqWnL9FBdoGznHO8Txx
nEaOTRdnzW/WBcWH90TxMCMUj7WAHOEP0wRN4h91hVxA92+qWEAP9vPzPLtO
Yrwj7lv3IjkWESLPSsaQ7UWRbY3py1ib07ayVHJ4L/au9GP908k5jCVhfQf5
21QNFs8RXFRRdcwA1u84rgrC9O1JWHriH6w/sw+rT+1moqyKPbIR47fGwjhp
LJrNNBfH9dC4kWNjcV+zx8H9JT44/WyGzqf+KodzJ0c4X4IeY9JuuQWGkBvR
E3JkXbnZf2lUakTvz9tJf9KxsHTbpA0lo8n2yfGRI89ObPvDvr2u4lnn+mO/
lY3jNGeIXI+0/ypG9y+wD+SG5nztfClaZ7d0QE+xnQsMCp7lUUaoH+GMev4m
OHzr0/NR6D9/or55P9RdYM+W4RznHP9ROU7jnBqRPp9q8dH47lzCoEh9wlii
eYPE+Q+oz0v97O+J+qJZ9zb995zB378Pw/XFez+S3LPjyXHyUM/dtmibaNuy
fP/RvXOeY536xrQtlA10Hgc6t5BTC3GMv5dkm3R9Pu0kIv/2biv+jc7HTOvO
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
Lg==
      "], {{0, 150.}, {370., 0}}, {0, 255}, ColorFunction -> RGBColor], 
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True], 
     Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
    ImageSize -> {292.00000000000006`, Automatic}, 
    ImageSizeRaw -> {370., 150.}, PlotRange -> {{0, 370.}, {0, 150.}}], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Slika 1: Logotip podjetja\"", TextForm]], "InlineText"], 
    Text["Slika 1: Logotip podjetja"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.924160861525593*^9, {3.924160932195627*^9, 3.924160963800703*^9}},
 CellLabel->"Out[1]=",ExpressionUUID->"c3cf00c0-ace4-c146-9c94-56e391503e1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hyperlink", "[", "\"\<https://www.trgovinejager.com/\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9291993573019104`*^9, 3.9291993862682686`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"397f2813-6f2c-e449-a544-1117724316ea"],

Cell[BoxData[
 TemplateBox[{
  "\"https://www.trgovinejager.com/\"", "https://www.trgovinejager.com/"},
  "HyperlinkURL"]], "Output",
 CellChangeTimes->{3.9291993870026226`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"2cd73f32-cae6-fd4b-b0b9-2f863f761b34"]
}, Open  ]],

Cell["", "Text",ExpressionUUID->"957b46f6-5c96-704d-9de5-95c0867bc6d9"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["OSNOVNI PODATKI",
 FontSize->26,
 FontWeight->"Bold",
 FontColor->RGBColor[0., 0., 0.]]], "Chapter",
 CellChangeTimes->{{3.924160138057602*^9, 
  3.9241601646075993`*^9}},ExpressionUUID->"3a67079e-ec43-6049-8aca-\
6a1c75bac0ef"],

Cell["\<\
- JAGROS, d.o.o. je zasebno slovensko dru\[ZHacek]insko podjetje
- glavna dejavnost podjetja je maloprodaja \[ZHacek]ivilskega in \
ne\[ZHacek]ivilskega blaga
- SEDE\[CapitalZHacek] PODJETJA: Prvomajska ulica 29, 3250 Roga\[SHacek]ka \
Slatina
- podjetje sta ustanovila Franc in Marija Jager, danes podjetje vodita Ale\
\[SHacek] in Bo\[SHacek]tjan Jager
\
\>", "Text",
 CellChangeTimes->{{3.924161029775564*^9, 3.924161177996172*^9}, {
  3.9241616093759336`*^9, 
  3.9241616111856995`*^9}},ExpressionUUID->"bd3a56b8-233a-f640-ae2a-\
6563dbabbc03"],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"PieChart3D", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"56", ",", "20", ",", "20", ",", "4"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      "\t                                             ", 
      RowBox[{"ChartLabels", "->", 
       RowBox[{"{", 
        RowBox[{
        "\"\<56 %\>\"", ",", "\"\<20 %\>\"", ",", "\"\<20 %\>\"", ",", 
         "\"\<4 %\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
      "\t                                             ", 
      RowBox[{"ChartLegends", "->", 
       RowBox[{"{", 
        RowBox[{
        "\"\<JAGROS, d.o.o.\>\"", ",", "\"\<Ale\[SHacek] Jager\>\"", ",", 
         "\"\<Bo\[SHacek]tjan Jager\>\"", ",", "\"\<Marija Jager\>\""}], 
        "}"}]}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   "                                ", 
   RowBox[{
   "Text", "[", "\"\<Diagram 1: Dele\[ZHacek] ustanoviteljev\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.924161674388164*^9, 3.924161676476185*^9}, 
   3.924176828464794*^9, 3.9248635889780674`*^9},
 CellLabel->"In[56]:=",ExpressionUUID->"ff7bfd5a-f1ab-9144-a49f-34242cd349a4"],

Cell["", "Text",ExpressionUUID->"0f9d2766-a62f-3843-8c1e-3ddd0be4dd2f"],

Cell[BoxData[
 TemplateBox[{
   FrameBox[
    TemplateBox[{
      Graphics3DBox[
       DynamicModuleBox[{
        DynamicChart`click$30371$30599 = False, 
         DynamicChart`click$30428$30599 = False, 
         DynamicChart`click$30456$30599 = False, 
         DynamicChart`click$30484$30599 = False}, {
         RGBColor[0.5, 0.5, 1.], 
         EdgeForm[{
           GrayLevel[0], 
           Opacity[0.1]}], {{{}, {{
             RGBColor[0.980722, 0.7110406, 0.2420506], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.1]}], 
             TagBox[
              GeometricTransformation3DBox[
               TagBox[
                TagBox[
                 TooltipBox[
                  TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]}], {}, {}], {
                    Polygon3DBox[CompressedData["
1:eJztl0tI1FEUxkdHkCYKJzWM7CFhm6AWBW2EsyhIKFuUMjZjiyxxIWQEEbSI
JCFTqkVSi4iyUjRatKjIHpxBwmiTUElEUuYjM805hBBEjE3dc490OLQI2v0v
DMx8c+c/9/G7535fSW3jrrpwKBTKzrwOZ16/3gctaEELWtD+RyPMrSnYuLar
o8wr6S1jOJhKYcv54eWR/Nvg9ew3JyrrMYWfEx17pyJJ0dMLSm+NH0zhqWPh
uuIfT0V/vzJvxbX0DHblFn+PDg7M96/cmr+4cQb3TG7YnOp/KfpYPHX5QfIL
Fvd0l8fPvRa9tXBoKDY7jVebSp99g7eiVyebdt6JTGOsB2sWDb4TvXn9gbmH
OVNYua6o7HjpB9E7Zy9eOjo6ibXxIzlrBkZEn2xI7F/Y/QkfZ91N99eNiV5w
/0X43u4JLFwdrRqYGBc96j5jkfte9F73e5x2zxM97v4Pb7r/F32HGx+eduMV
vcLNB+NufqJfcPPHM249RF/i1gs/uvUTfZtbX8yq+r3eoje5/cARtz+iH3L7
h3NuP0V/5fYbw27/RU84PpB5mX9+W23/k019zBOJ3s486f7EPGWr5zczT2k1
nhvM07AafzXzxHyJvop5GlXrc515alXrGWeeYmr9PU/Nar/2MU+dan+TzNOE
4mEp85Sv+FnGn/MUb56nXsWn5ymueG7h8VUo/hM8n+3qvJzl+ber8+V5iqrz
6HkqV+fX83RSnfdQxO1fvaoPnqfnup4wHzFVf1zzPPU90v2vMI9e9zx9ZX6l
P/PUxrx7nesVdPP5kP7ME9cr0T1PJXz+Qn9tBIEe6IEe6IH+b7pdbwns+kxg
13MCu/4T2PcFgX2/+HHq+2i+/5/3F4F932V+b96PBPZ9SmDfvwT2fU1g3+8E
th8gsP0Dge03CGx/QmD7GQLb/xDYfonA9lcEth8jsP0bge33CGx/SGD7SQLb
fxLYfpXA9rcEth8msP1zZr9Mv01g+3MC289nnm/6fwI7LxDY+YLAziMEdn4h
sPMOgZ2PCOw8RWDnLwI7rxHY+Y7AzoMEdn7M8GDmTQI7nxLYeVbqlcq/Uq9U
XpZ6pfK11CuVx6X+qPwuHKm8T/AT7dcpEg==
                    "]], 
                    
                    BSplineSurface3DBox[{{{
                    0.9297764858882512, -0.3681245526846784, 0.}, {
                    1.2979010385729297`, 0.5616519332035728, 0.}, {
                    0.3681245526846784, 0.9297764858882512, 
                    0.}, {-0.5616519332035728, 1.2979010385729297`, 
                    0.}, {-0.9297764858882512, 0.3681245526846784, 0.}, {-1., 
                    0.19076020221856696`, 0.}, {-1., -6.517147164852144*^-18, 
                    0.}}, {{0.9297764858882512, -0.3681245526846784, 1}, {
                    1.2979010385729297`, 0.5616519332035728, 1}, {
                    0.3681245526846784, 0.9297764858882512, 
                    1}, {-0.5616519332035728, 1.2979010385729297`, 
                    1}, {-0.9297764858882512, 0.3681245526846784, 1}, {-1., 
                    0.19076020221856696`, 1}, {-1., -6.517147164852144*^-18, 
                    1}}}, SplineDegree -> {1, 2}, 
                    SplineWeights -> {{1., 0.7071067811865475, 1., 
                    0.7071067811865475, 1., 0.9822872507286885, 1.}, {1., 
                    0.7071067811865475, 1., 0.7071067811865475, 1., 
                    0.9822872507286885, 1.}}, 
                    SplineKnots -> {{0, 0, 1, 1}, {0, 0, 0, 1, 1, 2, 2, 3, 3, 
                    3}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 1.}, {
                    0.9297764858882512, -0.3681245526846784, 1.}, {
                    0.9297764858882512, -0.3681245526846784, 0.}}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 1.}, {-1., 
                    1.224646799147353*^-16, 1.}, {-1., 1.224646799147353*^-16,
                     0.}}}]}}, 
                    ImageSizeCache -> {{27.19387205970966, 
                    232.5721953737714}, {-80.75246114894219, 
                    18.67545892333564}}], "DelayedMouseEffectStyle"], 
                    Text3DBox[
                    StyleBox[
                    "\"56 %\"", "Graphics3DLabel", StripOnInput -> False, 
                    LineColor -> GrayLevel[0], FrontFaceColor -> GrayLevel[0],
                     BackFaceColor -> GrayLevel[0], GraphicsColor -> 
                    GrayLevel[0], FontColor -> GrayLevel[0]], {
                    0.12492087639048328`, 0.654858167152459, 1}, {0, 0}]}, 
                   StatusArea[#, 56]& , TagBoxNote -> "56"], 
                  StyleBox["56", {
                    GrayLevel[0], "Graphics3DLabel"}, StripOnInput -> False]],
                  Annotation[#, 
                  Style[56, {
                    GrayLevel[0], "Graphics3DLabel"}], "Tooltip"]& ], 
                
                EventHandlerTag[{
                 "MouseClicked" :> 
                  FEPrivate`Set[DynamicChart`click$30371$30599, 
                    FEPrivate`Not[DynamicChart`click$30371$30599]], 
                  PassEventsDown -> True, Method -> "Preemptive", 
                  PassEventsUp -> True}]], 
               Dynamic[
                FEPrivate`If[
                DynamicChart`click$30371$30599, {{{1., 0., 0.}, {0., 1., 
                  0.}, {0., 0., 1.}}, {0.03747626291714499, 
                  0.19645745014573773`, 0.}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 
                 1}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}], 
                TrackedSymbols :> {DynamicChart`click$30371$30599}]], 
              "DelayedClickEffect3D"]}, {
             RGBColor[0.919, 0.4612, 0.1], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.1]}], 
             TagBox[
              GeometricTransformation3DBox[
               TagBox[
                TagBox[
                 TooltipBox[
                  TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]}], {}, {}], {
                    Polygon3DBox[CompressedData["
1:eJxTTMoPSmVmYGBgAmINIAaxR8HwBo+j3s/ddeCtveLKFR5R/df3w8TPzF64
9MiLN/adS65afSm4DRdnv9sqVvThtf2hJmmPa8b34eJfiz+9unHjlb2pUJnH
08yHcPH1QWwKRotf2h97s1o9Ue0xXHyGsnf4jYAX9jpVHwxyzz6Bi9uXrgty
e/zMvj101yX92Gdwcd2QFh/RmKf2R5Sv9ry8/BwuXvwpV/f3nsf2XY+Dnn7T
fwkXD9JWXXSC/ZG9qKGc3aX8V3Bxh0WBwul2D+zPXZfvFJ30GuGe3mjmtUfv
2GuU8d+snvoGLv6P69DEsHc37J1b9c4+qngLF/erUZwu/vuKvcbMsGve1u/g
4pOM2sRiPlywf/LzXfDd2whxjp2iu0OWnrQ/O72r/XHke7j4y++5z619D9p7
LJWNu7gFIV72J/NE5+GN9i9mvOR1fIMQNz3uUaYinm3/4Xxex5f/CPHoyQ+k
uYQ37P/n/GT/1fcIcezgg/2o+PAQxx7vH+yxp5MP9tjT1Qd77Onwgz32dPvB
Hns6/2CPPV98sMeejz7YY893H+yx59MP9tjz9Qd77OXAB3vs5cYHe+zlDNA9
WMulD/bYy7EP9tjLvQ/22MvJD/bYy9UP9tjL4Q/2AD9OmPE=
                    "]], 
                    
                    BSplineSurface3DBox[{{{-0.06279051952931296, \
-0.9980267284282716, 0.}, {0.6623183427598826, -1.0436467112218686`, 0.}, {
                    0.9297764858882512, -0.3681245526846784, 
                    0.}}, {{-0.06279051952931296, -0.9980267284282716, 1}, {
                    0.6623183427598826, -1.0436467112218686`, 1}, {
                    0.9297764858882512, -0.3681245526846784, 1}}}, 
                    SplineDegree -> {1, 2}, 
                    SplineWeights -> {{1., 0.8090169943749476, 1.}, {1., 
                    0.8090169943749476, 1.}}, 
                    SplineKnots -> {{0, 0, 1, 1}, {0, 0, 0, 1, 1, 1}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 
                    1.}, {-0.06279051952931296, -0.9980267284282716, 
                    1.}, {-0.06279051952931296, -0.9980267284282716, 0.}}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 1.}, {
                    0.9297764858882512, -0.3681245526846784, 1.}, {
                    0.9297764858882512, -0.3681245526846784, 0.}}}]}}, 
                    ImageSizeCache -> {{109.70715650724654`, 
                    206.43959006772297`}, {-19.282720072313282`, 
                    61.20956664488452}}], "DelayedMouseEffectStyle"], 
                    Text3DBox[
                    StyleBox[
                    "\"20 %\"", "Graphics3DLabel", StripOnInput -> False, 
                    LineColor -> GrayLevel[0], FrontFaceColor -> GrayLevel[0],
                     BackFaceColor -> GrayLevel[0], GraphicsColor -> 
                    GrayLevel[0], FontColor -> GrayLevel[0]], {
                    0.35721786331933103`, -0.56288528366801, 1}, {0, 0}]}, 
                   StatusArea[#, 20]& , TagBoxNote -> "20"], 
                  StyleBox["20", {
                    GrayLevel[0], "Graphics3DLabel"}, StripOnInput -> False]],
                  Annotation[#, 
                  Style[20, {
                    GrayLevel[0], "Graphics3DLabel"}], "Tooltip"]& ], 
                EventHandlerTag[{
                 "MouseClicked" :> 
                  FEPrivate`Set[DynamicChart`click$30428$30599, 
                    FEPrivate`Not[DynamicChart`click$30428$30599]], 
                  PassEventsDown -> True, Method -> "Preemptive", 
                  PassEventsUp -> True}]], 
               Dynamic[
                FEPrivate`If[
                DynamicChart`click$30428$30599, {{{1., 0., 0.}, {0., 1., 
                  0.}, {0., 0., 1.}}, {
                  0.10716535899579932`, -0.16886558510040303`, 0.}}, {{1, 0, 
                 0}, {0, 1, 0}, {0, 0, 1}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 
                 1}}], TrackedSymbols :> {DynamicChart`click$30428$30599}]], 
              "DelayedClickEffect3D"]}, {
             RGBColor[0.6755956000000001, 0.4168, 0.49185939999999995`], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.1]}], 
             TagBox[
              GeometricTransformation3DBox[
               TagBox[
                TagBox[
                 TooltipBox[
                  TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]}], {}, {}], {
                    Polygon3DBox[CompressedData["
1:eJxTTMoPSmVmYGBgAmINIAaxR8HwBtmTH0hzCW/Y/8/5yf6r79/vh4lP5l1R
mF52YH/VhOf7v+1GiBsISSnduXBi/9MlnjMnpiDEZypMW3Kk/cL+/wf4FDle
vYOLp5w+JTJrypX9H2pfNT32QYg3XH+0M7Xrxv4pNZuWX+59Cxd/xmK2bUfK
nf1z5xQXrFv7Bi5+viugbCH/g/1ztNmO5619DRc3lbB/9frWw/0+/Lqtxn2v
4OIRjU8mWU56vF8nvMrYLvAlXHzrJck184yf7l+6MmHhx+/P4eLGdwR/uO99
tj+znCXiQvMzuPiJucmnanRf7K+c1Pmy6tsTuLiAUPjXBU0v959qPyi3LvAx
XHytgs90s92v9u/a68LqOP0hXHyuufmx+1df73+c7n7AddJ9RPgwhoonXHyz
vy7y76+Nl27DxfP3xjHOW/N2/9FdD579+HwdLm6xc5P4krR3+08eXd6b/+sy
XPy+nIDson/v9i9jl/klePU8XBw7+GA/Kj48xLHH+wd77Onkgz32dPXBHns6
/GCPPd1+sMeezj/YY88XH+yx56MP9tjz3Qd77Pn0gz32fP3BHns58MEee7nx
wR57OfPBHnu5BAwfrOXYB3vs5d4He+zl5Ad77OXqB3vs5fAHewA/DbCn
                    "]], 
                    
                    BSplineSurface3DBox[{{{-0.968583161128631, \
-0.24868988716485524`, 0.}, {-0.7878993818185092, -0.9524067456346745, 
                    0.}, {-0.06279051952931292, -0.9980267284282716, 
                    0.}}, {{-0.968583161128631, -0.24868988716485524`, 
                    1}, {-0.7878993818185092, -0.9524067456346745, 
                    1}, {-0.06279051952931292, -0.9980267284282716, 1}}}, 
                    SplineDegree -> {1, 2}, 
                    SplineWeights -> {{1., 0.8090169943749473, 1.}, {1., 
                    0.8090169943749473, 1.}}, 
                    SplineKnots -> {{0, 0, 1, 1}, {0, 0, 0, 1, 1, 1}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 
                    1.}, {-0.968583161128631, -0.24868988716485524`, 
                    1.}, {-0.968583161128631, -0.24868988716485524`, 0.}}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 
                    1.}, {-0.06279051952931318, -0.9980267284282716, 
                    1.}, {-0.06279051952931318, -0.9980267284282716, 0.}}}]}},
                     ImageSizeCache -> {{23.743279803652854`, 
                    117.69999999999999`}, {-19.282720072313282`, 
                    58.13294253302517}}], "DelayedMouseEffectStyle"], 
                    Text3DBox[
                    StyleBox[
                    "\"20 %\"", "Graphics3DLabel", StripOnInput -> False, 
                    LineColor -> GrayLevel[0], FrontFaceColor -> GrayLevel[0],
                     BackFaceColor -> GrayLevel[0], GraphicsColor -> 
                    GrayLevel[0], FontColor -> 
                    GrayLevel[
                    0]], {-0.42494932649912626`, -0.5136754951838596, 1}, {0, 
                    0}]}, StatusArea[#, 20]& , TagBoxNote -> "20"], 
                  StyleBox["20", {
                    GrayLevel[0], "Graphics3DLabel"}, StripOnInput -> False]],
                  Annotation[#, 
                  Style[20, {
                    GrayLevel[0], "Graphics3DLabel"}], "Tooltip"]& ], 
                
                EventHandlerTag[{
                 "MouseClicked" :> 
                  FEPrivate`Set[DynamicChart`click$30456$30599, 
                    FEPrivate`Not[DynamicChart`click$30456$30599]], 
                  PassEventsDown -> True, Method -> "Preemptive", 
                  PassEventsUp -> True}]], 
               Dynamic[
                FEPrivate`If[
                DynamicChart`click$30456$30599, {{{1., 0., 0.}, {0., 1., 
                  0.}, {0., 0., 
                  1.}}, {-0.12748479794973788`, -0.1541026485551579, 0.}}, {{
                 1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{1, 0, 0}, {0, 1, 0}, {0, 
                 0, 1}}], 
                TrackedSymbols :> {DynamicChart`click$30456$30599}]], 
              "DelayedClickEffect3D"]}, {
             RGBColor[0.4366, 0.49960000000000004`, 0.8097967], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.1]}], 
             TagBox[
              GeometricTransformation3DBox[
               TagBox[
                TagBox[
                 TooltipBox[
                  TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666], 
                    AbsoluteThickness[1.5]}], {}, {}], {
                    Polygon3DBox[CompressedData["
1:eJxTTMoPSmVmYGBgAmIuIAaxBwrclxOQXfTv3f5l7DK/BK+e3w8T/8epuuZp
3vv97VXMqTJ/jsPFmW42hKTvf7//VfTC2NdcBxDqnZ/sv/r+/f6OyQ+kuYQ3
7Ee15cN+9hgRY7VlC/fgd80He/qIo7vngz1293+wx+5foHqs4fPBHnt4frAH
ANQdYBY=
                    "]], 
                    
                    BSplineSurface3DBox[{{{-1., -1.224646799147353*^-16, 
                    0.}, {-1., -0.12632937844610864`, 
                    0.}, {-0.9685831611286311, -0.24868988716485524`, 
                    0.}}, {{-1., -1.224646799147353*^-16, 
                    1}, {-1., -0.12632937844610864`, 
                    1}, {-0.9685831611286311, -0.24868988716485524`, 1}}}, 
                    SplineDegree -> {1, 2}, 
                    SplineWeights -> {{1., 0.9921147013144777, 1.}, {1., 
                    0.9921147013144777, 1.}}, 
                    SplineKnots -> {{0, 0, 1, 1}, {0, 0, 0, 1, 1, 1}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 
                    1.}, {-1., -1.224646799147353*^-16, 
                    1.}, {-1., -1.224646799147353*^-16, 0.}}}], 
                    
                    Polygon3DBox[{{{0., 0., 0.}, {0., 0., 
                    1.}, {-0.968583161128631, -0.24868988716485524`, 
                    1.}, {-0.968583161128631, -0.24868988716485524`, 0.}}}]}},
                     ImageSizeCache -> {{28.316595338820854`, 
                    117.69999999999999`}, {-19.282720072313282`, 
                    11.777278970153887`}}], "DelayedMouseEffectStyle"], 
                    Text3DBox[
                    StyleBox[
                    "\"4 %\"", "Graphics3DLabel", StripOnInput -> False, 
                    LineColor -> GrayLevel[0], FrontFaceColor -> GrayLevel[0],
                     BackFaceColor -> GrayLevel[0], GraphicsColor -> 
                    GrayLevel[0], FontColor -> 
                    GrayLevel[0]], {-0.6614098008763185, -0.08355548904286969,
                     1}, {0, 0}]}, StatusArea[#, 4]& , TagBoxNote -> "4"], 
                  StyleBox["4", {
                    GrayLevel[0], "Graphics3DLabel"}, StripOnInput -> False]],
                  Annotation[#, 
                  Style[4, {
                    GrayLevel[0], "Graphics3DLabel"}], "Tooltip"]& ], 
                
                EventHandlerTag[{
                 "MouseClicked" :> 
                  FEPrivate`Set[DynamicChart`click$30484$30599, 
                    FEPrivate`Not[DynamicChart`click$30484$30599]], 
                  PassEventsDown -> True, Method -> "Preemptive", 
                  PassEventsUp -> True}]], 
               Dynamic[
                FEPrivate`If[
                DynamicChart`click$30484$30599, {{{1., 0., 0.}, {0., 1., 
                  0.}, {0., 0., 
                  1.}}, {-0.19842294026289556`, -0.025066646712860907`, 
                  0.}}, {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, {{1, 0, 0}, {0, 1, 
                 0}, {0, 0, 1}}], 
                TrackedSymbols :> {DynamicChart`click$30484$30599}]], 
              "DelayedClickEffect3D"]}}}, {}}, {}}, 
        DynamicModuleValues :> {}], BoxRatios -> {1, 1, 0.1}, Boxed -> False, 
       FaceGridsStyle -> Automatic, 
       ImageSize -> {233.39999999999998`, Automatic}, Lighting -> "Neutral", 
       PlotRange -> {{1.2, -1.2}, {1.2, -1.2}, {0., 1.02}}, 
       ViewPoint -> {0, -2.4, 2}], 
      FormBox[
       FormBox[
        TemplateBox[{
         "\"JAGROS, d.o.o.\"", "\"Ale\[SHacek] Jager\"", 
          "\"Bo\[SHacek]tjan Jager\"", "\"Marija Jager\""}, "SwatchLegend", 
         DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.1]]], 
                    RGBColor[0.980722, 0.7110406, 0.2420506]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.1]]], 
                    RGBColor[0.919, 0.4612, 0.1]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.1]]], 
                    RGBColor[
                    0.6755956000000001, 0.4168, 0.49185939999999995`]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.1]]], 
                    RGBColor[0.4366, 0.49960000000000004`, 0.8097967]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            "Graphics3DLabel", FontFamily -> "Arial"}, Background -> 
            Automatic, StripOnInput -> False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.1`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.980722, 0.7110406, 0.2420506]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.1`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> RGBColor[0.919, 0.4612, 0.1]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.1`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> 
                    RGBColor[
                    0.6755956000000001, 0.4168, 0.49185939999999995`]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.1`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> 
                    RGBColor[0.4366, 0.49960000000000004`, 0.8097967]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"{", 
                    RowBox[{"None", ",", "None", ",", "None", ",", "None"}], 
                    "}"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", "\"Graphics3DLabel\""}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]}, "Legended", 
     DisplayFunction -> (GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ), Editable -> True, 
     InterpretationFunction -> (RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
    False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Diagram 1: Dele\[ZHacek] ustanoviteljev\"", TextForm]], 
     "InlineText"], 
    Text["Diagram 1: Dele\[ZHacek] ustanoviteljev"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.9241768290726604`*^9, 3.924863589565094*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"4df3b740-705c-1d4a-822c-cf26cd5409a5"],

Cell["", "Text",
 CellChangeTimes->{{3.924186382982847*^9, 
  3.924186383323578*^9}},ExpressionUUID->"2970f341-83d2-7541-b88e-\
726f702a3735"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9241768428760195`*^9, 
  3.9241768428828382`*^9}},ExpressionUUID->"621b16e5-663a-2840-8ad5-\
d88896e4a274"],

Cell["", "Text",ExpressionUUID->"f4f113a2-cc00-af4a-a431-f06028135bac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{
   "Import", "[", 
    "\"\<C:\\Users\\HP\\Desktop\\Ra\[CHacek]unalni\[SHacek]ka orodja v \
matematiki\\Dru\[ZHacek]ina Jager.jpg\>\"", "]"}], ",", "\[IndentingNewLine]",
    "\t       ", 
   RowBox[{"Text", "[", "\"\<Slika 2: Dru\[ZHacek]ina Jager\>\"", "]"}]}], 
  "]"}]], "Input",
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[8]:=",ExpressionUUID->"306dc76c-db3a-e24e-a760-e3403353af5f"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    TagBox[
     RasterBox[CompressedData["
1:eJzUnQd4FFX79mdbCiBipaWSACrVgoiASknvFPUVRWp6b1QFsQEqiAooNhQE
BZSWXrf3mp5AKCF1+24KAfX1e87MZrPZ7IYkgP/347rZazKZOTsz2fPb+3nO
M2c81yUtiyRjGJbmBC/L1m5alJq6dsvyMfDDysS0mKjEjRsCEtM3Rm1MfWEd
BVYmkTDsc/iPlhtbVWY1tanvKKvNmpWawatFpb2jtLr2q40trbpWw3XVpZZO
fZvhuqbtSlN3qxpaUN1oa2tobW1oUfZI1dDaDLrR1tLY2tbUpgS1tKpB19St
sOMNjbpRrW2Cd2/TglrbtC1qY7PKQKhFaWhVGeG1uU3fqjJJCWrTqVoN6jaj
rq1do9KrcanU2jaNtlWrbtapm/So2Ra1rlWjb9Wi9SClVqfS6bWaTkIabbsK
l1JnBGk17Td0uqYOA5xge5uxXd0BG7cY1Wq9waZadEiwo0pnVOvbYS+dvkNv
6IRlQhpDB0jdI4OhHaTXGwnpeoS20bdDI0QLJmlRg5Yy/0ptNKoMBhAcg8YA
u5ub6iAOgGjQfAzKdiOozWgg1GrQm2RsJ9RmQGrVG0FK/FysTsHqRKyk6rkC
/7KI9723UmoNw1CbRv8vqBU+zD2Cbkh0WMteD7rRorze3EboWlMr9FNbah1A
V260WOlyY3OPWsy6dKO5vqH1koXqbpg0VF5Z6Z7zqqFJqQZ6aJVXm5pqbv+p
bLmmVdXcvHmzSadtMeiVHe2qzi5QW2cnSNl506Dv0uluavQ3VfquVl1nk76r
QdcJ0jRr1S1aTSsiT1urvq3F2NpqbGvrbGppADW3NrW0NbcqW9pUrfB+oCZl
Y7OqCVcLoRZ1a6ta1QhtajubNZ0tqo5WVYdSaVQRwj+BACWN2qhRGnRKA6DV
2Gog6KTU69t0OiSNiWYGpRHg1mTAEacx3DAYr+t0zToEPYJ7QCfo0dC1lcYO
JLydnncxAmH0ug6DvtNo6CIEyyBYSQguDqFW4AYwpKMdv1YdqvZOy+5vxpfG
2EkIMQHW6E1ctWQaNAuvhAh+thiMhEwsau/dgDgMgmkIa1qjJQzNx9kLKCtE
aAy21Xczu7v//8Cr4SHr/4RXVsgiYGXmFcDq/vEKYDUYXt1vWA2SV1f0er3u
Zmtra2NDk0qpv/zZl5XhK5vWpNTGR13JSGp6f2vbZ7vaDu5V/vC5+uRh3R/f
tRbmtJTktbIKlQKmWsFX10i0VxS66xVaVYNGc0Ota1YaW1o7lM1dqqZbmqY/
dZru29pbf6pv/9nW/WdL160bnbcaOm/d6Lrd1v6XsuPv1s6/W7r+vtHx1/WO
P6/hatYCXvRt8LHp+fxAT0QAaYbD1aqVOpUa8adRhxB0w9ipVKtAKo26559W
o9GB0CdBbwSfZmzR6TTGRmN7k95o1EDv7gLp9J2EtLoOQgRDVD19x+yvbJoi
tN7YTogwRYRJ0+oMxJGjg9chr6U1dppkx18hAvc4Q0sZtJ0gPRwwSAec7NRp
0XEa1O16lVHbI0RvXCZ31HMWlqdjU72c7Ct7Hf/fd1z3hGP/s7yyAtdgeGUH
WcPjlQWscEANzKthwOp+mCt0ldRqiNquNTfCRdO3dys+/PB38og80tgLlDHZ
Do/kOj2W5/RYruOj8Fo0ajx9jKvkYS/Jo96ScVOlbtNkk2crps0pf+bFiucW
VPourgnwqQsLvPLa8obV/2mOWtOWGKVOi7vywZbre95pOfCB8tAnuu8PGI4d
7jr1/Z9nf27Nv6gqylEzCnVcul7E0su4hnKRoUKsv35F03BF09Sgar3Rpmpu
1rc2tysbO5Tq7i51dzdIc/OWuqtb03Fb0/GXtvNveAWpO/+r6vxvWxfon9au
f5pv/tPaYVTdvgmhk05n0LQbGtuBgcabzV1NOn2z3kCICJqIAOqGRtuo1RG/
Na8H39XagdTS3g4Ch2M2PMg79VgmwJGuvQsEC8b2mwZjF/I8uFnSagAmBghy
bXZ8ZF1wGps5ZrY00ALQw3INYcnAYhEiDoxQc0eHTqM3S6vtVf/3NbU2xI7/
/ymvhkGt4WHnblqzdFk240Ezr2wha6i8aukPqwF4db9JNUhMmdXR2ALtX9G0
Xm1TIefDyst39Sx2dBNhk/mYNxfzYmKTSkEU71KHKXTnJ/JJ4/OwcTnY2CwS
6PEsytgs6rhs2vgCzCUPVw42MRubcBGbkIW5ZpHcSrFxpaQJdKoL3cG1xMGt
yNm9eKQnffQU9mMTuONd+W6eAq+poiemiafPFM9+WvL0c6Lnn5HMmyN75cVy
/yVVEYG1byy/tOb1y+vfUKSvV2yOrNyRWPVxZvXn2+u++fDyj59ePrb/yvnT
V7N+v1Zw/nppzg1OYaOY3iznNJfxWiur1fUNjVeu3WhqaFQ1Nqla2gwdDbru
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
FWcZomyWlMOrELLLjmXnh3/1IUp/4ZVsaNABz1yBlwZeQQx4Z171LYcw5e2t
KvnBMAOvwFmlhCPHm4bzKjFk6pdbrqsgRrlJ8ApwRPAK7Jbe0G5TZl4NhlpD
ApoVBO4hr+5VLn1gIg0MapVeTfDKoNfqb//VkBpVSZowgL8aNq+snhcPvFJg
7iLqZFkPrySzXWt+fcqSVL2wYi68Vuh/hb2g/tfnRcs96RMf47mN5Xo8KnF1
Fzw5XjB9onDWRNHsCaJnXSRz3SUvTBLP9eRO9Tw7YWau69SLHk+dmjTzy2ee
nPX2PIeExSMSgx1ifUfF+kKXX/71hymnf9z2+88pOcfeO3dq19lT7587/dHF
Pz7NubA/P/tAQQ7oq7ycCxwRU1QB4IJ+jfLzPFkOygLJCV6ViCqAVy9+/S4A
ipoWQDydAcWA+LMhzLzC0oNHpKyIPnWUI6iEHp0jlQM0Cnhye7xCkJSWFwET
wO/R+U/vzyClhKDMFXrQfOjIzRGk9CD8OaRhWEro2J3r3s0+B52dy68A0BWW
V8PuWSW8Akm5vfxVTkVVjrQMeALxmumkeNIsAYrFLnLFfHYZX1SR9PvR8Zve
HBEXSEpH54VlourQke+t/iT7Ygm3HPGEL4JdCGULZZay9FSWgojvx8ISlw+j
KNG+5BQ/CGZXH/2CwSojJr4gBGgCRhXjgWQORwjK5YpAeTwxGsblS0CwS4Go
/LxQ9geDT2fL4HvneH5R/KEvHoqLwDbid4Cie6yWOMX4QjyIBvWil1joznPI
mEctTQs9VWfkJH90H1NqBMErCspJhj7x1dYbGh0ClK7DYGjXtXcAr4Bag+fV
sNl1n3zX4Hl1z0k1sFR6pabjL7VKbzTogFdXk9aXY+OqaZPuK6/QbT79eCV+
2rXu1HQzqSxhdZX1UiVrYaX42UunZ4kWu7Gxx4XUiUIHl0rqdCk2SY5NwqeS
AAa6iSjuYqqniOLBpj7Ewbzl2OMS8uNibCJ7zESf0GcdNi4ZGR3kmOA/AqKG
xMVozqvkcGf4rtwRTk5fBqJkLHfe/Nrobaseenf1IzveBs39IH332TMleAYm
X1xWKq4o5imKhOWWvMplCOcdfgcVHaWjOkwTr4gHbKWHmJ6al+g3ZU/Cd/nF
4EygP+aKJcCQfF6ZJa8skQVGLhcCN3E5snBcafTPXzluWQmhGXreaCoaDcTS
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
DVzFgioZiySDIoL/VePQQCxN4fjIOw58NBW2pwrPRyXbW8JPCi4LDoheiw4+
2uRKPr5khJFLGtZvvOFQzwElRkDrJyLsEFQyqapcEkAMx/EYfgkWI7JNHe4C
XKoGk6rB8FbL8JxMp0xhUwF3srZX9gtXS3b/G53yVSrpi1SCUpqrcqZknoI8
WNHxChnDMSGvxpNK2h4N+1MBSwi8Amp9XeQTsT1xfe3+pjtXfn51b+D+9Yq6
C5v2spir3JklpIwVNPZqf0aJV2IhPmMllbPGr2h7IKeEkL0Kn7vKdflWGm+N
e/ZacuEmv5Xbinaf3rXn7IFjNee7bojvv3j++t1vb1/99vr1bz89eNgsqDt0
bndKdkw00z+GQ07Kx6/fWyy40vb6t/95+PyXazcf3L738MGTxwCxJ49/HRr6
D+iop0NPXrx++OotagHaP/DTwA1h76Bw4Lr48dCzd//5n0fPhu7ev/f8zQtp
vl3qBLEfzd3mzTaePstw5hzj2bNMdOZazJxjPm+O2WJ9x0UWZJRydw01MyHq
LbJDNJtvNdPe0zww0TY5xzIlxyyWaRmSYhmQYuKXoRfJtfJLNfJOMvRMNKTG
6wfQTQFZS7jGoRy7qGznxCKP6Fz7YJZJVK51+iq39FUuicuI/nRrp1Bda79F
tv4GTkuQuPKMt/FMsaXGmLsu0Q3w1j0xbXab4jSAj9QMfrg5zJhahY/CCuMV
wGqYVxrawKv+EV71p8y8WS033w68gsf+3fPFM7RQ/mqydv8UxKteVR0UI7yS
IktySjOFSpi+0gReaSXaK9DJE3vA0bxCfZlkeHWyoXUMr1D9dldPVd+VnY0N
35Qmw1+vcrEfumpYo7XNpyBlxEyNjc89jpyYxPEG1afK8lRh0iDUmDR1Bk2D
6QmWUCmTNpzSZ0p6GqA2KdQJMvySAOkCGgYe1dheIHtUGdTJbG+IUSJQJlTZ
VFQRypI0jWGgpduHv3OuB4g0VQ4NTgkdh4OMqkImUYGNVkNDIanUVcYCVCvT
XSkdj7LcOX5ABuUM4hR0WAJQaMJAKM6iwAGVMtGvD8dww6W7oU7O8pE1Wm6N
rSUeG5J2Q4hX6E6HJBY2vPuXNGfrJEfPfJ+sfbmHa/Yfbzhy+NSaletD2atd
4/IcwznOUZmEJUyHULYVfQWes4aQtc6VXeLELXXNKsVzV3hAsJfhs1ZTV+3M
33V604odhUu3FpysOT7487WnL9/e/flld7+4vOHsxv25xZszEjJDopg+MZlu
sTnm0WynvWdWCa93dop7LtZUnio/frJ839FLWyubT1y5OfDs5X9evv7txetf
7z+9W9d2fuPOpWt2phSvT1ixkXH8wp6rtweBhigJ9uRXWVmFdYnB1jl19Jmn
Z68133wm4GiuheZcKy1NQ81vF2nPNVug5zTPSSJ77Hwt9F0N5lnN1XOYjw80
9Yw2D0oxC8uAc7NJznVKW+qYutRmCcvaI0LXPnCBQ5CuQ8hiWpJJdIFj8nIn
5mqPzA2Uwl2+BTt92Os8mGvcOesJ9FLXpKVOwSwLj2hDpxB9cIJuYebESDNK
jDklydojzNApYKEfZeGJ72cDqbqwxZE/AVafyCtZWEl51aOufWWSjpRXgxo6
fclaN6rMPsCrm40u/Tvn9U/XlPKqR20mxqseFcwSamPIkogrtEChLK80kxCv
RsHqE3g1ay1HyitUXD3CKxBX5zq6/I5sU84JRCnxfBoqU2fJ92tyQpYJ8vaP
eo483yfrPWUcqCqDjPLDbJRcwvG8UGR64rg0HBNd8ioc1MBZg02bxKJNYlA1
6HLfF0QOODWsM5gSljGTyBsg0phQY6LAvmRFCamQxZPIPAgFhgcYz0ksypdc
TyCPKoOozIRvnqAsZZSEV8htSX4dytk0MJ7qLIk84xBU6AR4LeocKMdlg1CU
DPO5oMUsGO5oxW0WCc13/kRejZ9MOjpQCos5rNIV2WjVCTCkILC/jHFa5GVq
HqabuMpvy5HiPRfXbT3ELlwXnFDgHspy9E6y9ku18001D6KbpQOX1nrlrycz
V+IjeXYxua7+qRZJeYTQDMtItnXu+ujSPdziLWywe6U7c/ed2VDDP1/Lv7z3
2PK80oiETHxqPo2zIoSzIjgxxy2OZ8VZ4VS8KXjHkeyD59bsOFq8Ymtq7pqw
nDVB7FX4o+Ubr9278/Pjd8L+/pOXdqzcHEXPdUjKdU/guSXyiMyikO2HS6/e
6X/3228Png6bwSHQYZKQJt7Tl1IDk5zd/W2sycaWFF1z0qK5NnNmGM7VMVg0
21zHlDjHPsAAeGXkbrLYfpEFydgnzooSbkEOM/eJs4zOtOOUumetdWcstQ3K
sHYP07fyXmRMnm9CnUtOsEhaTmCuJeRscc3e7LJ0F6V4t2fmOjx9pXP6cuek
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
5/RMBLtsMMGZmchb05GzU5UYxz0AdnnOMWk7Pn6WIxp5cjysELsEJnE3P+w+
ADPoYhns7iXYCeoJTs9hwGZgWzIdwoFC9d3Zindmyt+Jh85iJ1okzy3HTlBP
nLp/Fj/PE7tSL4iBX+uXsjvjn8bZ+Mn5pdBLJkxxIH566hv4+cWUe9r5ny9O
BM0mtKkTmVWCtL8jTlZHZVnPiTIzA+giI1QPMtZLpq7ULeyFpnbL16/ULl0N
bu6XxXf9w1uB4S3f6I4vfik0tRce2/YPb5QMb1rHtjw9M5aKZnlJWGbxqLgq
Jk/LclabusZKZrcj87uVk+uBidVgbM7fHXePrAQ3D/yXb9fvHtUsXwrNXwpC
qRhs0RnLlLaIzlGjCnYawx12c0grNYvAexIzxxoW1fTZIj3aii55XcwQapUH
W2Qto7axRfvC+cDmYfX6YfX0VlnvrL1lzNg4rG8a1gwsePrnvJAHNg8Yarol
HePq8XV7fHF5bG52dD4eX52e3YrPb48t7oyt7U1cvDlxeG/q5v3po9vjhzdG
r9wYv3QjvnttYmEzNrPSN7vav3J+dPPSxPnLo7v7gxcPBg9vTu8fTQJXb03d
fjB/79H8rY+nr90au3Fz9tqN+cvX5ncOFjYuzi2fj8+uDU0s9FYNt9cO99QN
9dXGulrHumOLsd6F/sbRZm20VF3jsne45ytL/pIk/Iym+h/mwFf5kt+dhsKQ
+NtTxM9P0bDd/xQNSkWw1tenaMBX0HmK9nmC352m/fY07fenWd+cYibuPUX/
/anELdZPMb7BLEf88iwJgNQI+PwsEfjdGcLXZ/nfvCUAIIDa8Ou3BdB+cYb7
h3d4f3iHC/LB/usc/B6kbycvjkbZFHaV9HuYyoDPztB/d5bx+VvML95mISCG
5OrfThFAs78/xf3sLPXrd4i3reqCaSfs/u9OVL0zHn03Xv3eVM07k1XQ/mS6
9q141anpaJKZKgzsTgvVp+Zqkos4qB9A508m7pQFBsCvN3l7MozdOTMOrih/
dwq7S8BPZiLAmcQt+FLzjTOJo4pp2cuLs9nnsf+hONmP359h7vhVZiqBt44v
gXkHVLYUPbNUdXoxioa9OKkeO12/EnkPu0IwcZ0g5kB8Y16uqlJdge6WgK6p
yZpuZZlWynoI4OTUeub59u86wfUqNX1XX2VRVqqvaJuh3vPRvkVX16J7fDs8
ct47c94/vB1un/W0zTra5wBn27SzdcrRNmPpmDf1LNi6Z22dk46OYW9Vq1Pr
EsjtLE+9rm/KM7bin1z3zWwHZ7bDg/PunrhtbKV0ZsO1erlyaa9yYq10ZN0L
SVekz+SqUVsrLME2T20sGGh2arwKkYEv0LN4OoozKm4YsreOWTunbD2zrrqY
rj6mi817hhZtoyvO2Z3A9E7ZwGJJ56S1Y9LRGS8ZXXZPbgWxyfa4rWfaAS4d
WnaOb3qWNtaA1QvrO9d2Du5dPHp0+dbTS3c/3b/77PLDT688++Xh008vP3l+
6fGn+7B4H3i0f/vjS8CDp1eePr/65Nnlx4/PP3q4/otP7/78+Z1PP7n98+e3
gE+f3Xj2+NrjB/tPnxw8e3rl0+fXfvHzm88/vfHkk+uPnt14+Mmtq493rz89
OHp05erHB7cfH957dnTz8dWr9w63Lu9u37ywdm/78aWVfx0Y+Wx07L9tLPzn
odh/D0b+uz/6x9LKf9U4fi23/g9d4I/Skn/j2r9imr+kGb8i678sVH+RI//8
p6LP3+b/7gz3X99h/+tbrH8+Q/uXM7TfnMH+I8LPwSSnaZ+fJn1xhvzlWQoO
LAJfY+qjf5VQH6a4M1j59hV26SIFXWr968Q1jLCS5HogODbkFwlg8JenqMhU
X72dvGsfWg948vN3Kb95n/Xb9xj/+h7h63eK7+uV9EHH22OVWP4w7sMSfnSG
IdpTsMtSTvwcJ+qCt2fLM3J6sRJxKvF/0OOJytk57D+PwO5MDvnblB+73jYB
FA7oVm/4JcDoYv/M15VMJU49nU6eVY5dVjOfNN6ZufKz89ihSWiTmQy6HAbW
f7xy9CrvzkYA/DJn4J145duTFe8krlbGrtXFmaqAzBPdkuVF52Q4yUQCLEXM
AEr/UI53GrciliJmOY0z24mj39lX6dYKZuZP4yvM5Im/47n5QHiiNNSnrBg2
NM+U1MSNTaPmqrGS8pi1fMAc6tWXtitLmhWeVkWoW10ZU9cM6VsmTCPrvvm9
mtHF8miHHqqtmn5zbNELGhnbcM9fCi9frpw5H5ja8M7teKE8nFwPQq5V1aOL
9Kjrhq3RfrO3UeWoKIl0Vtb0VbiqLFILn69jq5wSR4Wuol0DIupbcA6veaAA
hDwK6ikIOmfNbVOGgWXX0Kq7ddzUNKTvmfIMLoTgtVb2IyPLzu5p48Cic2zT
N7EdHFr1yjQiuV6kscsdQYO/1lHR4q7pLG3o9XeO+Psng8Oz5WNzGCMYFYOz
4cG4d3jaN7oQnFoJz62VL6yH1s+Hdy5GNvaiwObFqu09jM3dyMZO5fpW+fic
f2oxsLpRfv5C1eb56OxKcHjONzDrG5wtG5oJD0yER6cii+vNK1ttsyst00ut
S4vtiyvtSxsdD9eH/+vkxH8cHv3F7NRfTMz8Y1/3fxns/6e5yb+eHPjbhcnf
HOz81531f9hc+W9ba/+8sfovy0v/Mjv3LxNTvx4c/03f6K97hn9f1/N1TdeX
kdbPQ42f++s+81T/tiTymbPyM1ME+J3xBZ8ZKoEv9R7gc23J7zSuL3Turwze
r2BR4/oNy/KlwPVvMs8fFaX/r8wL/FHq+YPE9XueFYNjwWCZ/41p+j3D+A3d
8DVB+U2x8psC+dd50q8+En35Pv/L97hfvMuBnBCqV0xrZ0h/fIdyX2dg9rtP
xSNQLmE38Z4MYFLC7ubtQxUQfl8R7NYime43kt4/Hsb+A/oJbEL+7GQFDprT
AB2hQgwyH5DGe1C4HRdiuHlQ4pF6nW9qTZesraahIA0jQ6IBICjshgaoEMOL
uLnQ8TXaFWjnevHTj26YkJZNpSZCadlUYiWJ23+V4+vEVpulJjqR3oSOyTI1
dNzz0kU00HN8HWI632qC60/nq0zWOnN83wnscx50OXqsvi5laMhcH3eXjxpD
nVpbk8HVonO36hyNCl2lQBFga8N8a42kpFnm61BX9Kt6F61zF0OJa21cvfOO
rlkbdqrVknN82z27FwBlrV2Jbh9F1w+DS/tVw8v+ml4zdkvhalWwzVzeZfU2
apwVxkCDI9Bgt4XVYjOTLi+UWrjBJlfjkLl7xtE9Z4wtmodXncMrrpHVkoEl
W9WQDl63bdoeW/Y2jxoahrT9cyWwZsi4oJgdWoFcS98eN3RMW1omzFBLEilM
gERnkTlsCp9NFbDoQiZDxGJwBRyRSCiViGRSkVwsVkiEcrFAJhIpRTKtTGVU
ai0anU1pcag8pcZgua00aAB8IaM/bCortwUTlIWt3qDLH7KXR5zVNe6qGic8
5AqYrX6rpUJvCRuMPq01qC+rd5Q1OtxRizNq9VZrXBXy2hb7XHfkYk30ZnvH
3dGJy02diyLVOFe6WVJ6tan14ejYJ9Nz90fG/3xh9a/ml/5qYfkvl1b+em39
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
7t5ZePRw5Nm9oSd3+h7c6Pz4Wtu9w6bb+zU39qqOdo3XF3VX55QHU6JL4+zd
Ifr5GIiOsNlTtN5VvNENARZvdhesd+attueutH2w9oIP19txfrra8v5a68/W
2z7YaAcgfm+56d2lRvx/9kneIRk/XJjmqxeX7Pkyk+UcKuQK/LalOHh/Gq/1
FT5r9/ryMGM92GMUlUvlPgHHKuBaJNJSmcotErilUptEahNLrCKRWchV8+hS
BktBFxrYcj/PUSOvihnb4tbmMQvkUcFuWaBTVN6rjg7oo8PmQJfeXCXVBEXQ
upu1XVOu2LK3bQabgKodsbfG3WObgZ27dTs36y7cat241jK5FRhascV3PaMb
HjBSqMOYuDIRuzFC7bChul/XOGLqnHEMLtvHNtzjW6V9C06QWKBN7m9ThboM
rlqFMSQy+pTWoFHpkAoMNK2XZS3nglsQSEcv8qKUnj8d+Kuf3IyMoG1LBa9D
00C+ehMKqQygiMZEQRonR6Y9mva6SP7AyU3CH0odk3XlDBZQwGIXsjlFHC4G
jwcQhUKSSEQUi0kSCUUmoyoVNJUSKLRqi2y6Yrue4DAQnUZyiRmguC1UtxOg
lZbQfG5amZce9tHK/fSKACMaZNdVCJqr+a01PKCjTtjbJI61qkZ6NWP9uokB
49SwZXbMNj/hXJoqWZkpWZ1yrsSd69Pe8wvurTndZD+5quxds5oRDZfMjLde
vdR6tF+/v9t8dLn91mHTjf22w0sd1/a7j64M3DwauXMz/vHdmfsfzz18MP/o
4eLjR8tPn6w9/2Tr0093fvnL3T/7s70/+/OLf/4XCIh3f/HLnZ//4vynP99+
/umF5z/f+/QXCIh3P/n0/NNPtp88W/z02fwnT+aePYYW4oXnT6cfP5i4f3cI
/PnxjfjjO6OPbg0+uN738Kjj3pXm25fCty8AoQSB23v+Wxd8ty+U3tq13tq2
3NwyXd/QXVtVX1mSXZ4XXZwR7k3T9saoF0YpuyOEnaGC7VjeZt+5jd6P1ns+
2u75cKv7J8utb801vLPU/M5q69nl5lPLTW/P1b01W3tmuho4PVWFTRsmJgyx
m6nil8mgwwGQ10H9Ox588f/LTwSTt1mYDJ5O5JBnJsrfnopg/73FeAjAjpNi
B0ZDKVcLHh+jSRyuRdZKOg3WM1F2usvBCCo1Np7UzmcbhHwZX2YUyirkIBx5
CV9s4gp1XI6CRRYVUxUkkZNrjGigJPS2qSsHjeEenbNWYY/qLeVGa7W2tM1Y
3m/xtSnsNQJTWKj2SPU+nafVEBm0N07Y22Ysg2uu2Uuhtes1u3daLt6r2LtT
uXEUnL3oje+WQv/omrdpWFUXMwwsece3/BPbPugZXHKNrXvi532TO76+JWvv
sqdhrMQQFlkrJc1jjoZhZUWLqbRW1DRo7pwMmP0KpowqMnKUTk4RmY5TTGHg
ZOxM7f+enDQP4ofy1ZuTzWNvMjLbgIzqy2i/V7x6MoAUkcbAyaPSEbmQslIx
PqJQAUhoUWmfJv/8RCGPJZ9kBgaVmUNj5tJZOWRmDpWdz+Dls/g5LB6QyxHk
80Q/5fN/JhR+IBJ9KBZ/JJGck0pzZLJcubxApcpRyD+Uy3LVKoJBT9TrC+WK
c3zhT1SyPLuJ7Csh+lwAJVTKqCwDH5Lqw+T6MLWxgtEU4bZU89tqhe11oo56
cV+bpL9dNtCpGu7RjceM8SHz9IhlZtS5PAlK9KzP+Lbmy3aWwnurFZfWIX+L
HmxVXdmuubpTf32v8eal5tv7LXcOWu9eGblxdfj6ITB689r47esABENHV2IH
e8PXD0ZuHQ7cOIDytv/OYezja313D8duXwfG79wY//jWxP3bEw/uAWMP782C
RR/cx0i4dP7Jo4Wnj0GDK88eLyWSxoWn0Plg9umDmSf3ATBh/OHt4dtX+48u
QwU99PHR4MdHA/ePqh7tRx5cqvh4L3x3N3j7fODmlu/6hvfamurKtGI/Lrk8
Idwb5e4MsbZi1I1eyjqWKxZudEG6mLvecW617cOVVuD9lZYzmxhvbbe9faHz
rd2OU5vNp9YbT21hSeNPVprfWWx4a77uzGw14vRM1anpyKmZ6Nk5bCLx1GQF
VNbYQeeZ6g86HbpmR1mVUVsqZRo4QiVHbeHLQ3ytT6Jw8BRWocYuk+j5ZD6R
KWcYAwZvk7S0WW6r4hnDbLWPqiqlOKPCshalo0bgquOX98gaRjQ1A2pXtUBm
pyqdfF2I6W+V1Y9pexb1U3vO1Ru+jZuBteu+raO6ub3w5Hn/3KXypatV0IKj
QFADy46pC765fd/KUXj5aiVoauK8Z+qCt2vW2Txugjq0dsimDTDtlfyRleDS
fmRoPjA47168WD65FnJHRWonw1erqOkxJubGkxBpLJyMnan935M0DX4rH6YO
e/M8KqNk3lxWGY2UOjjNM9/5pdGwYhK9iEhDpPo59XNIXSeJygLQ0V4EgcwA
sIMcKZ3450wkMlHNi8rewkRRDBSjcpjKRgHeA0DhnEOkAVA7w3h4FqwEimhY
hEofSmyQIQAVN4CGoaIbKnSoshEfMDnAhyzuBxzeh1z+RzwBSA/4QCD8UCg6
J5bkSmV5MnmBQlmkUhM02o/MunMWfa7NmO8wF7qsxW470esklboIlT6AGPFD
mketCeFArijoahB2N/K7G/g9jZAxSoY7pCOdyqF21XCHeqxHO9Gni8cM04P6
2SHD3KhnZsw7O+5fiJetzJRvLFScX47srlbtrdefX2vYWa/f3Wjc22q6fL7l
YLftcK/t2sWu69g8YcfhxbaDCxDE7h7FPr4ee3hz+eE9xOrj++tPH248e4TY
efIJxrPnWFqYYPPZJ1ufPAcrLj57glLE6ScPpx4/mHzyIP704cjT+0OP7w08
vNN//1bnnWuNVy/WHezWX7lQeu8iUHJn135jw3Jj3Xpzw3S0qj1YkNxY4h/O
io8WpBBcnuJemBBcmgKCV0YHL44ubA3Eljoa402do00DMy39603j651DC83D
s40jsy0dg1VlVU5PxFnVEW0d9fbNVDXFKsONgUCtt7zZ3TYeHFqJxmaq20Z8
XXH/4GJF70w42GhROyQ6l66hv6o73hCbrx1ZiU7vRucvR2Z2w+Mb3oEVT9ec
pWVa17dqHznvjq2aY6vG2cul0ztlkG6NbjrGt939y87qmLKiV149pC7v1pW2
iKIxVeeMvW5A3TqmXTsI792snNsMrV2q2L/TAG1zTNM6YFy6UL13qwl9e9/c
M2n6+p58B9F9f3Om6vG1Fs1YPAIEBruYzkJVZKo30sTy2jwwY+oF/cg2iJc0
Tkyo7Djvxbf8IxotIzk0ekYK6Mx8GiMVlLalZtSpbsRehcEmsDgAvHHsE4AN
I2H9sMHwOcCjRQxWHjZbSIM8MJ/JygiJyiFS2AB4EhkSTSEW0tigPgD8BpbD
xYjPTyLAkwjMkIkBybyRzMinYPOWHxJokDrmUdkAJJB5dC6QS+Pk8vg5AkGu
UJgvFhdIZAUyOeSHwAc61Yd69UcGDYgxx2pAYsxzmgs89kKvoxiSxoCbHC6l
VvhplQF6pIxVHebWVXJrKvh1EUlrnay9QdJeL+lqFPQ0QkEtibUqhjs1472G
qQHTzJBlbgQV1J61Od/mYmBnJXxxI3Jwvupwt/3yXufBpe7D/Z6rB13XDnqu
H/bdvDZw58bojevDR9cGrx4OHF7pP9jvPbjcf3gwdP3axPXr8Tu3p+7embxz
e/Lenan796DK7jnc959fLlmbjVze7n10e+STB6PPMeP13L3efjg3ujM5vzsx
d3V28srMzIX4xtW5S083jp5euPFs98aT7TvPL9x5fnn/9u7apY2F8xuzW32X
bq2dvwbx0sLO8ur+4oU7C/tPlo4ebV+8tbB3ZwbYPpqNb4z0TsaG56b27x7t
3z28cGt75+YyjNy5NbN+fRKYuTi4cDAav9A7uNkyvNESW64bWa1fuRLbvTWw
tN80vBLE7gc4W1kTK63s8UT7Sl01Vn1AUlqvHFouX7hYs35Qdfl24+616MoF
7/Zh6f7d0Plr3rkty/q+7/qTutuf1mbLc9L4zh77ttr5YX346q16k62FPTEj
RCYHV1bq3FfqG8m4Hny6LI20yhF97C/VkqgkfGW2lrYSWG0xhZ4K4RhcR+iP
i/Ix8E8umYqck0p+ovzE61AUw8YU0pOyQgZDWwIxicN7bQKMvyNkS/AVAlkL
gLiIziGRWGmQyWygCDJAGgcBMVok0Ln5FFgJt4jOAyAACqgc6IS3kISC5YQo
FQSnIWemAQlhLoWBQOkizgc01kcMzjkaO4fOQaX0z2isD+hsPF1EGWOOQJQr
FAPvS4UfyMUfKaXn1HIgR6PI16sLDBpwI5Yxum1FHnux1wGlNDXoZZT72VVh
VjQELbumHMQoaKySttUru5ol7bWK7kZlf4si1qIeateOdSsG2/jdde+7De85
tdTqgGm817c4EViOe2ZG9LF2rt8scxuMZVZbvU9f49YELd56b9N48/SluskL
0bGt0Ph2cHKnsn8hHO1zeuoM1Z3+vpnmzom6hlioaaSyI17du1gbW2nonanp
nooMLNYOLDd0TdfW9IUrOitaRrvi5wfHtnpHtzomdjqB/uXGjrm63uXmhYPx
rdsLy0ezs/sTK1dnN44Wdm+uXX96+dqj5Yt3p5Yv960djly4vbJ5fXX+0tzY
xujoykrH2GBspv/CjYXbz1ZvPp69+3T2+v34/s3B/Zuxg9u9l2507V5t2zvq
2Dtq3zp4ja++f971nbOgV7zQD77CN/HqG0Kis9PA+zMOfrUnQQiQtCDQDHwR
k12cAO9P+jPLelDnyToRz6BSsynIA/G/e9oAMoMDW4t7Ff9ukPCSk0QnJs6x
o0BlSn5JyGCwF0BKdpw3JrcHbSSRhtaAg9aclgS+4OUa/EV9nbANDipCwWao
XsZBOR6AD0iDSOOkkjyfkMouZHDAophRwWxUNkoIC+hsVESjOhqdC4RKbHgX
6I1Am/ruCoophQQqXvKjjwU27ByRjH4y4Echh0w9R6JAi/1GMBn5bFY+m53D
YuVzuUUCQT6fd46NHZGBbLmYy2MplGyliqtQceRKmlBcIOQU8zkkEZ8kFxVJ
uUViFl0hEBlVGrdeZpeLLSK1W2XwG2U2DUet4KhUAq1E49RDP8/AElk4ModI
VaJUulRSm0xoEihdcl2pRu5Q0GRskpircFhL6rWuOg20vmaLt9FiDCmVPpkh
rG8c9dQNuSt7HeXd9mi/p6LTE2yyV7R5eiaqR5dbxlab4xudU1uDw4t9HRNt
tf3RQEOFr7os2hae3ug5vB+//mTy5tOZo0czR/fPA9cfnL/1cPfOk92bDzev
3l05uLX4/U31g/AdXvf7mPbNx7yhh18hpWxWfHWmB6vC6q9jio81BXVcIf2F
x8AAyTGoUmO+GJkcAJ0JQHSpFLN4OIVsXgGLi4BdhkxjI/C9G2K8FsN3TEQO
g4HIY7EKOBzYoc7R6R9QKCcNiYDtx0HmQVlW6ral1qoZD1hg9XKWTzK1Qk9m
mImPKJ8OCeGLIxco0cKgph/RwD5b2osJPQDN8iG/Ja1IxFQDby0peToLFaR4
cojnh4kzdmiJ02loiQ1IklqDo5QVgYkXPg34wyX+gviPFBkETqSRiHQiAWsT
MDGoLGzWgogdcMkpJOYWkdAkQxGDCevJIWOVdS6VmsfAXiunmIocCMAHAquF
JDOXAl8SQQGNT2ALsW1OvDRAZPHhXUBnAZ1L5AgofDGZJ0rkqzyORE+XcxkK
HsBRCrgqMUMioIuFXKVSZlIINCLo5OkkQoOSq5Gz5WKAr+bq3SqLXwvoXBqR
TsRT8VgyBk1EYUhoAjXbXalvHihtG3E3D3mre9w1Pa7GmL95MNQ5XjkwWw30
TUUG515fD/4f4qtvm7a9eb733RLCbCO/m69OPjGZBqT0oPwE1xQqRfGnp+UP
LxKJRHqA6iYol4oZSQiJFIJE5wLFKQOS60+RHrSYDJk8AD0XdkMMJhegMrho
nh8pDgmKAhkIKymf5B4HbUKz8BII9NJkGgaFzkN6eSkTS3gmWa6mJK7Z0lT0
LcKL62SVSmciCxXTmcewUqv4tGL8xZQdnZNan4KLkhNllGQih33mWFrFwM6O
frkYR+euoJQPbQBuRfRamFIoWIaGn/734ujGcf6JT36iFDeXjgkHEziDA+TT
oKRl59M4efA7cryd8OeAX588BjuXziKiJ5I5UDtDalcAmw0rJ3LzyCQClpMz
ckiQyFEKadQCKiWfQsZaMi2XwCik8IpIXPh5IsJ7IRKSHobxBBIMI9KY+QTs
MPQ5AhMV2rkEWvKkRxKrkMgqTMTYURgopUkU2GbstBz4E1Cx39M8eCEalcTC
vgCJGRUWgc4n0sWFRC6ZwWOJeXQJiy7j0+UygoBKlXAp0CPm8zVinlrIknJ5
SmnaeQtph+FO7oypZULqVyUbJ49boR9cfP4Bz8CTi8evm6Yv/GuGf5lf+pq9
PBeEfyEzcCLzR+AHsNLI9r6yjSdRORlJ+wRefBTfRne4tb4bqQnbSb7Pmn/A
zfgxgV3mh3pTWb9vWeYnv+35Ld/nIPhrj0p/h7N9vu3rvuIsxNeCLv1DZNtT
Th4kQvZI0z4+74HvsCfmATLv8vjvZvoOS2HiJcmJOYfX7+/fmazzUTRmRn6o
1/0xffVqV/xovvo/Slk/1Kfx3dZ2cpYv25l735bv7JPvfzbjt1LWG3oS7087
gRO30CtmaTIupqUZ2dKYF9nUce6Uvk4KaIqDygR01Bv1ZJRVNom9CirjTwoh
K9/FVycf+r/DV/+/UNa3AlK1bLzhZ/7D/hVem++9Iut7E+/9UBlXtpwq23h0
dTO2oyUOcyd3OgpUvjSc5BFwtHiiZnz1rNfJTwA/noWPfIUYcXlmzLJgMXXu
Fz/LMW1O+GV+oEQoi6+yfn+yePvV4nqTDPDVvLkrfmRf/cjK+rYv+gr/ZOTk
ceGMh4n/t4OO87755n3b/eLVk+Fvfp1LtmteqGQKjUIFKCQyAIvQkghEcuIf
dr8DGo2e+AcBlUqlnPgHnfDQyX70D1afETRXmTZblZgQY6GEBAIiVnYlY0LK
IWbkpYw6eq2vsv3Q4HPOJ+BlIfP4H8qTGb8qP5SvTu65P76s/nf5Ku2lf6ht
+252+v6/R98f9Op/Cs2+idayfm+zHPITs6hSDl3CpgkZZAAWAQi4NALAoxP5
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
BCu6IxtWEwKy2BqBUgrR44OEOwel2mgJYKUOs8oJscoOtgSv4K/ShPsHk71M
EjyNwCtYLOayPLZl+Fnk+rOkb7jIpT/Jsth7W6DV+ooIg6Fss84k66II254S
n6XO6PmGsNnGgOnW0OnmwLkm/4WmgIUG/7k6/6kav8lqv7FSjwPF8tESxUS5
13iZJ+L9OneMoFl/ju1Qnmyvzm13oQsod6BUsa/YHQE2R7TOEEOfzg1CALaA
QgALGHJlogy6PF56aawEogDkgRDT5oWxMujSRMWVg1VXp6ovT1VdOlh5YaL8
4ng5JqHLk5W0CzNn9xeDSxfGdRfHSy+wc0voROjSRBkOwEtdHK+8NIHNCmyy
w/bn7yvxHEq1nsi1n1RLD+TYjKlsx3NtF2p8dul8YuWbQ4VuW9Z/KzxpDc4K
sOL+Crwif7XW7m66BqtVXtGm0J3FYMUxpcerrDAb+CvwKjfKlieDhCziFTGK
eMV7tASLpZ+RkfitOqyVHb82IjFwCR4GZ4EqYJGAIBtxqxjfFMfUq7/Wrr/K
MUgVASfG7jB6o+AGIR6QqF4nSPJG1tEzIakrVa8l9R9J3NHKG1zpRN4pwTc5
2daMmYxUprStEu6CLEpyArKKYEeVdlVpjvRsHPZgwBSF8NAqpvJkeb3avTrT
mZXC1lro2ZJimgPd9ohUiIpXPCVEpqkn5JsELs4ujDTJzdj/Oa9aNR5Qm9YT
ageyirxJ5K84r8TmivOKKuqcV4SstTYG99d51ZDhXJ/uBGQ1CzFghZQQmK1O
cYC/grkCr8oSHYvj7enOQTV7qrZ1drBVVpBlqq8JM1dehhD8FVJCIAuj0sdA
FWilCbVuVTntL3Pdk2XTFGYWL/uoMd54slQ2mOmgCbJpVnvMtMbO1kdO1AXM
tIUfbAg6WB8w3xi41BKy2By80BSy0Bw61xAwXes7U+e30BQEIThY7T1V4wME
DartAaiZugCQDZprCJqu9cfBOGCi0nO8woPG0TL5gVJ3gRLlYgrB6pzcjQRN
h4AwQnvpSBJxCbAiXl2cxIk10OXJaujqVO216ToEF8YqYMBAIXodTjkItorR
bLQch+FgnILJa9NVl0Y1Y2VeuzJsAKuDeXbjaslkvh2QtVDjNVLsG6dgvApz
2coWLxSGwqN7TNZ6R415CSvBb7UvSwQrxitB5oK5suT+iieGnFdU6SKLJYYV
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
zoEDO+raSyLLU+2rku1htMri3uCgKPuj9lFCE02uxmtfKNwJ038Z51VDjlt9
NhsJWWK7RVpdOhTlcVRjJxGsmtRunFeUHoqhxBcHgSPOK54PAlZNOS5UuaJW
MQ4r2CpkgjBarPYupIr0/PzKJGYX8XMgXmmibOjmwdwwKrmbUQsWYAVkpfqb
ZoVYaWJMy2Nt6pJlOyt9F9r9j9Z5j+S4pLl/1Jdpd7rde2em6Whd+LUl5GKq
27O1V+Zqr86WXpuruDpbfulg6eWpimuzoAScSQWzIiJdmiyBLh8sxVWP8eIE
u/xpEoGwGKe9MF50abL44oQO8Zn9BWcPaBDcnGm4u9Bya7b+ykTZ1cnyO/ON
9xZbb8023pxvgG4tNEIIQCQEtxebbkzXXp+qgXDK7bkGjBDOwgF0Ch1MjBJU
c2OulkRAI92Yqb41VwshwPvi3a8drLg+DetVPtMYNlvpebTO63CNxzKoVeUO
HesMnWiIgE0Ndt0WDjflzdAEWxXmbRLrbxntxVqwwKiMQKt4jy1J/saZwRYJ
XttS/Y2SA4zSglkjVkaofVqwNNlPaH0PMYXSQiwywiSZ4bYgFbmpN/Aq1IoW
4LgbIeW+miRSSwOSODWYE2eLy0QTa6lNcS5MdSmKt61nSYSsJsulItO9ThNc
pw3rqknb26trLk0oyXCoyXbXRlvXJLs0pMvzQy3yIi3y423UCdaZYWbqKCtV
uIUq3Az2Bp9HFe1CzooIlhNmKVoWfEkqMbuyQy3oAJ7okV/i9oyjj/oiNDGs
+wvvW6gEoxyQphXF2hfHs9pdeYaHOoYdA8AyKCU4FCY6lqVaFSe6amJcCpTW
RSkWBfhXsz/V4cyQJYh8V160Nfu3RFpq4yV4ZUgTZ1MQaw3RDLk1SgbF/qpS
6VqeaFOUZJqXKK3TZV4/d+38masHRieb2wcqa5pzsnLzsjO0makBLo66zLSM
6IjIaN+YmJCU2Oharaa3UlObFYwLszoZGAT6pPwWxZe39qQ6UJ2KJI55+Z1X
4IEpOkbIBxWAFcQxRXaLt2OtVrde81ckzBCsiFTYixnmvtagRHDDuOqj1ipX
wl63FpVLU44D1KZ2bs1F9sesVHOGS0uma0umc2sWq1ytsoutJLoIJXd7CDQG
r/AfCtuJrw/2R7XYwo0lrhfW3L5WdU/xMszwN84NMUPaWK20aUiRDJb7HemL
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
yYLBii0L2rXnuuwq8jhQ4T/fnXRhJPN8d9hSdUBxoPHODOtzHeFLVYqzO5Lu
H265e6IPyHp4tOPe4Y77RzrvH20Hte4sNbOMSehxogRKaDaou4UsbLGBaYmV
oW4urm7eW2q8t1R/e7b6xlSFQKpqlq/NUb+B0FQwX001pRvzTbzzikpMwmTz
9bkmjOL1vutzjbeXWu8st1GZi+pUrHK12LQyw+6pwYuvfbAGHlDtC5s0Iy6I
8a6J1d6J8cKFppClOh/A6kJ3zNnuaPirow2eJ7ujhou8M/xMs6PkFeqk3KT4
UL+wD9eZ2phZBfoE2Jhby2ykEf5BiWFhMT4+UR5yNxuHMC8/mYWlzMLc2nCb
hcFWqbmF+VZD8w1bvGXsK5slcVGWqnALYT3XijKjgrUGoZdPNoizo1t3aemK
btqFG8Elya7KJHuIP2uOPalJaXGgr/STz54+/vYvT77981e//9MXL76/8+CL
u48/f/j0xaUbD8ZmDh06fnbP3rG52aVvvvr902dfXL1269LVu48//fbK9Uen
Lq48+fKrh8+ffvrFXx89vL+zPb800a4l0606ybEw3royx5GqLiVJdhDVZCDM
0CfRky5RSofpEiQkOkX8IvwVVoNEO1zd5WmS8nTf2ydPXz52fWJ0+g//8u1/
/L//9Zd//fsfv/3qu0/vXZgb299eM1RbWpEWf3x46I/3Hv74/Iu5qX3pSfHT
+/YfHGwuSraju/84BplTolsCRe/LPwY+FWcmu2dQ6HciVTEXJJ/oKxvpqG4q
1dYXaSpVqnxlXHyQl53RJifzrarYwCvz+27N7r41NXBhV0tHRliZ0jvQydRo
w4fGG41kxmZVWVEdmkCGpnQHghXxisSLVOIcUEgAncSwIl7VZ7M2UcQIACju
r5rzXAEralmHhusiZrZnTPWmISBe6cFKkCeIhxQSyBLfm0OAInFeAV99xYCY
x44y/33Nytn+/FOjzfeOjb64furB6flbx8auLg1cnuu8OFN3eqzk0FDOdHfi
YFkAkAWXRXfusLt10p1qBSYTssoT7FYVb4u8rzLeuiLOpjyWjRBgVZ9s25Lh
AF6N6DxHK4MWupIu7Mq+0BOxXBNYEmSyM83mfHv4crXXuYFkuKk7x3vvHO15
cKzj3rEu8ArUunuo/e7h1jW71f7oWCdGUAsQg+4uN0HwYDeWm1bL5gwFdXcX
G6A7c6yyBBErVtuiFupuLcGkdd+c7by90Hl3qfvWQuethe7biz0353tuzXVB
N+fab8y2Ybw138E2ZzuvL7asgFRA1pHOm8utl2fqrs41IHu9Kbw1CfGtwy23
8a842nbnSAcOg24fbsdhwvojTm+hGjuJ4tuHO5iWahebwo7U+FztjriwPfJ0
X8SZ9qCz9d5ne8J36XxSAm2rdQWpCWl+3kFWlnaWFrbeXkHODu7BfiE+co+P
P/jgg3ff3bZxo8Hmjy02bnayl27ZttnR0dHHxdXR1ALgspVYGmzbYmVohoSR
PVkx3EgXaa8OtcsNM6W06A1P/X31L4RSgzQ2K1NluJToK5hG/D6zHsJM2d6h
ni//+MP3f/7h08+eP3n+7dM//PHZt397+t33t+4/WTp8ZunI2bM378+dPncT
duvm/dnhjoHW+oWpmTvX706PTx07duLuo6cPX/zh1r2Hn37z/YHB+uZ0KXIN
XapTWYq0LNURv2niW0X4pl59hteTaS+VlPnBrMi85jf0VJTi2J3DGjsnR4ce
3LzS29r8/R/+/G9///d/++EvP3z19Z+/fP6nTx8/Pnvy2szkxdF9p4eHriyd
/OL+w+++ePa3H/54YmG+oiDvzOG5rvaK4iS7ilQJrpGyRGdm8zKsylKt2GPD
1z4kz8uQlEHlKbYVqXZwU1z4V1dnyBozbBrVbp0VucrAkKmR/md3Vr765LNH
N6/ePTYz3VXTnR97drjhs+X9n8zvXRnvOz5Uf3p78ZWp/o7SbKuN79qbmpqb
WuSmhPSWBeEF6zIcGjOdqlOlVRky9niHdPvaLEe8C70d3gubyOkgBPWZjg1Z
To3ZzlysOTPXtTNXeIxDnmet2r1d696mdurSerVo/Lu08oZcp97S0DNjXQ/P
nrh/6eKDOxcvXpm+dGJxZrBioNirM1fSqXXppKJ6vmsP6JTn3q52A1LggjoK
GJo6CuRtame4KcRtGrcOjXNfiWdrrkt/YcCuCv99Zd4THQWfXDr2+cUjV5dm
7166dGVu9PbcgduLB354cPbr28vf3z30/fWFH64t/P7Uwd+f6b45UTbWGN2u
9mD3RGe7tGY6dmY6sYfMZDlXJ0tqUqRrN+84VSZZ1iVJahNtahKsoWolzJUV
8aqr0H242P9ATdDijsQzQzmn24OONniXBZrsUjmc64s90RF8djDxwXL9/cMd
MFcPlxsBJQAKmOLCJgR2MRM1X3dvoe7+Yj2sFDaBqVWj9Zrurglm7NZiLQRz
hXwQm8yhLbIU8vpcFcY7wksBfXcPNdxZrgdABNUxLTZQ/fzeYvPDQ213F5pY
UnmwAjnm3eUe6M5SN+n2Yhfp3qFemsFeijGJETEXnUvxtYXa+baY5fpAZILH
uiIOd4YdaQk+XOt1oT9+siGuJCWgND8nIjjSzdnDwlzi7CR3dPT09g5NTEjb
+NHmbVsMLMzMN3z40W/e+vU7v/6lybbNBhs+3Lh+3e/efusXP//p++vek1jb
rl+/ftvGLV5SS12yazlccbS9NkomFIik9BVPLTovn2/5arJARVd8BdO3LXUM
8r5BdgeZ2vX8iaUf//0/H33+/P79z77+/s/f/PjDl1//cP/+3bMnTy1Pzd68
emN+YWl2fu708WN9Lc3D9UW9xZnd2oy9bY3z4wdXbj669+TL59/98OTply9+
+Ov03s7GVCm7ryTVuTxZylj0Kq/ojjbm8IXFL44CvhDGAcXryeQoKDOitKg6
06kmy7k22wWqyfVsTLRqzgu9cvn89NjY6UOH/+df/u2H777/w/ffPX/65PMn
D7/+7MFXj25+dW/l+a2LTy6d/PTilRd37nz72SdP79356pNPepoa+7vbp6b2
N6g9K9Nsa9Nl1WnyinTnyly7ygxJdbILrx1xUpGAC6gm0wGigOgBbgw2xFXl
JqaERjy9fuGbuyufXrr44s7le2eO3To6c2pf98p47/2D/We6S053ai/2a2/v
b7k42n1ufCBObme7dauDxD7c13l7eWSNxr0k3a4pjyVHlYmS5gynLpW8NYW9
C70pY1SOc0OuC1XOQScCFEQx/WH6pmxWp6rJdm9QyXs18o5cWXuuI9K9vvKQ
I/trLh/e/eDq8acPrn12/+qZI9MYv3hw6+6lQ1eODY/1ZrGFv0JFZwErPXVr
5a0qpzaVa7fGA+zqKlBA4FVvEaMWtL3Eu0fn3qVx6y30Gi4L29uRc+Pk/hd3
Tn5yZmm8rX6komCyKndEm3B5X9X5Yd2lndorQ3lHmnDhRE5Xhk5VhAyXxF3e
X/twse30oGp/dUin2gX/FyyNTXOCZWrLcWzLcW7LdmfPP0yRNmRKiVdc2GxO
l3XkuGwv9txbFjRWH7Q8mHxht+pSb8SpVr/aMKvdeY4Xt8ee6go9N5T08FDD
gyOdj451PzqyyiiRj2JLaWzySJtQhK+/u1h3f5mlfowzy820SMfpRLYKWj1g
UUgnZyqAJjAKODq8U31kOO/47vxjI6rDO7OPjeSd2qc9ubfw5F4NgtP7NWcO
aM+OFp4bK7owUXpxsuzkzvzTuzQX95esTFZBV8ZKr46X3ZiqujrDRE2trFts
sX5V83WsniZKWvExYAWJmdAqCZfq8GGYpktOdUZfaAu+1h12rjPkHH4g7YEX
m33PD6QfbE4tSAwI9/eRSRwkVvZmplbubp5WEmdvv3DfgMjNm03MLSRvv/3O
e79b99u3fvWzX/53880b3E0Ntv72F2+/9d9//vbPf/KLX7737ocmJibvr1v/
8Xu/SYuQNqo8i6NtiqIk7BoX2RWIPR0O/nntiSIk9thJlUJodHnlLleK2cMk
tT4dKtcbl858//f/vPHJZw8ffvn4ybPrK5fuX7l+bung/K4dF+cOXpg/ONJe
PznQ1VdVNFxXstBTdbStYJ8qqC8rfHZ46Nq1uzfvfvrll189/fK7b/71Pw5N
78SvDa7Zqhx32AOBnA7k66rThVyJdRDZk7DJUxhxuZhXjImxEJViSDTDqVuv
8mpOtZ8eqjt36eronrFn9x/8y3d/+uGLL/7w5bfffvbFi0ePn9+7+/zWjec3
r31+/dKzqxe+vnLuy6vnPrt67snVcz98/tnhgwejQkIGBwcHquOrs+xr0uzY
I4iz3GtV9jXZUvYnO4Xc6nURJcSiAhG+OHa1ptVrspu0xX/7/NHX104/PXPi
8sHhG/vbb493XN/fcn648cJIx9nhjpvTO8/ubbs83LAyOXDhQM/O0mzZlg22
phbONsZt+eEwMzVJNvWpdvgP6mK1I7faHIemfOAIaHKCELBOyzXhe0doznTj
as93Z/4n37FLx/6vuzU+Q0W+O4u9+0u8d9WHHzvYfv/y4RdPHnz31acvvrz9
lz89+eLete8fPf7hq0///Kdvnn3xYOXC/NJw2XBpQJ/Os7fcD8aps8C1W+u+
o9QH2l7stV3n01fkjZixS+vRW+wBP9Zf4rXQk3p+T+mVA12nJved2NXTkRlT
npJQHOPXEuec6mEqtzB03Pg7XbBXtpNNqp1JupOl0snMz3KT65b1HlveqVe6
3x6tfDJft9iT1F3sW53r1pbt2qFy7lQ7A1mdajcG7UzHLpULvhYbUuy4sNmW
5dStdt9RrNhbFjBRF3RoR8LFPeqr/ZGnW30aIqz35jld6o871R0CXsFfIfsD
sh4ebiE3RchaJdVaSoirnnh1b4kBSkABeFVzZ6EWkxAC2oSAC+LVyky10PRe
BiuFE6Nd2F/tSfG1SPWzTPI2wZjhb53ma50dZJsTbKcOkxZE2WtjHLTRToUx
rro498JI2+IY+8pEl/p0j8ZMpuZsr3a1X6vGG2ov9O3U+feUBuHrZntFKMYd
FaEDlWHQUHXEzprI4dqokfqYPY1xYx2Jo+0JGCe6kie7Uw72pEJI+acaYvZo
FBNa+WSR/IDGdUynQHBQ6zxeFzNcnRwf6CaxMDUyMDY3tZJYS11d3U1NrCws
bV1dvT/+2PinP/nlL3/6s7d/9j/W/eInW9b9PFph35KbqA6R+8tMDDf97q2f
/+yXP/nVu++ue++99eveecvP1aQ5PwCWuDrZnt1eIZQj8PVK6QBGXC/sZoq1
5w7xp6Xx++VfuTU1X9GpYc0zuBwunz7xxQ//dvvp10+f/v7G1WtHp/Zdnpk8
urP91K6usyM9cx2Vw6WZtfH+9Uq/mQbtvuKkpaqkI5VxU7rY5d66y8uL186c
vXnh/P1Pnr/48/86tbAXCQjrcNb64LuYtf/lutIXPdVRyQCwR4sIVzfdP0s3
pultUqWFyrxUKH6jWvO98Ft6/ODQzPLJ5cUj3z158uLBg98/vPv84oUXly98
fu7EJ8cWHh46+GB5/OHS+KPDk8+Ojt6d370yu+fBsdn7J5cfXTwbExRYWV61
v0MFM9OYLWtTe9aBhGrH5nwn9rw74YOR8Jm5iA+ktUZuoY8o33OsJ6cgIbRW
nf/7B9fuHp765PjhZ+eWHh6a+PriocfHxvHuL07PP17ae3uq99Zkx9XRntvz
I/fnd908uKNNm2NpYOhoadykiuzPUwzqfAEEoAmv365VNOa7tpZ6gWNcnfny
lypwg+CCIJgirla1M1ubK5QjQRso9h6pj50Z1J1f2PHo1rk/vnjy3edPnt1f
uXBkck9v7dHxXV/evv7dkztwpJ8/uf/iyZ1Hl5aO7akZa08ebggdqvLvL/Pe
Ue61s9J3sJxpZ2XAzoogBMNVgfsaI3bXhwyWe++rC9pTGTLRkHCqu1Bpb6gN
cIow3+xvYR5kZRYlMZQbbFz/u3VbPnjfzdIyzlMeILV2NTOyMfzYcNN6H4mN
u/EWl02/TnTatL867sbBuhM78wdKAwd1/r357v2F7j35zh05Tr34vc12aUm3
a89yaMuUtaRLm9PsmlJtMWKmN89tQOe+t9RvvNZ/sS8OvFrpjzrd5NUUYTmm
cb42EHe6J/TCcNKDQ433Dnc+OMrq7Y9OdD083vngWAcruR9tRwBh5tEx5Ikw
XY1CUb3xpXVZIxWnFgkOh4wNAuavpitoYdHJeKOr2SYviaGv1MhbstVbss3X
zhCjl81WL5stvnYGATJDyMcWM1sw6WnzobftBl/pJj/7j32lG3zsPsLoZ7/R
z3aLr2Qz5G+3NdDeIAhnSbchDpEZhToYYyQhDncyjXQxD3MyCHHYCkW4GEW6
GpOi3EzCXK0CpFsiHLdGYq90c7jDtgjZlkjZ5iwfo6IELwfLbR++tw4Gad27
7yH72/LxVqPNW3/1i7d+9+76jRu2/OpnP9+07m17gw9DHEzzApx3lmWe2dN6
dKB2WJeudJGYrf/dL3/y3377m3fWvbf+rd/8ysrogzpVUJvKvSrJpiXPkz/z
nx6dDRoQgvjzt18+5YOVGryoFkrq1OBI9p3IVnbyPa+dO/PNX/+fx199//zZ
t49vXl9ZHrs1sfve1NClkfaVA93nd9TN1+Z2JXoPZoXsLYg+WJowVZY4XRI/
khUwnBM8Va8+NNR5dHzP9VsPn//xL8fndvVrFMgIuksCtxd69Wi9xfVYcUn2
9Uk+Ly7b0io5fIL4AFoxJ/VXBODbFnno8Qsrp44d//0ndz6/ffWTSyfuHdp/
f3nPnZkdNyY6bk603xhvuTraeHl//dn+8oVWzdmdTef2tK9MDT4+t9RQlK9O
y9zbltde6NVV6Npb6NOs9mjVunXq5OyBTkKyQwKOuGgGP0a+l36krSrHg9vT
VXF+DRrNNw+vPrt+5tnK5acrJ39/8+KtxbHrsyMvLh15dHgK3wV76/Kbc8Ib
sqKacmLmOkrvzuw4MzmscHHc8v6vB8rSdtWH1qpkNVrn9lL8QOQDhZ7DMDP5
jEVIwV4XiNRbpOjTecDh7Cj1HiiDC4KV8hosCxko9hqp8jrQHDRQGzK/t+bu
1WPff/HsL3/69vsv7j88v7Q81N6cldSQlby4p+/S0dHlPdv3t1cuDLVcPzbz
/P7K/8/Xe0e1kWxr33PmzIwTOWdJSCijiIQkQBIZRM4mJ2MwJuecc845Y7JJ
xmAbY4MTzjjnnD2eePN6//jW++2mZ7i+Z857tX6rvKu61N1u1E89u7qlvntp
ea43t7vYoy1b1pbj2JHn2JZjD7rUnm3flecMSgVBW5YDaBdsqz3TdrjYvfKA
qDfTqyzaMViga66/z5FBCuSznChUSzzNnc7gYTFcA11wWQ58uq+NINzFRkzF
2xpT+CRDYwNtDl5PQNSTcXEV0U5nO1I3e5N7s71Ar5qTpW1p1rWHzGoPmTfA
0Y4yrTooBIEqi+CBUhWFsEGyoApLW1ItetMdRgqcpxr8N/riNtv8QK/KfZhH
Uiwutvqv1rmf7Qy5c6zs5vG6WysNd5brby3VAlvHam4uVqNADC23F8F3gd0q
QUHn22/OldxaKIH0EHVWYJ8g3s4WC9DZeOTKI/TctmTbrizfgm1kxsRZmhDs
hGRbPt6ai7fnEx1MSY5CioOQKDMju4gpAMQ2PENYaiegOYiMATshxVZABiCw
F1FlArqjKc2BTwUgdhIaQ9WeR3ES0pxFUIVFZJBEex4JAkdTCmzFhou35hii
m7PjGdmaEAAxnSwkY8UMnAUNIyRizEhYAUFXSNJ2NdEPcbEw0tNUUVJWU1FX
UlDU09GFUmXvblVFhV3f75bfp6CnpgLvTfazK49yHc+KOdVRdLq/9Gxf6Zm2
ks7ESH8xV/Hv38j9/Qd5+X3q2lq6Gkpx+6X1MM6GcyqR+dI/zmgov9YfcOko
jSnI6AzSAey0oEA78EefeLuNkyuvf/nPR6/ePLn94Pb6yWuzvVf7mzYHm1aa
C68cabg6WH2mPnOtJnWuIPpIRtB0bvhCadzRwtjhlP1D8e7jaf5HCuMWO2ov
Xrr6+M3H6YGqjhQryDhqYWRMtW1Oc/h6uzs0pdo3pNo1piElgN7AAyUao6Ad
gD+XWv9T6tLsauOkR0dbLt68f3Ft9f7GiadXz93ZWLmzvnx7bfH28vT1uaGL
Y61nBupWeytP9VSs9xSeaM1dbS890VK43l+2PtpQn5t8KDi4peBgRSJs1wIy
HeTRMMmWNan/m7SiugG5EpIu/SkaSDVB0F/uc9BbWpud/ubO+a0zSxePLcwN
tbenRU1UpK73Va31VmUFuIGXIGurccmGbgLyfjEzx9/u4nDtpYXBAC8nssbe
2fK4uz3pYwVedWk2VRk2UDYlW7ck23RlyuDYQgrWnG4HoKnZn7ENKlPbzseh
PdtxW0Yc2tJcOtIdOrJsWvOdRtri79848euH1y/vPXp8bf1oT0VX3oHSMJdD
NuKF5oaHG8cunxpYHmiqjPFOduMPV6WdWZi4unHi/qW5yabYnhLfnkLPniK3
7kLnrnyHngLn/gK37hynbjBU+S4DJZ4DJe7DpW6dmXYF/szxoqAMV6va/dZO
RH0HhnF+oEdOREhZbsHiQGdJRLS/mYXAQN+MiLNikMwJWDeOCVdNm6KrQtbX
1FVV1lCQo+trufGI2d6i/kTXmZroriy3hgQJ6FULJKFxktZk6/rDZiBZ5ZE8
MFolYZziUDaUVQcFDXHitnTJQKbzkVL36abgjYGkKx2BK0VWlX7s8VTxxRa/
E9VOZzqC7y6Vbx1vvLXcBHqFKhVyS8P2VUIoUdXadlDIjBCaJKJGC6Rpa7Ec
vVNre1HxDSSjRGTt2jwCdLu8nUKChQNuzBSYM3ACqr4FCwOKZC8wsuHi7Hh4
mel2zDO05eNkZgRnC6KDkABqBi1WHCNbHtmOT7HlEe34IGtUJzM6YG+KteUZ
2JjoQwmxo9DQQYCz42NA61wl1G3FI9iZGtoL8I4iI5kZEUpYOQDtEMMiGx4W
aTHGi2n6EoaBmKYnJuuLiXoiQw0LsqaLgOTnKMbqaoFBAkMFVkpFQX73ru81
VRS///t3++SU9uyW11JV4uE1YxxNpktipiuTzw5Ugr860VV6srt8obW0PvWA
r5Sj9Lfv9u39wZjLVldW8rNidmU7QYZeFidDVQhOfAAVARCH1gxZS7ojAAEa
w1JoB98OVSjbs5zRGO0G1CbYrR1ffP7pl8dPH929eOHMRN/p3opL7ZUXh9ru
LI5cnmy7N99970jTVm/F1lD1pf6y6wOVW0NV51uzT1QlTOUfmCqKHS04vNJa
dOHCBVC8/obMngyb1kz7BthKpn1rlhOSNWzTmumAAjGMyy0Z9mj8D0ubM+xb
oB1G82xZa5Zjy3ZL0/YpuXOGwjkLIFMoKcht2I0pDhdWZzav3bt/5cr908ef
37zy7Oa1F3fuPLt54/WN62+uXHx4avnOsdkHK4uPTx1/cGr03sr4xlDrhZHG
1Z7i5e7iuuzDZdmZ7UXx1SkOtUnCBhCiRFuQiNpkKeLfUv+f7GjFzo4hLcni
3lKvgx7ijtLCZ1dWc6P2+0nMHPkkopamiGxQlxg6X5N52JZji1N14xDcBNQA
a16IFT/H1261o+jh+ny4t5OPgDqbHjBny1yJlR0t9GnMsqvPtmsvdGnIsqvJ
toWjisrRjiJB0JEjA75u6cx1QoF2MEKDJb6z3Rn3Ly389Oreixvn18a7J8sT
C0MdAs3JsS4WzemHTva39FdktOUfnmup2Jzpyg2XxXlJZnuqN+aGLh0fub0x
sdCZOFwVCnlff6n7QKlrf4nLYLHbQKH7QJEzaFdfkXtfgfNwsWvtIWF3qvPm
QG5DkJcfSTdEwIywlYw0VN6/fvH+g1vPnt9/tbXZXpod5mwZ7yfjGaqR1Pdw
CNqmVBxJb/vmNF1tLpnIxOqT1eTNcGpeAlJrms9UbRR87JtTLTvgk5AgbU6U
VB7k1sSIQKAqDvBBtQCQr/rDFiBlXVm2I/keU9X7p1vDNwZTNtsD5/Msyn3Y
Y0mijQav42V2p1r8by+W3lxquLncCC7ra71CQfVq+0b3XGRWaq4UuPLH1Hre
9QXk0iGAtqMxMjk/V3xlFhGrS8gXZ3KRJHEq78pEDo+gz8JoCkj64IUc+WTI
+GyZBAcOyZFH3c4KcfDZcBZSobTlEGxYRvZsvMyECDhwCJDuQd7nbEqEUgaW
yYQIfQAHHglWBSWklmClwFzJBFQk3+QQoIQWqIINs+FACxECcGJ2JmSIbbkk
KYMKR5vPwPHphgIKQUQmmBD1+XSsuwUzxMORz2HjDUny8or7du2W37NbSVH+
h+++hyrYqx/2KCju2SMi64G5Wqg8dPJI7ZmR+tM91RcmO88c7Tp7rO/MTOf6
SEtWzCFVpX2a+vr79sj5SJng7cujeaBXVYctIduqT7LboSkV9McJPetBEDpy
EK1AZaEz1xmqUHbluQAQbzt5hLokx0tnVl9+/nL71rUrK8dW+hpXO4svd1bf
XZyE/OXmscGNodpTDbnLFSkzxYdXOwqOVWceL4leLYu43J4DMrU61DrfkL9Y
mXhuY+3BsydtZbGDOXZdebLmHFfkDMpx6YFRON8VNoruAwAxtMCmoQUC6PA/
+sBO5rt2F7hBCTGqWohwbc+ZIBr41QkLNGW7NyY7XT6ztHnl/oNLm59vXPnw
4MHT23dOzw/ODzYuDdSfGWoASwPG5tJQ/fnB2uPDTaDJ56eHQLVuzLWtDlXW
ZMXWFhUM1+U2ZbvVJgvqEyRwJJuRGWYpIp5/4Q9dTYf9sUe1d0dvkZZ0+/5y
/5L4oMGayo2p3uxgt9b0+FAbtiOXbE1U680IejDVMJAa5sE0klCNuGSCLc3A
gYpNsBOdbil6ceFYXU5S7UHviyURz6N9TobbjqU5gaVpznHozHLsgUP3R1Lm
1JnvDECAxl0FLr2F7nAA0Z35+tj2lju1ZtuNVh/YOjH28cHWbF9bdpgszYPd
GWWz3pJ7darv6srktdOTC0PVbTmHM3zcXdhGbcWpy2MdcQF2oFoXJprhiJ2c
G7kwVTHZGA0Wq7/Uc6jcvb/Qqb/QZbjUY6TMvR+EC/xVketUtW9pOLsrxWkk
xy9QjHUSkaOcBctdVZ+fPv3lxeuPN2/fv/ro6tmTjzbXpxtqaqKj/E15RPk9
BE1lTRU5FtGIoKGuv28XQ1fdnIKn6qppyv2gr6FkS9wzWBw8Uu7fkmrTDZ/Y
dLuuDLumRPPGeAkIFGSI1dFCAILmRMuuDIfBQuepsoD5xrC5zqiN4fQL7QFH
s8xLvZiIXtW5HyuxOdm8H/QK/NXN5WbQq9uQGP6ZEqKgVZAaZLIdHNT2vBYy
lz6Vf3Uy98rRMmSuflvitr9ujNzbicRzxYi/mtu+4WH71vfL49kXRzMIGF0y
TpdHxthyjRx4RBumgdTYwIZtCJka5GsA5Gg7KZsVGwcGzNbEEAAbBtjzCQ6m
Ro4CpAP0hHeh/QHoD0C7TEhxFJDR7A9t2V4VBl0VrARdIVQBKdPIjIoVs4xE
dLyQZmhBJwhIGGiMCfSKDQlztXcT8iUKCkoaGmr6unoq8mryu7/fu0/x+z0q
u77fq/nDN75CUldawIm2rFN9NWcHa88OVK/1lZ/orTjeXzvZUVORlTjTWZcc
GYbXx+mqa1qaMg76WEe6mYbYMcIcKWHOtCh3NvIIQh9elKcJEONjmuBrnugr
SPbjpwYKk4LNE0LM40NME4I5hwNNk0JEGRGWOZHWuRE2eeF2eSEIuaGyq5fW
Hn7+cvfhk2s9PZeHGm+3V56baLjQU9GfdbAg2DlYQEx3YBc6M5uDLJYLwupd
LcrdpZkuFgkuopJI1+HiuPW+6rmavBMLk8/vPGqrDK5OtRo55FqcKWrIQBI6
5EJGunNzmqw9zR7SmZ5cRJRAf5rSZR25oEsenXCWwZkIJ1e+R1euG4zgPYXu
KKBaAHQA4WpIsWpLt4PTFj60cOb25rn0gazlu7Rnejw5OXbj8rnZ2fl3Nx7+
+uwFZDpjFWnFboJoa1NXDjPG2qwt2OFOW+Zoon+Ks8SLQ7GjYwKsuVlR3qsT
HbcWx5eaqyoTI6e6qpry/PtTLStKxd2pNh3ZLnXFYETFndn2XTkO3bmOQE+e
bAewLuBbUFAnAwHsT0+ew9GagMtthS2FuY8unG9JjpAJjRz5LB+egYeJYV9J
6sdraxt9dWkyUZqjMM/dusxD2psVcG6g6M5E962VY5dOzU4m+a/b0x8khp1O
3j9THNiR6z5Q6NWX7daR6dhT5tWebd+Z69iF7AC4KbvteSRZX5ErkqAVu0Fj
Y6o1ZIWwJ/3FHr2Fbl1Zko4SN9Ccn+6sgnSHWkoChfr9ca73lqfvXzzx/M71
z/cfPL10EdLn8+NdTVE+MWJWmBVxc2GkJuNw0n7z+dbco01lrQWRV4+3z3en
TbccHK30GSp2OlLuNlzsPlriM1DhMFLtNVTqN1TsNVXrV58sOVIZVXTALczK
1NYYV5UR92xr89Pzhy/u3nh+6/L9zTNbp4+fW5i6c+b4pfG2sbyDPhwDQyU5
TQ0Dg71yBioq6soKcnu+oxjoWbEYJoZYmoGWEKuXGWw3WRvany8bKnDvSnfq
zXFpy7BqT7UFN9WSZNWSYtmUJAE6MmwHC12PlLpOVXktNAac7Iy4OHj4XGfU
WKZdpR9pIl10odVnpcbpdEvA/YWih8t195Ybbx8H6u8sNwB3VxrRAFqQxhMt
t1eat+e4GkC+tiULufsdXBOS6x0rv75UefVYxbWl6uvHgJqrIFkIlTu3nqIX
HPEYPSMDLQZBV8zAgWRZsQylDKyUhbdkQ+qHB6y5BDT1szExgkYpC2vJxllx
DFGsQdNMoIORvSkZOuz0B6AKQDvkjA4CCsSwCNYDLVCiPaFxpydUodGcjgG9
AoRkA76RroiCM6MaulrwYoL9/FxchRwRHkvh8UzNzc2N8ESMDk5Jbh9kgt99
v3fX379jY7WzQ1xmajOmazOGs8OGMoIXyg4NpwfURsqSXUwjrJkFkZ5Hu+pX
Jkbc7ex1lZXMGEZuYqodW89NZATm0FlI8xCzwMiBOQRvacsmyvg0e74hLHWH
HJZniMy/8em2XIolDevMwXkKjTzNSW5meFcRxtUCMl+MzEwnM0B2ta7y1KUT
d27dvjcHnqp9vamoPzOsItwt2ILlYmJsTSc6sYzcaLrN0R4rVUlpLix/IcHZ
hMzUV7XjkHwlzNGq9JXeitMnTj5+9yohwjlAxgq1Y4U40iOduGF2zHBn5BE5
h9yRhwUcckWe6oU82tWLm+Bvjv76Dfo01YTt3/NMDTDLDBMDGaEW6NN5/nhA
T5AoNRj5ydOcMIvccHFehAR59miUZW6UtD3b+1nCoQv1pbPTo+tLJ/q6m0Za
SpNdJO5SFo+OZ5GNpGx6hI1wvDg5L8BVjNcTkvAcrJ4FlQDkxx44NtwzP9JX
X1O6Nt0yXp/QnOZcn+c6mOzek+zRlOPRkgnS6gK0Zbu257iBdHTmeaB05Dl2
5su6Cpy6C5136Cly6c3ynG4KvRTjN11V8Obi5nR1yUhlRk9KTLaHfWVU0IXx
ofdXz1+bG5lrLj490DBRl3u8PPfikfqN4fL7R4fura5cWJ5eq0iYEOiNONLO
lwQdrfLtLnHuRR475TZc5gxmqbfQBdQJgGB77sgJ4sFSD7A3I2WekKP15jtB
PFTiDjEwUxsw3hl368KJV9eWk7wlpjoadUkBb05Pvrt26fXDm4/vXH929eqH
m1dfXD71YHnoRGVSOB9fEuG4Md2+0FuVGmi52FnUW5KQF+N2Ybb96rHW6eaY
oQqvkXKX0TKnsQo3UK3+UruxSo/JKn8wV7MNfm1plmWR0sMyU28uw43NnO/u
fX7z9uOb9+5e3bqzeeP88tqNk/OXV+bWZ0bOj7WvNOVme1uSlHaryynqKKio
Kirp6uuoqymp7PmOrqMhphFg3HfhkPIi7OdaIscrQR7dhgs9Rko8BgodhkGQ
sx2702070mzaUqxaU21gFBst9Z6sDJioQpipCV5oCD9aHtARZ1XoTe1Lsl6q
9J0scp6t8j43mHxhNOfiRP658dydH2kBm/T1/NWV+UoQHwC9XAgC9edceiEE
t45X31yuvnm8FthaBodWt13+t0lDfNrx6tvLNWQCjojRpmI1TSkGlmxQDCNk
rtsYi8Yo1lzQH5AjEjR+rWM7grOtZsjSbaFD3rjdEwHeC4uglDANYc07S81h
K9DCwkvYBAACqEKjkKIHmOC1IUUFRBSMkIz1tBQGeLo52dpTCDRDHAVPIJPJ
VLFYiseSYAT5+zffqCsqGmP0fKW8eA/rSDu+vwUzgE8MM6d3pERMlKaGSVhS
vLqFoaY906g6Pfb66tLh4CCqroavDX+/HcearW/HJ4KoykQ0NHUFnM1orhbG
bmKGvRnTVcz2tuJ7Wppa8Zg8EtGURLJm0X2ExgFSrreYBe7R1ZodG+XRUJ91
ZLzpwszwolQw3JGztbG+tTR98XjvTF1WrgPP11jbm2toYahtQcYTlPaYY9Wn
KlIfz3X1FIVS1b4hKO/FKyubEY2cWKQIe/6xruILC8dPdjaFejpKTYiWfIIN
k+rIo0MShFhZHmEbxMFag5U1M3ay5lvzyAKarpCiDU7VwRQP/ynARWAkExAc
TfH2PByKA98QBVyKs4gIuIlI7mZkNwuKqzkZGksDxHfdra7WHHqytfbuxt3Z
7pb50pxMN/sMb1mElak7h+zBo3YWpp4e6+ytypQydHBqCgIjHFdXk6WmXHk4
ZqC+ojA3paI0Z8HPcTrMK8yV7+fE9bVFHqAW7c2PcmF//bSOneejxfsLkgOR
rxSlhwoyw0UoGWFCICvSITXV8reytGcro0+vX3xx+8qdtZkT9flLTXVXpqcf
nDnz/OL5raWjawOtG6PtW8eOPJ2furXQd2ms4dpIx92VYwsDLbP50asBlksJ
bicrwsFbNhe6tBc49yDZtENznj0Y0R1gKeJLC937ij37ijwGS70hLxss9Rqt
9ANzBX4PqvONB2dHyp492rq5NunO0QmxMr11cvLt1fNPLl18fPvmvetXwAQ+
P7d6bbH/2kTtubr4dEdGUZDdyYHS6yvdB1yFtSlBS72Fcb6S7rLkrVMDi93p
Y/XBM03+Y7XuMw2e49UuR8pdJyq9pyr9jtb6LjSBSu8vCZXk+dm6MQ3DbUWr
4/1Pbmxurq1ePbd+7fwGlLdOzV1ZObo+O7p5dPBke3F7UrAzy5Cosg+jjdw1
raSiqKWtBoaEZahtYqhhSlB3M8Hlhogn64Imqz1HS1zGy7yPlLoPFjkO5jqB
XvVmO/XlOPdkO3ekQ6ro3JXl1pTiXhnrkB8mzg4S5YdaFIdJCgLNsnx4paGS
hjj7iijz6lhxS7pTU5ozDEBtyLSJZ2euF9CV591T4NtXtH+gJGCwNHCkOmy0
JnysLnKiMXKmKepo84GZpsjpxojJugNHm2LmO+IXuxKPdScv9aSs9KQud6ec
6k9fHcgATg9mrg1lnR7JPnMkF2BR8DRDXTpGg2ukAzIF5sqCpg+KYWFssIOY
gZGycAAEEiYWQKugXQCqWlBCjC7atmE4FFTZoAXeu7Mq6IbqFSpZO2JlZozl
EXTAWbGwqmCuIDbB6/KImP2OVqH+gXw2j0Sgaajr/u3bXXRjNpvFU1fTNtRW
41PwPIJesK2wOT26Oi7ooMzc1YTkxaO6c0jD5TkgGq58OlV1n4uQlRsdNtpU
cvfcqdxDURyMVoC9wFtChwRWyiHZ8vHOFlRPS6arBQU8la0JFs56J6GRiznH
xcwYtMtOSOHSDAg4FRpR1dwE4yGhQB8rnlGIr1N3R+Pt27c/fvnl3ZffX9y9
fTXE+XRN3JmxsRvL85fXxq8vjpypyx9IC+pJCijwFvuxDdzpejWH9p8frHt1
euxoRbIrVU+opbqfzwsS8nxY5EgJ93hr2Zn2+hVLU19HoSUL68LVM2fTYMiA
7NvFgoVM/XFh63QrnrE5l2FuypWaC6GDlEuz4tGteVQYIGAQcTSlOYsYdiZk
Wy4JnSqEAKroNVx7Id1RSLc3pdrzKEiLAFm/lGNU7WHzoSxyq9jv3ljX8wtX
n50/82J29FRbw1JJfluYT62P40JZ9nxT7eNzp9dG2g/ac4IkbF8TcqzMLNVN
0hYbtNpfe2VpqCcjZlRDfkjA47MMTRlGxixdEVfTUYhMMlhz9VDQSzN2fIy9
KdZBgAMFduQbOQlIzkIyCsSAgzlR5kp5UpK12VJ+f+vs3Wvr1+aP3F8YuX1q
8enlc3fPnnm9eenl6eWXxyev9TTc6Gt4OjN8Z6bj1kT9uY7y67OjfVX5YwXx
P441najMTvWUhLuZRvqIDu0XH/IwRfAVJASAWvLR33ZODhalhpqnh4uBjDCz
rAgLADxnQYx1Zrg5SGh5osNkzcFTcz3PH9882lniRJZrSw37t+f339259f7G
NUgGb19av7e2cm1udHOm48p4zamq2OYoq5mSuKX21JvLjWGOppnhsvWZquLD
vhmhLhvTLZfmGiaaoo/UhfSVew1V+PSXeo6U+wNj1QFTtf7jVb6jpQHpXoIY
G76vhD1UX/ju7pXX9649ubX56sGNZ3cu37989s6p2a3VxXsbp64cG1vprj5a
l1kY4iTQ3acjt0dfTVFTRUFx325dVSUuEWvJIoKBj3cV9hWGLnXEzjeHgosb
L98/Uuzdl+fUmeHUmiprTpbVJTiUwf83WJQAY4o7O8qJFenIAA46sw978OO9
BCiJPuYp/mZx3uiPe0A7J9mPk+THiPf6gwRvZqIPK8mXjT5JDUrgj1/R374l
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
MDaGWoccLEcT/RJchXYMQx8T42gJtys9HIzuWGaMmbGhiA7qhBVQMaYUA5Sv
Y4BP1ueR9LhGOgCboMsx0jMhGXwtXNvoijkEnjGWTTGA/QxzlQ5XZi23V5RF
7HfhM8yNyVIS3pdC8CXoW+mrM/RUMN/tExC0S0IdK8JcItxt3C3Fgw0VYnOS
KU1fwjUS0OEIYEQsopBpBMdTxAZpIqLAEYCjAR0A2JA508DCxEjIJQnZBAs2
TmZB5RJVi9IjLy2O39tYHEpzaw4yOT/Udn3syFR6dG9S2Inh0U9P766M1xcF
mXcd3t+amBhuY1ceFVAUbFkXbjpVGlTohPdh6rGNjIoOuxfFiBrS/NfHai5M
NaxPNJYm+EuZ+jASgaojl9R5ZGtTGgpyMZ2BzQz3GjsUcnNl7sb1q9Od3e3x
h0fz08oOHhirac1Nigtxss0K9o3zduCT1HQUvwlwMCmP9bc20S/YbxkkoCvu
k/teXlH+m29w8t9htdRjJJQIK2MXgZElGyeBzTFx2/dJ4pFJUQEZAL1Cb5gE
tmdKkUlOdJ5zZ6oTueV7u5uTiAo4m9H+KS7mdPQiu7uE6SM1dhdTQffcLChg
27ysGODu3MRUJwuWvZAOAyXisWkGIjpGDAMrjJvb16+hv+u2Wu4Apz/y9Za9
+0CsFLc1A6poo/w+BZTtDjtVuX/KP1Wq/4WdN/63mu3dvXfPrl3f/6CspIDu
E6pXu3fvxRuSqGTK3775Vl5eUVlZdfcPe1QVlTSVldWV5E3xeuk+siP5cavt
JWeGmi7N9J0bbhnJjS30lTYc8o1xNHUxxia72V4abn2yPFYQKoNP8qX5EamA
p6Olvd/N3ZRO5bGMrW1toqOjm1qaT5xcffrsxYMnz2/efnDp2tb6xWtXt+7e
uPPg1v3Hdx89u//kxcNnr0C+QLvefPx5W7I+vHr/GZQKFOz5G1Czd89evX30
4dfffv33q3MTx9uLL423DWYcOF0TF8E3FqnL+QppTWmhC03ZszWZhx2sHCgM
mTGlPNijPsrfg2Ms0teMMKPWhjuBY1w9deLF88eXN8/V15f7ebuwGSQVxd3q
KvvUFZXVFJQ0lFR01dX1NTX1NDQAA20NTUU5XVUljKaagYaqjroyoKWqqKEs
j/y2uZoytCP5vp4GQV8TDK2+hgI6CbBjbtFFRgZaGKyOgKCrtfcbD5nVx+sX
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
vd/t2au458/X7u3Xnv/52vuXFyqqX/OHx5bbpSC/B51cBVlWVdiH11G34DAq
QgM2e2uv9JTMlSeHWpsS1XZbc3XKU12u9SZ3Zvln+8tqYkI4ertGKtNuzk+0
l5fraalrqoK8g7b/oKWmDBKqriSnqaKABCryaspyUO4IKZRgVnU11fS0NI2w
eg5ik4QI75aKrLtX1n7+8Gy8v6Cr9OBPN+7864NPr69c3Fqa/rL19Munl882
ZleqMzb6mt5cu/j0/MmXJ2eezw2frc0pcTcNEOhXhQh8uZoUXRV/C/IBG1pP
aeTKYOH6RO3aeMPJ8ZbEUHcnC44Zm8wm6Rob6fDoeB6DYEIzRFJXOh5y1aXB
rscba5/vbb26fvHJycW1xpr/uH/z6db5axOt3UWxxSmhbZWZY62VU83lHXnx
wzVZpwaKl2tT68OcHKnqHhyDDCdBnITuydGPd2QneJp7iI3NkDlMIwCSXwGw
nQgD6BQBOj9gwTZCr4bsXB9B75YUI1L233dg7txD/vVt5F+DCB3PyGr79mYo
LU0IEo4hiCSikyZ4Kx7BGrSUDx0IUJVyDSUc3M5KUJHc2YoOpA8a8KdERAsU
QFVRQV1ZSV1ZAf6msEhfW8NARxOAP7e2ugo0qqkiqIOs/AnaorL9gvNF7c+X
KvqCJUrKKBCjINVtnYQ3aqirAmoqSE8oNdQ00RVDgGSpcGopKWGxWFeZEw6D
hUxQW1sXTqsffvhhz+4fsBj9KC9biur31XEhy23Fiw1ZR6sSxguiuhP9Yp1M
k8zZKXqYDjxnkCJsF0iP5aadHmkYzo/uKE23t7aprGm1tnQ21CNmphddu/Ps
/ou3T9993p42//Xd558RdXr/I7CjVDuqBZIFHVCxAj79/NuX3/4V+Lhtz0C6
/uXX/1o5f7f3yOzGcN9wauBCdVyZl02cgJppzVgpOni2Nm4gzivdiu2pr+mi
qbmfRawNkjUf8IizN42xYqY7sKsiveZ6un//r/97+9Er2Jln7z5CpgmquJ1y
fnjz5cOHnz+8/vR6697NuaXZssoiXz8PvilbR0dLWRm0aB8cXC1NdeSQosdW
TRP+PjAEAHDI0bEA9ODrceTr0URdSU0eMk45bXuJ96nZ+dXm/PnMoLGSg0sN
ycebcq4c6VqqK2+JDqsJ8aoOce1IDOlP8ioNlURKCSlOorKDQUwi7ttvv1XZ
p4LOIaDas3f3vh3+OimKtu/+y+trZYMqlGAd5ZBZi70sOi0+3GtlqPryZN36
UG1PSUaYs3W8u3S5Kf10U35sgJODmLdfyj9gY7xSnfL85GR68kEnJ5e//e1v
IOkwxsGxQIwofJi+/w7WvWfPrl1g3KG6ZxdahXjfLhBthe++/buepqqNiF2a
HnPv8qkfXz14cHnt2EB+a3bYl8s3X66cPd1Tudpbud7VvdZScjQvYTIpfLEg
/sW55XvXLtxYm780XL2c7VfjZWJrqBhtQbInqhvpaMjYutHOzPb8wKPt6csD
hRfmO84t9KVHB9iacVgkLFZfA/k+Pgimjoa2lhqcejg9LX0tlZHupssXl6+f
nb01MzgUf+hodvr51vreQxE5zpLO6ODx9ISbI73z9cVV0b4d8f6LBYfnGlMn
CmI64ny7Uvf7cbSiRaTDUmaEDT0/RBZsZ2JG02Ma6YJZpWF1IA0n4zQpWE00
bd/J1lkkAxZy+V5/Bw7ZgEvBmFCxPBrun4rbDjuzgsAfLX8KHXpRWLI9U7f9
pRgcipSFlTAxAATbX/oz3OFrbUSu2SFapIaYLDl50CsNFUUtVUU9TTUDbQ2s
rpahvg5OTxujo6mvpa6roQqqhV4Q3AFtQbULThBNOEO2QYUIzhtUi1A52qmC
QmqpwaY1CVgMCY81whngMXoADmtAwONAmrQ0EL1SV1fX1tYkEAx9vf1oNGN1
dU0DyIbkkeH7b998w2bRcw756e/9JszRbLI2e642fbI0Zjg7rC7S5Wx93lpD
QW9SWKQpVaarHG9pMpR7eKWzfLWzuLM8u6GhYf3CVlxclsze3cHOY/Hk+fc/
/cvjVx9evP8C+gC69OHLr59/+v3thy+ffv4d3BRUwVaBTAGgVwB4KpAsECuQ
qW3h+gXt8AHiN1/cfKKGJ1evrZ7pTA45WhRd5e8YaUGsDraaLQw5VXf4TFvW
Sn32YFrkcCrCkeSg3njfHG9JjISS7WLSnHxgsK3n0TPQqF8h/fz8y+/vwcJ9
+Azp6k+//St6FfLZ649PX3148/6nV29/vHn70YnV9ba2toSEBCsrKYlI0NPV
1tRQAXuA0dXC6Oph9fRx+gZQ6mlp66hr62nqYnQM4PijfwIA/voADFsAiJzA
2Kxn5ERd3/JAU/+tmf7J8kPTZYnzjRkbw/WPT848Wp5Bvpo32XWpr+Zcb9Vs
XmBZmPiQjJHmbX/Qwx3JQOXllb/fpbBH/h/462War/lanb6+FoOKFcgaqC64
PjCL0GhlZVWUfSj9gOfx7oqb80eGy4uj7G0TZTb1Id5BEks2gyLiGjsxcZ2J
Ppc68k51VdJZhqFhUSw275tvvkUtH+wnDJpQopMWf173+e8YnbaFD6FUwIsN
9p7sqn56Y/353c0bx8bW+gsKIlyuzc2caK1cHS55em3xzum5tlAXF33FIIpG
vZ/FlZHGy8dmz4/3rtenzCfY5FjhJPqqXnR9a7yGGYPoztfPD5NONcbNd6bP
d2WvTTaeWxhIjfaXCFg2EjMyhQADyV7EFiugZhjGaxidMyMjXl09e3ey52hq
TF9yzMsrpydq8tLNuZCSHzZjT6fFnqkvvD3beW6kYiw34nRl4nRN8mJD7khB
TEu8e5IDo/1wcF6Qh5uIFOki4ZN1NRW+B2+priSvJrcXTnZlhV0ayvLQArG2
mhI6/wkBYKCprK+hhAIxRksFnfPE66kBBH11IwMNElaLjNMGKIY6kFnTjfT/
CoOgg8I01EZh4bcvshB1uCRdE7Iej6IP8KkGpjQMAMFfY1BIZN5AVwM+qKhe
QeoHrlhHXVEftF0buRsBq6sJJVTRGxLgLNj2yeo7oC2oiH29CGJo0VBTRzVq
2zup71TR0wSrp0snG3FZNA6TzKAR6BQsjWrEZFAoZIKujhYMcDo6OmQyUSKx
CPAPgfPJAIOHMw8aIYHk81ha6gp2fIyQrGXLNCw+6NObFTGQHdKR7NeZGnym
IWe6OH604HD1Qa/KCM/R/KSlxuKrk92NifuTw71zcvPvP/sQFZXc2dYfGhwz
M78KovTi7ccvv/0bKlComwL9+Z+e6ldY+ie/gZJACzrZDn0+/Qwu6z/e/fgf
7V3DllL34sr+F29+Hq7On86NHkgPT/Pk1x6wHU0P3GjOv9hTc2W06cpo1XxZ
xFp97lJp3FBaYJa3OM7euCnGbaKp6sj4UnB43PvP//Lhy++Pnr/+8ZffQa+e
vXr76u2nV+9+ff3+t1fvfoZmAILXH35CZv5fv3v49MXm5avjkxOFhYV+fj4C
Uy6JaGigr43F6BrikOezGxEMDXEYvCESwLiwAzSi7QAWRxwdnl+7+2Xs8ruR
4cXVgdal1oKhnPiJqozNqd57y9N3F0euDzdf6Cg921wwW5K8WJed4C6IcjSp
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
RGCl1p5vyc++vYLuQz4DUzENG+LYk41Nua3afrqy9ebhi1frTzYKjuWdOZqT
vO+gs50LOH9XB7cwdz8XPdO8xCMOJia6Aq63o4OntbWHiyubTov28+u6Whbr
HSiR6nM5LEuBMCsqON3XuyD5YGbS/iAHmxOh4WkR+/h8voOtm5HU2NXO7eLZ
S88ebbx4+QZ49fT9h7/v0ffu1ZuvZ4tK4MAnUXnycV2+FI4IBhOMGwvEYAgE
Aj35kWJgrSu1AGqB3dKRmkI6M7NytXHyc/GKsHf2MzSxZfH0S8tbAFbdg3JM
dffMd/UvtvYBLmYH5p809M6lnSw+fqrs/IWbRRdvVtcN1jSNNLRPdQ0utXbN
dfXfae+Y8faNprMllrZuQEJDEwe5ldIzgaAKFa5AH/Y6vkCXyxHJ/QNXZGho
AckUDmd4iSMwLLhcsfxks20YYNVe1dgFxqm8tr25d7ylb+JGS09FU1dNax+o
uKrx/LWbgCyIh8AraNPVNw74AtQMza/2TSwMziz2zy7XD84aZbV6npowurxg
mtxCkUXtoNj8TvTTcUu+efJYS17ameTM8NPdrnlzNPeUnUjmLmmwXXBGYXld
V//w4vJ6Zf1A3pWK8oaO+rax/tGFpdVnBVeKGSKWOlpFWWOvjkQ3M+uUv09M
oH+MmYmjqYmNpYWdro6RoYG5/OavAkMBT5/HhU8qHwPXk8qMZRamJpYmJnYA
MT09U4nEGLIejytmMfngoABQChMFRguQBf4KqMVm8QV8XXi7SCgFgd2CLw2a
AbtwGDxSC6WF0IZScQktJA1AloFQkpEUOz3UuDrdc6//xkpb1sg5j4ow/jEX
BmDhcrJjqIzurIOWkvC+BqTGVM/WDO/mTP++8we6Cg+dDLX21MFG2otrzqc+
XRpeGW9e6rlelRlcc8ytNcer/JDF+SjDhdZTy7dHF+4uDbaV3jh3aGV2/NXr
T8/evtt49fHp87en8i9a27nbO3kHhsTY2HtI9M3pVBpsuUBgAEbRSEe4ONg4
fP10XXb01STPs9F2pcneZUe8Sw973kgPgg1ozNvfeC5xsedGbUkRg0Ll8PXI
TF3w5MbG1rD/uLj7uXv4yocaHNzOXCqJjj9IZ7PkE5AwSgy2JpmuQqDsZXFR
27ZEm0xRg0OeQkXgCSpggxW8AtSgMKqQv7appQGeZ9vSqFPoGiwmgkqXs0IN
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
gSyOwAi8nL2jn71jgKWtp6m1u76RBZZAB0yBvdc3soIoyuTo0pgiObIYAvBX
WijygaTj/WPz4KPahmcaukYuV9QDrMA1QVlS3QTO6vSl0pzCi+fLKvMulgC+
ukZmO4ZmgFegW31Tdd0jTZ3Dk/MPJhYfDS88GppfG73zaG5upXFi5VTj04KO
h+e6nhX1fyvuX7/R+yKu+SM5sZtuHKzimy9O60kqbU4qmUyteZDe+5dNcinX
wrfsZm/3wJ3Rubs1TR03bnZmF+SnZOafyLt24VpDYck1PWMDAwMjEp4BaQ4Y
hdTGKe1FKO1Vl98EQGmnppYyAoEgEAh0OhN8F3gwgIyhgblUYmxkZGlh4eDk
5OPiEmBh5szj6JOJYDJZwCuAlWL2AhhOKIFX2xW5JLoyRR5ULAeJhRIBTwyB
mkSg4rEEEBaNQyMxBnxmY8Wpobrs0bJDk1cjewq9l7rPPZrrv9NS2H0141Ki
9Qk30aV4WxMiMsSIVhQk6zgTc6fp3FTt6ZHKnOW2q90XU6oyQxdbz612XV7o
PD/TUTjdeDI3UPfmEZfxa0nT9VlTg9dnG862FiUN99Y/e/dhY/NLS31rZJg/
GEWkNnbPbvkd+IHVv/228+eff965c+eevcrqyioYNdXS01mrk92gx3NjD2cn
NpZmZrsbR5uuLw80zXfdWhpqWZ0derY8m300TcSXQH+HI3HBbULy1dE3Yesa
s3gG0O1yeWIKncPWkbn4Rbn7R4fuS9qXnBuXeupoTlHP8PTSympZeXFcbJCd
tVTOlu1rENhcLZEORixBC8TafBECch+HrQmxEUouR5vHRUIJpOJxtKBCpmiq
qu1RUt5FIqFEQqxIqA4hEVYF4nDRPD7YAKTiCmXF+BKTrQm8gpLJRih45ewh
SzwSXlV/dWZx7N7a/Tura4v3n91dfQm+aPs/eZFHM0UoW159PHfn3s36qvzC
PG9fj+DQoNLrFQMj47fvPXj5/tPWH3+8/Pj57dc/P33759sP3z5++efXP//H
+0//2Pz2b+++/bv81sEfvsr15du7P//a/PZNMb8anm59+gJ0+vzHP77+8Y+P
gKw//vz65z/fv/n81x//fLH5Dmj28eNf+yMPVBeczknYX5J5vLvkykRNBYS4
WxfPHUs8yGEztZE4GpHKgZ1a43ctpKa5kfEBTy8cUtPLwqShIL86L9PFWBru
41GQfjTAzNzBwNzb3tlcTxri5lqem1ubf7Y6/9yppMNXU1PCbKyz4uPOHjuW
HBNvINBjEzklBWVf/+OfLz58vPPwqYm1M5sttbZwZjGFympaQCqFuWIyhRDB
xGJDkchAPuSuYy2VWBvLHCys5ONLhib2EA/1jRwMTJ119c31jc2BJPYOIbfq
xnsG73YPLvROPBiceTQ4+bBndLlnYmXo9uOpB5sTD170T6+2Di609y/2jz+A
V3tHVzr6lpo7b4O/ijuQzWHry2Q2Zlau3oH7rRz8rO18+TpSPIWBJ9Fh/zMy
sZZbLJ6Ex9ODyAzBEE+gamjhLoFnah+6XtfVM7FcWd9xraYFnFV9z+iNll6o
w4v5F4uP5xcUllaeuXz9RmM3pL/W/kkAWm37IFT6JhZvtvQNTC2NzK1MLD4c
vX1/ePbe2J0XPXMrFf3zhS1PCns/XBp9VTq6fnPsXW7Pc52jk8crFxKanh5v
Xb3Y9OBiw2J213pOx8OEG+tatocOpZ651dI/vrre2z4Im5GVfy4pIyv28NHU
nPzDmbm554pwJCoajUUgtJBItCYCpaGujULisBgiEAyHJfF48pEo+HRikYGx
kY2u2FhHJLOxcnV19Xd29rW1dTc0tIBQDA2gGY8jhLp8HI+nAwJzBeBSsAtK
HeG/BIzSgZAIDbhiPkcsnzsq1oOoJeBwmVQKHo2ik0kmujolpxLlYGnMmuq8
vDbXeXewcrHtzHTJ4cYM2bUkm9rCZBcB2wmjfcKZUZ7mMVOacbuvdGag5V53
5cCVyJaLybf72jbuDz4Zb55uKLzbnDdTmdh+xn+84lBfaVLf9Yz2q4du5kc1
XD482Fpy9874i1cvw/fF2ju7MRg0MJZqKuidv8uRtWvX7yQSBYcl792h4ubg
lZl7sqm94cnDhbWF0dXJ3pd3J5/NTd4b6V29Pby6NLN6b/n+vQfLiwttjbWA
YhZbQKFwIP2x+XpcoQFHbMjVgb3FgMXSAWRpowk8ocTVK8DGwdPe2c/eM9TM
ztPOPcDezS8jJ//Zq3dj0wvtPUP5Z7LDI/1kxgL5KTaOFpulxOUo6eoghMAo
jpbCU22HQSSfg+YwUUIhQiBCgYnSRikDr7B4DbEugcmR+yvAlEAkl1CMhdjI
YKhQqbvBuclXy4M0t5NE/01HDxse7XqpJLt9sHN8fnppbWVp7cHi6oM7D1cB
WfMrD8DnKAbAFbxS4OvRs5dbW2+ePN+YvbdcUF6ac7mwrO7mpdLi6pqbLa0N
vX2dPT1dfb3do6Ojw8PDfQP9I2OjkyMTg4OD/cNDI7NTk7dnJ6Ymp8cn5sen
5manx8dHhydGBqfGWwd7rzfXlTXWVXe21Xe1tXV1LiwsTExMtHd3zczfriwr
P550pKog93RyfFX+ybqzea0X8gsSYzLjo1Jiwi2MDTU1kFQM/v8j662j2trW
/t9uKa4JmgRLQoQkBAvu7hSHQoFS6tSBAm0pLVDcJVjQEMPdvUApUrxUqOzd
bjv7nPO+7+/eO8b97z4r2bu/8xu34+kaKyFAWJnz83y/cz1zThuKgSVVH6up
EertnxEfR9TDuprQr5/x6Sh8mn3rClUXU5WdVZeVFePpF+DoEurj62lt/ejy
1ZrMR8NNTZzCgran2bcjQ6PcnNn5+TcTk2Lh1MY10C14ZXvr+KefqzmtZjYu
SUk3zU1slBTRWByyPjAE8IpqxGQyrQBW4LkIBBo8qatHhEBQZmRKFxeR0o3t
mOZODDNrc0s7kOKmZu71jYP8nqW+0bXBmW1wfNPLR2AMB2e3xpb3Z7fez+9+
HF/eF42t8voWRUMrQ1NbQK3+0Y1O4TzoqyvXHlPILCcnH1tHH5+gmDMRSYEh
cTQTSzLdDE9mQJMDYe/g7ANCC29oLL6bT9TU1AO51dLV39TZJxye7xqcZbcJ
qzm8Zt5A58Bks3Cork1Y3tiWXViW9iSvoLohp7QORBcASjA0A7yC4+D0CtBp
aGYVODa7tgsog+PM6g7Iv9FVRGKxR95XTfxat/ileeFT8+Tn8qkT96zZlJad
3NEPhWMn1cPvG0bfl83/lj/+7mnfO+8HPMuw2w2dvb3Tc4vrBx09o0WV7OTU
zHNXki/cTDl/7dbj/CK0JkZNTQODwcFRQx0DsJJM9COTaCZMC+i88HeBjwNS
kYhMFyffs1EX/H3DvbxCAVa2tu40mjlkFsm9P1ARoJ3gnE4zlaisb0NYCLuM
kQDVAQYQSMUEslGZDJoJhUQj40n6WD2ivoE+DmsMEo1mZEk3yroRs9ZX/ry3
+Hi173Cl7+VwzULbfXZqSPeTyCn2jVgXuoWa7EWWXvP1AGF+4uFg0/pkx8r0
4Mvhzvmu7PXJtk/7G++3xvZHCua5GfyKy3P8vIPZlgVecV1afOXNs2mxdqV3
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
Yup1srWJPE7N3Nkm+f6d+qqqXj5/anRopL+nT8Qf6use6O8Guz3S29Un7Bwd
6q0tLsq9fbfsVspgZc2DmNjHCedKb92qvJ9+NzzyflR4ZnRYgov9vQjgUrA5
0wSL0SJpqpzzdWORyZ72tg9uJGZfvxLpZp/o75IU6FZ871ZV1qMgJycvG0t2
ztOS9IwwUFY+Z+gko2C/AC87h/x7qV2VVX0N9bWPMoruJJel3ukoLRlu66h6
mpd86VJlZaW3fxDoK8kSJVpaGCVlVZSqBkZbF29AEldNE7AYfThCj6DTbCxZ
blaW7oAUoBZgDeAmKystL68IsNLTJYI7oxoZa2GJHt7RfUMbLbzpzu4F0cCq
aPB5C29SOLLaObDYN7c9trgPVhH50tBa7+hLOHZ1L7d2zbZ0TZhZuoJkQm5n
Y3S0cQY4HbymBhaku7qWnoaGLhZLIBBoQFHoksBG8FCyCqpXb6eDuAJZ1NU/
2djZU9fKq2ritggGAUEgruo6e4BdFU3txTUNtx88upWZVd7YBryCF4BnBF7x
B6fgleAKgVRwBBsIPwoINrm8NbIIouvF2Nz6+PPN3ucHbXOfaqe+lI+/LRz/
rWDkjUP2uO+joYaFf5QMH9Qv/NwyfdI+96Fk+mtJ37tnwyd2qV22kfe7+sZ7
R1aBhNUc3r2HOW5+gSYWVtBT4IqhVMAGYogEip6egXgvAhXAPvxdTGNLBwcP
CDs7D3B/Tk5+f0/PcbGzdbWydAQbCAG8YrEczMxsQTzQaSZw/bFw3cTF7RQy
3YhqLJmYY/h3EPEIrIh6BAhDUBUGhnh9gp6OvoEOjkrUx6EVgjzsx4T1c4Pt
G9Pdh4vCtd6i4arLouyIdG/9uiueqcFMKyWZZ9H287W3Vng1z4ca92an1qZ7
376Y2Vvs3Xw++G535dV0x2DD/Y/rI9zHoTmJNk+veIhq0/l1D0c7ixvybqwN
N70+WBwQNVaV5VhZscytHd1AYcVc8A0KtbUDP2ptwnClUllSMqdP/XCKaGiV
lFjY1N7/oLje1D0kMelB4T121vnyq+eKHXzuGdt7lHEHH9Tx/eKSA8NjLJAZ
AHaW7l6Q1IgUcwNDY6aZnYOzl429C+RZDFZfGa2B1oSGjdbS1iVTGNBu9Q0M
ISMjM8VRmqZmVoA7LXCmlvZT8yvgyFZ39tb3D4Ee+ycfDz9+Pvjwae/9B8DI
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
7/B93znPuT/cv+COuabN12ffcy/P+6yuLqtWVa0155hjvPMNJ49u2XRqZ8OR
7fWD7Yf2rqs+VF+zu6a6KD0hI9qV5HGmeV0RBq1DKXNqSbARRioEGmaov38g
RmyY1bk6tyDDG7OhpKS+onJdQeGO9etzklIAO+nR0biveWlpq7Kz66uqclKS
Vy5L31m7uTg7a0Pp6qSIqOWpy7SMtlLKVWatcW1+fmVhQbjFVJKTvb16Q3VB
8cay8ihn2JKlflikcMSsIQolKDgoIBCjXalUM0rfqVXbZFKtSCiHYONwWDQe
ni+QALXA8OOTlsUlZkZ4k8DhVXorqewn04pEuqqNrQ/f/3727meP3n+dW1yj
1NqMJgsmDp/L+z1d2qDX4fxE8NJgBjzQakyEdAlEJHhVIMJCCbzyC/DnCwVr
a7cDr072DgGvwK8oXuE4fIE4r4BX0Iln+keAV+BX8emZUAqJact2HTgEvDrc
2dM7Oge8Yko3jMNOnx8ZnrlE8QonwQmBV417D+WvXluxsZbZVRycuHhz6tLt
oUt3hhce1/Q9O3rzm+bZzwuO3R146y+H5z7YNPhOYfez1SOftV75vuvu64nn
v3Q9+rF+/nNJ9XkfoXPn3hMTF26VlqwKDMAawCGdn5itK+pyp/EMTBhJEIgB
reZH9mQ5PArghFCJFdRtpWASAMn+rwNXKWIRryhS4Ui98eBRPA6Xcqo/4hU+
DZKaxw7avK5k0+qsgzvWfPxwdl9NXpQ7zKI3R0cmOmxe4lwKiwCbwh3BmkIc
/lqT3e6Ry/Umsz0lJS0+LmbjmpzUOJtezopxmSpLcsKt6txl8RmJHtjRg3vl
YgmXI2RqqJIkPvwiUGi+QASKZXG40jPzneGx0JiBoRxndkn5tt6teyZmbj4d
mJubv3+lpm1P/tpjVfXtMSnFkIFRUaTUqs0WabK79M4wV1SKwxPviUtLzcxN
Ss0kjW/Y/CVLA3z9gqEHNVo9i8OmwWyUuGLACIRi/BPgiKIToYs2Fx7guKgH
gWa0IZTb7Roc6n306PqdOxdv37r25MmzBw9ePH/+4bN3PwRSffDplx99/tWf
vvj647+9/OSr72CgTzQUATgDeMH/0oAE6i1fpFUUhf6PRjGKnmERrxYxjeIV
DMSJIhXJtbk4/r9h1++YRmxmEGB1++rUUP+J8oocs02s1IQabSKTQWwxSc16
iUFDmBXBKzUXYpA2AjNb5SodQSqZhgfZKFSy9u/ec2/h4vSZk6eatw11nGiq
3VxZkLeuMK97b8v2ylVxTnOU05Qe540Os1pVMphRKgVb5bFoWBQJdVNKFMuS
09cVFK8vLKorr1geHV28LGNTaSlwxmt3JEV6spOTirKWA6nK8/PWlBSlJcZt
rF6Tk5aSk5JaVVyW4IkxGy1k7nP4KokCfCw3I00jl2QkxK1ftWrTqtVVRSUZ
cfHQgOByS3yXUgJAInYCIEkDMH0wTYwGpqao0YmRDASTSIiPBWSA9Atg8YQi
OePoSExKzYlOWe6JScIYkIqUAr7cbIsdnntw4/nL/rHrJkccyDxxW3FYmA4k
EFRjpxGnrjCSIsc0UreBywn40kWfPx3zWC5B+NVaTc3O1mPd/R19I8Cr/skF
4Ax0HJQg8Apoc3ZoAlKxo3fwVHf/rr0HopPTwE4TUjO2tu5uPnKy/ez582Pz
feMXoCXBrABWp3qGRueujMxfwRlg0IPnhqfaDh8vrKjevKMZPG3Ttl1HTvcs
3Ho0eenOzOVrZ2/9hTShePv/qhj8tGX87abJD+qnPmuY/+vxB7/2Pfpx7tmP
c+//q/Xqt6ln35asavfhmwtWbxyevVFVVeW7FAQ2kMMWMDwqlMIURS2KV3R2
w/DD6a4WDDIZQGQyWIFFUibsP8Id5Q73gi3zuSIBTwwQo1HuOFKnwaLzCkhF
/VcUu0JCWLihBq2iYWNFfrq3t33X1dGO7v1bHTbi28TNNRjCwJYNRit1kamV
JOwt0hOr0eCOk9qzUdHxySkZK5bHe1wGXqi/XiMPd1hdYQ78tOKigsQ4z/L0
FJwNKMfEw3CZG02y5aHlce8USjVkHfBKptTxJBJ7dnJx3ZHK+s7mwwP1rccO
dp1NLV4Vtbwmq2RdVHKW25sUE5Xq9aRER2XEpa6ISc2KT8vJyi/LWllsD49i
cQGA+DUknwljD1gKfuXrT3Za8RQuJigrPlQokqg1hkW8AkwRvGL6lRgMDq3W
qtPZ8MBqJQV17c7YA4ePP3r29PrtW289fPL8vT+/eO/T9z7+EtLvg8/+Qu2j
L778+KtvPvv21RevvqPZ0JRNUYRZRK3/L7z6Nzb1b3j1b68BBP0BryYoXt1Y
mKCoRR8z3vVJareujN+9NTPYd7y8LMvukJH20A6JyS62miWALJjZKDUZJEAq
xvhMi1WRySaXqznEwaXkChRcXJXLs5d7jrbv27KuobyoOCvT7QzDNXKbjW1V
5dvLSzwGNcffRy7iOS0Gt9VkVMoMMrlDbwgKxGgmehCjTiNTFGfltm2pbanZ
vDY/r7qwIC89NTcttXA5ST9IiI5Mi4tZkZ66bnVpUU5WaWGeVimL8rrdDmuS
Nyou3J0Wm6BRqUHRWSFs4FUk5JbVpNMqszLSV2Ysy01Lz0xIzExMos4rzB0c
McjBf6gDBN+DjAoB1ns9BjZ5N+i00UxjzkkYJ08UEsoLZfGlMjUGQ1hUbGJa
FhZHi5kEsgaECCvWNz396IfSihqmqoONy+VD4JBwR5UBAIjzYEG3mB007Iom
NZPkQbGUxjZQNxcmHCa82WKrb9kHvKJ6EABFlOCl2+MXbw7OXQW/Al5BD7Z3
ngO/2tayG3oQcwd4tbmxqenwCbwReHVuZPbsyFTX4ERH7zDwCvxq9ALJJaQZ
0L2jM4c7zq2v37G1eU/roWNZhaWFFevH5q+OzVzvnxgeufNh/6N/HnvyP9OP
Pdoy/OdDV7/efeXbozdfjj7/ef69ny+8948Dl/+28szzqJPPQ+PXJuRWbm06
2Dk4X71uQ4D/kqW+YDnBNG2QIhWN0aX+K1IMC/pFrjSbrTYbuRpqlZ6EpenM
YE3Uu263ubyRsXq9EeyBw+LTQq80GQdHwqKhoHn8xc1BClbUcB8BYlIRNzUu
fODM4a3VhZkx9oFT+5iii0AnC+avSq2XSuWgcBq1mWxNyjWkEIRMDQUHNRfm
jjLZnFaT2mrSAqNEQtLcBzQbfw6HwxWOoS+lXkeySSRiYlFEcpArZocyEGIB
eGixR4TyRBXr1mWuX5NfszNrTU1e1bbVNSejMqrSSyrzN9TFpeeERyd6YxKT
k7EO56akFWbmlAKpVhaVRnjjOHyJz1J/IJVILNfpDCYTYUeu8EjwK+Lh/J2v
kksaGiISSzVaUjJ3kV8RimUlG6A4wpxOL9PEJAp4Bea/rqb28dvPb967/eT9
d9755ON3Pv3Tu5999NEXf4X0++RvX3/29bdQf199/+O3P/3y+te//5szioo4
yMA/uqf+j0BEijz8bv/GrxZfADC8PD955QKBo+sXJ4FXOAKgbl4iR/oAdv3y
9H/blbHBvqOVFVkWq9hkFoa5VaTRoU1gsUqZNq9is0WGo8ksNVskWh1pDK03
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
mR8aGqbTgbUkxydkpqQkRnrTYmIz4uLzM7LaGnbWlpZKhRBHwVa9MdgvCBQL
fEMpINVDgC1REW6VRALEC1i6BLNbJpOwg4OIEhTwwaOII53DlYjEarVaxONC
GAYEBZK8Zj5XLhZBWpqsOolM6JLz8sQyfJMlAcH+gX5isVAqUrK5nJBQNrQA
aBXTIDUcYt/linZgZXTFOMNjXZ4ETzQppPbGEpfHJGcDtaLi0uMSMzAwMJJJ
CKLTA1mBxdpkDQfKYXgYDA6VyrSY50t97zS1mbAsAZOnwydR32zGdwyUTlq2
Avzq8OnzxAc1cZEWVQBeAbXOjsxA1g2Mz3f2Dh063QU9uLWlDUJMztR8zile
vevQcVJcdHQGsAZQArnqGpyAQQMCrABZYFnnxwizAkZRigVkG5m/Qvranx9u
3ddWsnlXZV3r9Wt3usZv7r3+Q/XElw3DL1KPPBOsH6weenf2nR+Hnv9j1cBn
PpFrzpzonb5+f+zSbXzDrPxVSemZQSTI1p/RZW/qBpDMwSACwhqt3mS2YopB
DGIyYkoSwAnhsll8YIg73GuzhgFeGPFFCioSgsFEW0ESMpWvNGBW4FfAK1yn
30kajxaCoEwDJwdI4o4DoZhimwTB6KUmxRLfaHA51VbEYRgYDIAymrAqmR1O
rIqRbI4AuIpzvqlCJhBA0jKyKxhwp1bpZXImG0KppfwK5IpLmlYy4b4cDj4R
XwC/Qq5QBbG4AqlSE5HVcODsxy9/27r3iCsxMzYzLzEjVyTVANiXgG76+5EC
VkysGr4PzVQiTUnkNCPJQGk5SQxn0uEpXjGYRrxYgcwf+Y1iBY1vx7gl6UW0
TbnNhWG5GIsFI7UaDA6rLazr3Nn7D26SOpxXxudnB6Ynzy9c7L10sffywvmr
l/uvXx28dWPkzq2xu7fHH96//PDR1SdPbzx7dvvZizvP37n/zvuP3vvwycef
fPDnTz/4+LMPP/38z5/+9ROg31++/utfvvny61ff/+3b11/87Zu/fPUt1OJn
X34De/Xj3z/7+tu/fffD+59+/tfXr17/9uunX375xddfAwkZB/sUhSyKVzDg
1e1rF69fnbp7a+rpWzN/ef/GJy8uH2pb57IJdEaeJ9qanb9sR1tD70jn+Fxf
78CpE6cOHDrUlJkVZzBJzDap1SE1WIUmu9AaJtGbpVqjWGMQSTR8mFTOGTrb
MdB+JMJpC9NrK7KyOne1bC1aVZ6+bHNJSfmKFcWJyeBXYiZKJpgT4ue3FFcc
/Ao3q7Rk1Zriks0Va5JcEcXLs0tW5B3cvX9fdVVd5Wq9XAJMw+DwWerjE+S7
dIkPyfsLCoAAtJtNXIxyDksiFkLx4bFSIaMznc/j0LBnUCwQQDzGQoTxAJEV
EuyPfzE5MPBVMQZpqVDKxyBkcf1DCeUD85IrFRh10AKADpAirFB2uycigtQy
ohYemRgRleyJToNFRKVGxGRExKZ74jIiY1KBaUYjIdsY86QWbkSM1eEhYGVz
uyJioSJtTG6jXmchfRCYujG0ljsxCVk0sVhj5IcyYeFLA4JXlla2Hu44cPIc
9CDwim7qjV+8OTB1CfwKWAS86hma2Hu8A3pw++69npgEDG9XZExuWWVL+ymi
9UZnYIQ7DU6AXOFI3jV5gYIVQTMmk5oakGp84frYxWvAriNHD28/0p2cv+b0
qY6LNx7tHHs3/+yLzcPvefZeOHDx19EHv52680Fx7x3Vqi7Lsh0Hes9fvv9i
+srdjt7h+LSszBV5ZFs/OJBs+zIbWJhKBEDYXODVmrXVYB0+Pj6YmHTPKyIi
EpwqLjYpIz0rzBkBDkPitZmyfqRwNGiVzkzDRKEHKb8CZMFI2BXJQyQlXBin
NI+JnQgmiQG4qyyOUqnElcRnge1w3/wRBssmko1LfYxM/kIweI7eZMfRGebB
ag2ajW+OYUPxCiensguvZLYXdQpiWvBwHEnTNyCMSILfRcGKikHgCVY9v0CW
TG1MWd/e1ntt8OrT1pM9CdmFyVkrg9k8v6W+YP6Acb8AX39/XxrmQZBKKKO4
hHFCDZCFYUO6osgUFGZpOREaf0XBCr8Rz9OQUar+tDoTjb/CwHM4IhfNSQr9
eoC3e/e19vaeOLCvYXykY6j/RG9Xe+/ZHec6t509VX/25BZY16nanlNbGNt6
/vS2vtM7ejuJ9XQ29p4hLSSGzu0ZPr9vtP/QxFD79Nip+akzC7PdF+fPXV4Y
uzg//Ozx7YX5sfPnO2+RLqV3Hty//ezdJy/ef9Y/cn7h2oWbb10/3X1qcm78
4bP7V+dHFwNEcbx9ZRpGdgavzj5869K1hb7LU8f/8s7837++f2H0QO5ya2Zm
wumOYzdvXLt39y0cb926ce3atfkLCzNTfRfmhg4e2rEsM9IeJrU5JdYwMczi
wIIkkqs5YjVHrhcp1YL2tqamqrU2q1HGDt23ceOZhh3HNm0pjIm3KpUuuy0z
KgrXSMQlzhlA1pIlPtDkEj7HZ8lSu9WWEOHZU1e/bW3Vlsq12enL7FbHpsKV
hzZsqs7JFnFDA4N8ZWQ/hBssIMV1fZcsDfQPwHg1Gkh5h9DAAJUMpIUHwAEi
0echwyAWggODtBIpJCeV+RBZrNBAk1VjCtOqrapYs7yKKzUHsaHCgjghBP14
Ygw5KYaERCEUyQRCqUSqohWEQK7C3HHhngR3ZCJxXkUmhkXEO91xbm8K6a4b
lRwZnUJ7Fkd641zhXnt4FADKE5VIKrZZXFarGySNhL64o8G+DHor00fsTe4h
cafISI0aDG/MdDrg+RJ51ZYG4NX+E90d58eoGARYgWIBr/pnLgMcOntHzvaN
tBw+trmxqXZXc2RsIs7pjoorWrt+78mzYE3nR2Z6RiY7B0YgBgFWVBWCcYFf
UdQanFlYhKz+qQtk63CebDue6+vfduB0/traoqKi3sHRwzPPVhy50bTwauLR
50Pv/N9bZr9xrO8MyGrmFbSlljf2zS5cvfd8ZPZqQ8v+mJT07JUFIKjMhnsA
nU2MOOIArMJc7k01dUuWkkRyEvDA1EtUKFS02Y3F7MA0ZNDGH0AkIbWcFLQF
mAbiWqbGUSaRg1zRGn1MJQ0WXkka4IrFMpmMsjVS1IUBJfA36kqiTi2GhuBr
hZBoP2azjxqIkN5CqgYBskhzSakKL8BbgBlUD+LktB4OYWJv6p6ZaWE0SEKM
EwpWKrUWowwoFOBHPgvvVWj0AaFcndXlKT9cfXB09Oa7+zr60nOLffxJ0cJA
Xx/qYGfIZBCuCS2XTQt0L+pWxuGmoVXCaJDeYsU2Gn/FgNVSnIq4vCSEYjEk
yg6Fa7FHYFjiaHNGwohrzh6BZdRuj8Y3b9y17ezZI/v21t66MXXv7sVbN2YX
Zs/NT5yZGj452ndkuGf/QNeegc6Wvo6m/tP1sL6OuvNAsBObu49t6mHszKFq
2Gli688c2Xi2fVPX0ZruY5vPHK8d7m3Z3VS6riIlJlJeWZoy3HdwaODI7j1b
a+sqPZGmoqLMqnXFHq8lMyt+VVnOwvQgzcShCThAKuDVrctTsLvXJ7pPbe85
tuH9O90vP5y+OXNgZ236roaqy9MjN6anZ3r7h0+f7TzS3tK4q3FnS9epUzPj
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
+39+6/a9mdHzx/e3724d6u6dHJmeGZ8d7h841NrWtq2hsW6L3WbxxERWlK9q
bqhvra/ftKYiJtoTFR1Ru2HDlbHJ8f0t+zdWH9tU11ZRXbkyt27FyjJPdJhJ
r5XLdQoF5iSPEKEgZudFSJwbwWyJQCjnsFLCbAe2bvHaLEFL/YiHi0VWHK1a
o5YrRDw+UZGcUPAgX7Y/bin+XyIWmq2GEFag3aKXYqn0X4qPcJqtJp2eKL/Q
IIfdHOcl6XuR7hguS0w4GNsnId6kNwi0GrnKJI4ySCpYvJ1LJCYOb2loCGCO
z+MANGjgIrPlrV00pYp0JNDpLTQYjyaTAqbAnQh2Wd20ThHdTKS7MLSUBx44
nBHh7igcyQv0VpJdy9QBpg9od2lwBsbfTiJqOOxgTHZPXErDnvbd7Z1Hzw6c
HZyi/iuAFQ1pmFy41T9xcWj2EnDm+Lm+1kPH6ne1xCalGcyO5MzcTTuaDnf2
gFMNjM/3js6c7h/GYxosClUIWgXIokVmoBa7BscYAjZxfmy6f2J2aPrCyOzC
BIOKnUNTe44cLSwuyspf1dp1YcPJW5kdT2Nbb0TsuZhy6C37kbs7Ti/cefbO
2I0XU5eutx0+npKdV1RenVdcBipMpk/gm9ACWvPK4/Gkp6fjtpJgA14oU9ad
RaKtcD3NDsxuRoUFUB8OqUCuMiz2JZRLFWBWNIaNoVjMDgWbw+RNE2Sj/Vhp
8x38LVniS109gYFvdgypD41UyWCCGTCdZZBaUhWHKyIOH5fXSPb9XRy2AIBJ
vxiWKg6XL2Y2zWkCV1BwqFJrUGqMpJSQisSags9owbZMFp8lPlhllviDOpIC
XL5LAoQCGc5LOgSF+Icnpa7asCs9f0sg1xAcxOMG+gkC/cUBwXQPFMyKQPcb
lyYdeBoKWfga+AgGEglfMhgMQFem+2oohVCKVwEk7JmEjgDHrLYwYJEByzXj
tiKKwOnF6qkB9jvcpBFGdLzZHmm0erNX5o2On9rTsubezblnjx4+fPzgyYvn
z9995+33P3hOui+/8/T5s0dPHt9/eO/u3ct37ly6eXMO2HXp8tiFi4MXLvbD
Ls32L8z0XZw+f2Gqd36yB4YH5H/n+tNT3Dvqyq9fHFxdmFq4IrmidEVxfmb9
ltJdO6p6uw+eO7u/p+vA8MDR2YnOyZETL3/4+Zd//evVD9+/fP3tx598+OCt
mzcuz431ny0qTo/zaouyHTs2JO9vyjlztOLewtGPHw9//OL6y4+e/fTRe988
vv/2wvRk14kz7QDMkYGBoaHh0UtXLo+NDvd3d0+NjAz1nR+CEN2/p6mutm3r
1oPNTdWVFfkrctaVlvUeOjp2uOVAWemJzXXResOOsrLW0vKSuPh4pwPEGpeY
FRTIIS08SKE8GiGDGarTaNPjYyWhwSo+N2Spj5jU4ia7M7iJ4MsCDpcFUAsl
65EvqTfjB1ThBQZhgFotJrWK1J1MdLly0lI8dmt0mCva7cEAwKJqs5rtJr1I
zNOqdZASvj4+q0pStm7NV2uDrXaVziqNNUnWsviNS6VmfFwwi9IyHldEK7Qz
kEVaeTJdpUhkAoUsWrnxv7O0mNg8GE1+xws0WkCilWbE42U0/3QxWZ5u9IBW
YY2mR+p7hx4kMUI8AelvEkIGXkxKeuPBky2HTh3rGuwenjk/foGGNIBojZKG
gzd6RmbBiw52dO85dmrH7gNbduyKjE00WcNSs/I2bt+F54FOw1MEms5PzFDP
FbCL1kOmxlR0HwdewfAA2AW8Gpyah43MzB/t6tuwoy27sMTjjUzNzG05Pb7l
9OWinveS992IaJ7LPvN29N757ksvbj9+Z/Qiqfu3saFxecGq0rUbl+Xk+Qcw
NRn8/Knbh0ZGmc1mhUIBdsEEM3CBKqBDtK4OdNybQhmMG4c4rqQqQPpiCQtc
H0AW0w6VcNHFGsi/hyuELnYK+317zo92eGQaIb3Js8aow/2lBEmjNeKe0iro
xNtjDbfYw7U6UyDxtAdCA5I4K7UeiCgktanZNIosOISl0hlVTJMsjAS+gKQY
O5wujEsOj4tBG0o8aiTMHnxSIJRBl4mEfINafqCtuuP43tjYeF8/YF4QlxfC
4bF9g0Kpjx38DVSQMm2KV2+CiplnAFYisRzfDSaRSOgPpA52Gt7GkKw3D/CT
SZMUtZ4EYlnDQP7pnuCiEqQsyx0Zb7FFucIjjx1vatxWcm1+6PG92zdvXbp1
++q9+7ceP7n/9OljGB68df/2zTtXnz195+mTt588eQZQu3fv3p07d27evH79
+tVrJJVvZtFuXpu7dX3+zs2LCwtTiYmekqLM7s5DOZlxG9YVX5gbmgZtHz59
cX7gxbNbTx5df/ro1pP7t+5cX7g0N/Gnb75577NPv3z58quvvrp59cqdG1c/
+ej92Znx+ORwjYodbpdEu+UxkdLkeNW5jm2vPrv7/efvvf7w2dcPb/350tQ7
c8Nz507u27m9tbEFGrCxcceeg3trG7Zu27ZjYmT02aPHXac7lyXGmxRKp94Q
G+62G81J3pi1ecXtW5smj+/uKC8/Xb81PzXlVO3WUzV18VarS6EyQjFKpVBw
vr5LGG8GSdOD0scxLCwsIy0dqMVi0AkGyCLRhv4BwCeQK0ANRiZZJ1mheq1O
yOYaZarkyBi70QjOpuALEt2emsryuLCwVG/0soRkqEXcO7vVppBIhSKuOzxM
DObC9W1trVq7LtVoCbU6pBaHPNEsq2Jxd/lIrBwGr3hCHotUbl+M8GQiGP83
vKJNeWi9WT1TUttodEL00eAWPC9XEJ8GxjCtmUYL/jOxOiYKXFA9ep2Z5vbC
qMudfJZMwWcCeEiJgWB/rMkpy7Lbjpw+1NF74tzw6b5xUKzB6ctAKhL/OTR9
bnjm7MAkhNvp/tEzg6NHz/Q07z8UhbvriVlRtHpr617wK+JgH5rq7Bs90dMP
ckXxCnqQbhFSyAJMgVnBKHDhSB8cOnVyc2PLitI1adn5qWkZBavK954ebDk3
u2boz6t6n+V0PMvr/9Pqoxf6rj++ePP+6NTc6fND2UVly/KK12yswzf3Zzb4
AFgUK8B/NBpNYmIi3bCjUVWkLINcCcWnUmlYLA4NuKIhBFQKgVyBWbnCPGQr
XyyjzXGop52CFanZzohBGrTEZ+IAgC00RhQnB9lgtgsD6OzGR4A8a0hYr4Hi
lVSmJjWvnBE6ow14BfwB0L1JzpKpMOtZbK5AKMbJ/4hXatxBDXm7WAKsC8Nd
A16RmBkOCdpnkSwk8gRfLINOxEod47RurUwbO3d459YtWK+lEgGXz/IPDQ0U
SCi5ov2+3/TSlWkYeyMJSUa8WI4PwqDC0KIZ+rRVCt3LeFNPJvhNajnOA90t
lSnw/SEMmaFoo1qACkMGtdw2u9PhisE/Ne5YV7kq+ejerSBFN66PXFkYvn55
4sa1aRJSfufS/fvXHj26+fjxjSdPnz9+8gyGB0+fvXj2/G0c8fjJ0wcwwNqj
x/cePLx77/5tanffurGraVtsrHv9+rKenuPXbsw8fHz92q3Z52/fe+v+1ctX
ZrvOdjQ3NZaWlCUnpnkjYu/eu3Pj+uXJ/r5z7Uemz/c+uX3z3p3rk1MjpRUr
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
jEWt5Sv1QrGKpdHzctI9C0Mdd0eG7/R3vjt++sX5/QNbinevTGxckVS3PP5w
atzuFVlROn1cTOLmLQ2XF67cv3KlY29LadbypNgoMAihXI5bvCJt2eCpzoqc
FYdKVh7dsPZBz8Dh9Zsz42MbikuT1IYQVrCWZFgRBxFWMDBnQBZoM7Qe1kuX
1eqwOQP8IQ9DJXxx6FJfi0JRmpcLShbhcGxetw5jix3KgrYALoG64+JjgU6M
jl6VvcJrdxDZyGJ7Ha68jGVFmVkRFivkJJUVdmuYQWWJcnsjXBbglcUsDHer
waysToXdoUgyydaz+Xv8VeFCWUAohzT3JP5bAW3dQiN//js+itm8piE31DBc
6ZhXqqha1NHdInw9DONF4kTT4qgRyFKqyWLKGAmGZEo0YIWleIUF0d9vqVzC
VyokK3Lz9hwmwe3Qg4Cszv4JgNXYBdIqAtjV2QfhNn1mcLyjbwR6kHRzPnbS
G5cEvCqpXL99z4GDHd3Qg+BXp8+PdA0TMUj7pZKYq6mLtH0qk1Q4AbCieAWK
BWYFvIK6bD9z9mTP+TMDb57vGR47cPzkrt27NxyajNwzY2i6krRj5PKNd4av
XBm8fDNjecGy/EKA1YaG7Zu3N4Z5osCvALxcDouGcQKLKFjRSn0EZPgkeFvM
9M6jDi5CrQXEuQQ8cToiorzx7nAvVgrcEbKFx/ivcKRdvYBXtOYVU+eBTyEL
94zWJQawYKgwwVdkRlOfP9WbuC+0yRFuFpPYrqGNJg1GM7CIOLhIdQ62RCrX
GMwCiZyMCGYT5E3xFsbfriI3ndxuHx8/Ngf0TixXkBRCEnUWRHqH+zPRUNCD
erMNAGvR6e6++8HDP/1p5/79SwNDaM4jG99aSdqZ0UWNsqk3eabMl6Tfk6hC
Zqsan4hxRTx+zBCiMRs0apSCEnOh2CRrgAxLLKlGPMBFoGcmHeVwbfUWhyPS
6020WO1SOUmWTE2N3ra5uDwvoWCZe1dDbsP6ZXVr0zdXpG0qT4dtKEutLkup
KkusLIgDoJXnxZTnxcFWr4wvy41blROTnxFWsMxVmBkOwwP8L7XC7Ii0BFPd
xuKOk/sa6jaFh7lApawmZ1RUEimP7wyrqiw9tL9lsK/z4MHm9GVx/RtX96wr
Ol2Re6A4fVt2bFGMtWxZ7Mk92/e21sdEWlRqrlovUOm4Jr2gpiTn7vC5e0ND
X9yc//Ri792TO/s2FXSvWTG8ufh0WVpXXsa2lLgwhSzC4y1aVTHU23d5aKC3
beeajIzkyAiTySCWy8A789OXDx47UZSSsjM7Y8fyrMm9R1Ylp20oKl6Tnhlt
hEoSgfYoRCIsuMGhQcFs1lI/XyxDeCO+isdqS/JGhZstLpM5Iy4+3uWuzM3f
VbsF47WyqHjl8uVspk4IbZSJi89jsleykhJXxCdsLC61avQBgcEWvTk9LrEw
MyfS7hByybKLuWDQGXmhgshwV1JCeHycxemQGE0Cm1NhtEosVnmCQbKBI9oX
qAkXy/1D2CE8krhH87YWs0oXc2doMj4JbGCAi2IXA1mkiy59/HsCLGm5SwfJ
oh+MGuFUTDQ7ca4yRuMDaWcrile4RA6rwW425BcUtR44eqijt+P8GACKikFQ
LBiJapi+PDJ7lYZ6Ds8tAFKOnemOS063OtxQcNCDpHj74ET3wMSpniHgFa3f
vigJqf8K/Kp3dIoqQerIAsXq7BsG48K7gIGd/YO945Pnp+cGpueb9x/auKV+
x94zqg0dQZWntx1dWLj64P6L57nVlZFR6fnllVsam2Bra2plap3PEh8Oh2W1
kEZmWq3WZrN5vV6aGgO9Ru8OjOaSMKSLS2u8GPRWuy3cExET4Y4Gy6LpLVDH
ACsgFe32xYSM8ii/WhSDi/yKqawVhPuo0ehoD1yKV8CiRbyiIACwEorkFK8A
UDSeFNiIk6jUWrXexBcRvIKkol9ykV9BD+L1pF4QH1xeQJiYWA55GMri+QYH
YzkO8PcFYgFejBaXUKI0ma0VDdsHLlyIXZYuUpCiHHIMY5HUn8uRSd8U41pk
U5R7U2cCpfc0qxpDTiCU4kvSohbML36TmLOYTojLiPfSGBun02uzRZhNdguk
rs5MeRoNfrbZw5PTsi32OIPFnZWTvL9t49rC1FSvcev6rKYtK7etz65dk7G5
IqMGkLU6bWNZ8qbVKetL0xjLWLcqvbokbW1RyprC5MqCpDUFcbC1hfE4VubH
VuTFUMtfHndk347uzvb8vBx8UZvdmZySAXM4wgBWGckJrTvqjh9sbT/Ysn/P
rl2NDV3rCg8XpW+Kt25Jc9XlxJQlhpWnx2wqyF5bmpcU7XTYlDqjQGvg65Xs
yuUpeyrKhlpb3p8dvNHRPLJ91Vxj1Uzd6pnakqlNOaPrijaneHViLkinxmg9
1LrnWn/P6J6dOwoLvXq9XCwAQ9VK5KuzVgwfP7mluGRDasLe5XkHKtZH2RyZ
TnesRh9uNyfEYLGMMGk0wSSa2D8wNASoYDIYTRpdXFiEx2ytXbNm54YNNWVl
VQUFrVvq1+YVH2hsPNLWWpSdk5GUxGeTLiQCHtH7eq0J05zPZq1ftSo/Nn77
6sooG2mmibsc542tLFqVHBUNmk3TNEKDWWKeyB1mXb4sKi7WYDZx9Qae3iyC
GUzSOJ1kHVu4N0jjEkmXABFJdGMws5P1phUC7YxDMYd6LxcpFtBpkV8xwpAY
1QgY6hqtHu9aLMvwR+yiRYBpTQZq9H/JYOMIQOMx1BNiI70RzsKikqbdB8Gv
QK7ODk4Br2jIKI0a7Z8A5ix0DU/2jM0MzV4EQQK/CvNEuyNjC1dXbdnV2nTw
2PGu/o5zQyfPAXPe7Az2jc/RqFFKt5iMwjeeqzP9Iz0jk8MzF4emLwDEOs9P
7D/a2X76bM/YRMfQ6J4TZ3IKy2LiU7bW7/Q0DbPWnerounrv0bstrY3hKVH5
heuqaut27t1fs6OxYHWF3mKPT0yIjIywWY1Wq1Wv11uZP1rQCWjAhKNLcX2Z
bTtfPAl4wSWCRqE+dihBm9WFZ2isplarpq2cAVZYgwBcNAaP6kGAFRPZLqXN
YqjnGdcTeEXlEu0ySfGKdtYGFOBuSqQqLk8MsAJpDyVhq37U94X5BR0HXOJL
FPgQclN+Lz5P/VcavSWEaeCLhQlYxGRRSYFXWHF8mPyakAD/YP8AsUhhsLp4
UrXO5owr3hKeWZJeWEHCowRqNV+tEJJfBLwCWGk1Jqa7t5q6EXBc3D4m3U8Y
3k4D6TEsdToDfhpdVengYWoTkUqPQYEsCG0axuB2x0dEJEFW40riqgK4tDoT
ToLRazTZvLFpKwrXZ+YU5xakbd1cVJGXkh5travK2d1Q0rSlcPuG3G3rVzSs
y6lbu7yuIr22ImVDZer6ipR15cngWmtWxVNbW5pQXZQKqypMWVuQvCY/qWJl
ArWOIwf3tTY5bHaoH7srIj4lHaPC7nYXFq2s37Jh2+Z1B5q3te/ZdebYkYmh
oTs3bk5s2lCfGp/jNK50GaujXTuXJdVkpWTFufNTEjeWl63IXe5NiHR6TQaz
yKjk5SVGDe/Zfq//zFzzzqNluf0tVeObC6dWZ082VfRVp9QkZsWYXToVT2sJ
33x0dvS936be+WHn0JPETcdleoeG9AKX12+snzvXXV1SUZ+etK+8Ys2y/Eib
R6nQaTQaXKYVMXHp0dEqqcjXzwe3HYLfpDFEhUdGR8Qkhnlz4tOy41KLUrPr
y9fnxaduKamoWlHY13Fyy9qq2MgYsEceKf4jNaiNRnAYmRZjyTcwQKszWPTW
NYVlK1PT7Vq1yxaul6lrytfGhbtJBRB2KDgYhCEWPrPJkBjnSU1LyC4pMIQ7
jE6dwSgUaCWpan4dm703SCcXSn18fSU8AcmKDiUtL0lBJK4ICEN1HJMpo5ER
EaGjW4T0SLzuOsvvHdXNmAsUpjB+/rjJSBk+9VbRmleLBJ4eMSv5LCYdjMvz
C/CNjwxzaiRJifF1rQdbD3cArMCsYFCC1HlFbHYBCHOyd4iGeh48eaZxz35C
9l2RRWuq1m5t2HX4KPFEdZ4/0T1wZoCQKwAU8GoxJYeyLLA1nIH6sto7e3uH
Jwcn5qYXrvdPXegcGMNpj53tPXCyY1tL28pVZanZKyo31Kc1jSbWnp65dGN4
6oI7OSczr3Bj7dZtu3ZvrG3IWlmQnZ+flZcXG5e0rromPSVbZ1BDetjtHoPR
hlvP45PCCgxYsWmQA9OTgg0Si2toMtrDw2Ld4TEOuxuShy46lH/S2FpSf1gq
x4Vi0gA5TCTAm5JQ1J9DN/Jo5i9uHOORDmJiVv2ZGqFykDeAg9Xm0huswCul
xhjuiVNqzIwzPiCI6ewGHoLVB4sRj0ntYTzDgbS8PyBRDawQSABieAF+lAig
yhUR+Q/GRbyzTEBUgD8UBL42uI1QpjGHe3M2N2bVbEsrKBfxVXqFAVKRKxQp
xdJFaKJ5N0z/MibfR6s3Gs0gpyByCqWa+O1JrpaE9PC1uhnXmYTuDeFCkVWP
cevhIgBIuTyRxR5uD/O6vUlxcWmxsenh4Ql2e7TVHq0zhMtVZvxeoHRCcmZc
UuqyjJTN64riXPLkSFVjXdHx7Xm7m8sb6lc1Vmc3bcyuqc+t2ZS1e3Vy7drk
XVtWbCxPWl+etrEyo646c8PqxPWlcVvWZJXlx1WVpm5Ynbym0Fua66lYldbW
UrujoUUgVvlxeFKjMX3FyoTE5KhI75rV5fXV5Xsatx8+eOT80MS9Jx99+Pmr
z/7204+//q9nx/eeKs/fGO+qS/M0Z8duTQmvjLYWeq1ri4t2N7fsaG6r3rq1
cE1pckZihMuSnRI/2lR3p/vInfbmzrLs+mURzZlRXSXZR8uz26syDy7PaEzJ
WJcRGxnr0a47Wv/of8796R9Fb/3Nt/ue6OR8sDPKoTWePnJituv8wZXFLfm5
bWUV+2u2xYdFq2UqtUoBOmsQSsJNRjGP7ee3NJT04GXJRZjAGoVMbdNYYsKi
UqKSVqRkri9dszwudVVWfl5qVlNdfcPGTWatfllKhl5r4HGEoNBykUKr0BOn
KFEDvGC/EK8tItHt4fgtBV5Fh3nKcgtcRpOIx8UqBwkHcOFzRTKBYHla8tb6
2q6Boa1tbRUbq/IKs5YV5BZEWmtD2LuFNqPehHWT6WHHXyyMRqNGKViRBvRM
sycFU/iI4hWNUqAFr+gmIK1QRN4olVOYeuOz+oODnRYHoJBFWRZtM8HsEbAD
SZOEpTaT0qQWR8V4qxp27G7vJNELTJlQGs8AI/k4E7NHz5w/cqb3YEd3W/up
o2d6ugaGvXFJZpsrt3R1RW1d46H2wx1dJ7sGTp8fAV4txl8BqYamF0ZmL9ON
QprmDLDq6B0m/es7e/YeOXnweGdn3ygDbpPtnee2795bs21HyZoqDLyisoro
dYcrDw0/ePqidM0ab1rWmk2btzc3F6wq98QnRSYkbWrYXlBa6rNkqclkKgZH
LCsg3d7tnghPDJPrFwoixArlv6nYEBAAkMHPx5y1WpxhTk+4i+RXAvwZPzwb
R9AJClZ0IpONVKZrIfWD0QpaiynMbCYFCIiBuwDdxNSrCQxgwiqARyRLgsUP
DeH+P3R9B1hbV7a1ML2oASogCYE6qCIJEL333pvovffeMcWAwQZjmhvG4N5L
7NhpTu8zmbzJJC95k5nJ/PNmMi+TxHHckon/fe6xGf/vvZ/vfPoEKkj3nrvO
WvvsvTZc1KiFn6k505knV2upDswnTbGIehYgMzg/nEiHQ0kCuMoGRB4OxVvZ
UYHzoGwoFhfwCiWuuCLfZiJtE7mpA15Z2ViDasN45aEzBBvLo8pq/BMymI6w
vEnJdEeARRadge0XsETdDpZiz1Ls1AdLLiDVtnEoHEmQe9hiFJuncbkusD4C
XmE3b2Qx7cAABgWA7CaSC4VyrdYvMDA6JCQhMDjexy9crfWVq7xgPsMtXyiJ
jY3u76xNj/PNTPTrbDIOtOR3NKb1NKT3VSW3lsY01EQ11yR2lGfUFkc2lMXV
lCQ0VqaX5MKlGgTisdoYBqqwsjC+KDuiODO4MNmQEaMtMyY0N8KVy5d5SONT
kxsamka6B6qM5fExyen5haNz02duXj9y4XzfzMy+ja3XfvPbX//+j+998u8n
htp25qf3pcdPFGd2poXl6EVpnoLCAF1XS8vOsV1tAxNVnQO1HT2N7e0FRcac
3IyhgvT19qrLPdVHm4u6siIbQ/27I8O6shOmSwrmi3N7I/yaY/08g4P59SsJ
Z77a+f6Xxc/9H9HMG0nP/U1S2BEeGnVm8fDWwsrOxoIUlXKxo3drbjFc7+PK
ZrrApUmjOZDpLo4MOyvUj4ZMLI7ODA6PzUfG5sT1DncAjhRSJeo1L9f66Q2L
M3tjQ8KdafTp4aHEyHCytQ08YYeJZUJkgsJDaW5pAaeJbEXxU/uUZuW5Mh05
TlwPkSw+JEIlljg60GEtBKEKdJTvxOPYM6ICQ6or646fubS8cXLx0Mbu+cWd
s3MNuSl1FGYFS+rs4ka1odjZw9R32AarJzKQ6GFKpzEwXuGUUd7T9GbEsriC
Z8EKvZZAoWdj9dsDUSx4hIhZYWKA6RZCLRrVlmxjagXHx8pbp4qKigiPiY/P
zAK8AqTaS7SNwHiF650XDqwDHQJmBd9o175VgKaJ2X1B4dEiqSImLQPwCvgV
sKNde4jM9v2HcZgdWdAc2sRsCmdhrW6cwvuGMAYmZrpHJlp7hoxlNUWV9c1d
A5Nzi+OzezuGRiqbW3LLyqNT0+LjY33Sq2eOXx+ZGIX1K6OoJLukOCQqLDAy
Ojw+KTY1o7S2AXAMUIHlTFeqBUWluRlZqaFhEZ5abxxggYNpZ+uwnTIEhwvU
DWg0ECxyD7VSoXXli+CYY1ACHJNJFe4yJQ7vwCUMxwp3PXt2EP1tqZhf4fZh
8F/gIONgPmrFa2VlYmIC/xDkHeqEhbq3oSICrgvPTSzaYWFORKgILxd7Jq5n
AUwg7F7JOCAG5AqH8ZGNjIubzF2J/GdchERanQw+MLH9CKBmQTA11AACPi0g
LZ3JVXj5xVc2hZdWJZZWsVh8DpNLpttbkyk8FgcHqfCKhvejcZootr5Be8eo
gtWFz5eKxUq5XKfRGOQKT0BUIHh4Y4gw03bGoQaiSOdJDhueyUKJHNWFSVVA
I318gmEA3KFEQWB9MiU8Ghsb29/dVJgTl5USUmRMLCvL7W0rnhisARBrbiyp
r00vK4zLz0gqyAjPTQtJTwiID/cO9JbEhWoaSpMKUv2To3wSI7wSwvWZcYas
aH1pZmR/e01Hc23TROeh9dUzhw5ND44mZeUooyOCS4rb9i2MHT4yvbGx9fyN
tz/93X/87T//euf7bx8++P6nn5/fPLLU27M5uvPG2sp4Y2WEVhIsE2R4e/c0
NYyOjnUNT9Z1DNW29AwMjvb09TZ3tAx3tq92ts6X5oyUpvSXpi+UFk9lZzWk
R/UnpdbHRzT7u6fpFbYRJfr976Zf+DTqwuspFz5vufHJzKd322591DU+d27+
yGhD6+6JxkSNvi4t68jMbLy/v8qVJ3PlgSgDkSVw4tpTqGbmlnCmkC0by4Xr
hPrFgNBGe6zuiKW7S5QSoYfCQx3kG1xeUN5QWhnl7zve3VqcmaqTuwPFYjB4
EX5hgYYAIleHyrJ3knCEJVl5Uh6XTqWBoEsIj/JSewL3srGz5XK5Ok+t1l3h
xuF5KjSpqbnHT19bPnrm4PGLaycuHD15cbyzqcNJFMfgW9EcHKwoVg5kGoVO
pThsp4ziZhBwH01+Ng/rQYxXT/cE3XCEAStB7KWGuRMWhvgdtjd9EFsjgu3Y
xRdH9Z/yK4oNhWpqZcZk0IpLygZ3LWSXN/gEhzb37pzadxDrwX2Hji8c3MKq
ENAG9TbdPA1/BI4EdAjwKiw6HvAK5RXU1LYMjfaNTU3PrwIo7VndWICXw2sP
n4Axv3Zsz8rRxUPHD26dX14/gctzQGBO7t0PuAevKq5pzMgtSsnMLampB5nZ
MzLW2j9Q1dKamJ0T5Odf0jK4fulWanpKTHxEVEqqH2BrXFROaVlWcWlDZ19z
d19UQpxPoK68LtdYEpdflNQ72FxeVRwZHcblOqMkOktrOMjYLhiOAFxubm5C
TDBQabNEBgcQe0DBHwmwUgncpHgjFRYpnLWOOeo2Wd3eKcPJEpi2Ee9jt92q
FWi5NZEiha50RzYRFHIGrQonBCV7oqxLW0T2iIcAr+CWsHul4DfBGRcMJlsk
A1jVAV1EbMdDJVdoaHQGkWVK1KlbEpnnFshQHbnliNwdnfgqn4CowlqvjNzA
rDw2T8hmoswHJ2cui8bCyRXb1c1Pkme4yDcG7xvCZBMIUCGqRKJRKFBlDdA5
wj+EiXMbMFg9CZCynLABNWA9m+nk6uLG5YsIK243qYcagE4skcMii2wOGch8
Xuvl523wSU6IDg/We+tlWq0sITGmqraspLzAWJJfVF2RXpgTmxQT6KdTSJwD
vRU+Og8Oi0K32aGWcouzY2IDlUIOTcx3kIucfT0lTRW5Jw8vXjyzdenShbOr
h+bGxrMrS8T58VYFUazmvLipwZGtY7fe/dWXX//j7sOf79+///Ojn36CO/d+
+vmnxyf27R4uL5msqDy3Z3Z1tDcjzOAr4MYr1ZWZic3VFS0d3c1tvUXGirLC
0sbGxp7Rod6dC9VNPfnGwrpiY1dO+p6qorX2muWmsr21JXMV6f0x/hyhH6nh
mMOxTyMvf578wlejr/ww9Oafht7/y+orXw7WDZ6YWV6dnt/cPTrT2hnr7VeR
BepTmhDk7++pRlafjmyFUOLEYCLZxXJ2duK78kRuLlKZVC0WKYQCD4VcJxMr
lB6eGrlWIVUF+YbsGpzob+kI02lainPr8zNykxI4DCd7KtOg9JJLPJhMdI0L
eKIQ72B/rQ9oe5Grm0rmkRIdp1WpUXoPlcLj8TQKpZDvAihkaUX2MgSfPHtt
+fBx1Ir97NUDm+cmulpbXGQ+bJ4FzZ5NdrCzRw602Iwd4xUM7JfrQBRB41xo
HLki9gQxv/oXXuH1DvsD4HUf9XgiEAwnMCNjW2JbELtiYq+5JySBQrWm2Fva
2jnY01o7R4YXzyUWtbkrPGva+kdmFkESYrzCXAu5uBM1yysbZ3BdIdrvW1tP
zshxcZNEJqcCXrWNjAHyTO1dwUGqpSMnAbJgLK+fWjt2FlALIGv3/sPjc/sB
snbNL43O7J1aWO4aHq/r6IKRV1QWEZsYEBppCAmH9bGiqbl9cKi8sUmr9l49
dLy+Y9AvKDg6JlwXGBySmF5WU1NQU1PR1NLY3VvV1JJXbMwvSe8Zqd25u6mr
v6J/pLZ7oKatq0YidXN0tMeudCC+UIydibps4IQi3B8HdfGj0mEQ+e0ecg+N
WOSBSiwJUsrj8bGhCt5axRWCOBsERwJxPQ4hCW0In+QnUANIYmpqDm8L1ALO
I9o4Eyt5POS7Ym1DMbfAmGaLcgMYTsCsAK9AhcF0JaDOGsfE0O4baqkqE3to
4NonGiW7u/DdkBkFYYBDUDkiN9UCvSV8L4A2JxeR0ts/MqvSMzGnefde/7AY
1EvRAdm8851dMTnHYVLMr/BAISwgb64S+IRKpZdS6QNgpVYTBrZ8EbFVjXAe
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
3BzCQx6TebxRiJc/+MqAV9jKA/uxE9VeAqI0VQi4hBLpiX0KTKuQnwOHD8wQ
cyeemwjYlE8AXA0RIRHJhoBIkVRFg8PFcILvhUy0+GIOsXkE63hoaLhU6Mqm
2wJk0SnWznBrbRkoY+ws9KyKdBUyaTKJ1FfvqpC6ObPsGY7I2pXY57XT6VXl
FQWH1w+89s5bG+fPZ1VWKCOCggtzSmcnShfnvRqr9ly59Id/fP/L48ePHv7y
86N//vP+w8f3f7r76MGdnx7948Gj9z77YveBjYLGjszKhvz6tvWq4uODnS8f
W3n//Obt1fnzOwcGio0hngolTwp8RqLzD0vOycyvq2+d7t57dvL8B02vfF5z
+we/s3+yKZ/wC4peqS+6vTG3NNYblJjBa1h32fpP2vpvQQxaHvmQVLNgqq0m
lWw5H/0069x7fU3jy51TYyO9Az3NvYUdl45uVJZUAFVwYLukxKd5ShSojx/d
XsZ1sbezg3VFp/PSeeoNngYfjcFL48MjCvGIxACUDyASSAWuYj+D/1BDw56B
geqsrPGW5trMjHajMc3gXxabEGYIkYikJuZmIplcIlZynQQob1YqjYCrRKc3
KD095WoQgLBWAmOODgo16NQ2VtZcZ35MYOipxfmrq3tn2uvnh3uWjp3aW19f
7CEjA8O1pljY2LLNrc3IKH1lO6UBZzUQxiZuOMC+XZWDWRbcwVcTDgITZAnl
xMDPth58NiyMN3Rw4AVfYts9YhxotiQbWzsa1XIHKb24pXDqalBBP7D8nNI6
wCvQgygngWjOBXoWUGvjzOWjp68A6RqbQ9lZu+ZRqWBeUQXgVVhCUpKxoLa7
b2x2Yd/aBsjG4xefP3Hx+dNXXjh77SW4PXX5Foyt89fXT10+cf7q2Mz84PhM
c89gbXtneWNzSX1jQXVtXnlFXmk54BWM2KTU6IRk/+Aw38CQnfvWgwO8fIP8
IjOyM/PSy+prCuraa+vrCqvq49MzoxNjPfVyvpujzIOr0gpDIrySM0LiU3yz
8iNUWhE6OnSWlaUdzHlML3H+Oeo06swFtoA7LMBKB5MB4xWwLD7fjQC3J3iF
7DftHbFURxc7kda7/W54fxAXWRMCzRz3+AJZZ2NNQV2k3Vx5sFS64fJzmZWN
tZk5ycoa5YDByx2RTSja+IPrGmDB1Mxiu98rIB7PxRUElLvGW6hAjZJhAtDo
DCBXltYWgHiofN/CAtQE6nZhDq+0xPErFlegDwwb6T3WN7UZaawFvGLZO9kD
fBBJxXinBr7Ik7a52OsGCUPAK3eALKJSVQIfCfExBgu0KmAsqoMA2KfQ8GsB
r9D7sLlAnyxsyA5srqd3gMYnWOcXIVf7yxQ+YhnyalNr9CBgmQx4iRNMbGuY
6lRHmcxD7SHls+15TBqHae/Gorg40JlUS5q9mSPHkcuVeCrcE6OVQX6eLhxH
FGSl2HF4zjl5mTNzkzduXX7x1Zda+/t8oqOjjHk7Nw6Onz8eO9jt2VT78ttv
3f/p53v3Hjx69PMPd+/9+NNP3927+8PD+/d+fPTHP//t1MUb9Z3D2SV1xTWt
ZbXNxRU1B5rKT3S2vLG69OHFrbeP7bs1NTxZVGTw8HDksWVuOg+pxstD5WxI
kTUsdp799643/t7y+l963v5b3NnPLLpWaQJDQ0rmyanJ/ORg66qZwOMfR1/9
L+W5L+RXP2G1r5N0bc5Zh833fGBx6mvG6LGGju7903vnu/dXVLecXlweHtmp
1PjK3X38vAISYqKdUCNLKolChltbazuRiyDCPyRA7R3vF1aUkJYdEZcakZgS
npAalRTg6aOTqaL9QpNDonNjUsa72pcXdqdEhg8Ul++qrqtOTzFGh03WVtbk
FEpgKbFnKOQajVrPZnIYDggDY4Ij4sMilSKxBCVXseB0ODEc40OD1RqtlZmJ
xNklVhe8PDpyYX12Z0tZRULyyGDHfENLmm8g3ZkBE5JlQaHbUm3sHbEY3O4H
wWbxgGzzuAIMUE9g6mktMwxcRA//ESMP1n0ODv/qBLo9tinWk60flINEx7mp
RNqMBd2RDIu1iQk5MCQ2Kj46IjxUyBJHJeeM7t4/Nr86f2Bzdf304gEUM187
cfHQiYsgDAHEkNY7srVw6NjM0sGK5k6Vp8FYXFPf1je5dxVg6uTlF84+98rl
F968cOPl89dfgtvjF54DpAKsA4W4tnHu+VffqWvvA7DaObunpae/urnVWFGe
WViQmVcAejApOyuntKSsqaljeAz+19zS0am9S4kZeak5hRn5JfHpWXFpmRnG
IhjGkoqouMS4+EQvbw2Pb892smU7UyVSgUYrDQ3zi44Jd3V1xU21iMJcW1zh
gqNGONgCRxuWCbiagFRIkFEYYlYCgQgkD9aMT7yCn+A8FcepQPShvo0EC8I/
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
UrlHprF0fuVwVWP7zum9u/bu6x+bHNu9p7KxJSUjm+cmUGnkfYMN1fWphWXh
5TXx9a1Z1XU5qRnhOi8Puj0ZR3iwnTsQG9y/GEtjvIUK9/GOKfxgxQdHisfj
iURIFWJyhTdh4QdbxzxtW4PC6bh3AwwANLhsgZ7BMzGaofXLiYPbtaOm867I
EMYGdVm1sX1SLEomcqL4HBcxsg7mi+wQrzMDfoWNSQGaAAHEMk+eq5SNgkWo
8xr8kUy0ucdJ9ejbmZqZm1lTFTKyQspjg5Tls1yl7mr/wPTijKrx3Wu39yxe
lko9Oc5sBBccJY4t4BUQx0idOa5E2owbfEjggdt9xnGjQ2BKdHsWABQAL64q
ImyZuUQQnom9iTBeEenrCrG7XijVyuR6oFtehkClxgsVIjFd2ERUFqU30By0
Pv5F1Q0J2QVBMal632CVzlekUAMbc+BxeRJxZHx8S0fn0bMnf/XmOzdvvlAw
2MFPj8oZ6Nx/+WLX6oqkNCu5v+Pyq68+/vGXxz/+8/s7d+/88+HdR/fuP3p8
7+Evf/n7t7/94k8HNs8YK5tySusLatuKqluKa5rjM/Ilaj1P6h6elNI9NrZ8
7FhsckF8VOJsR9tiTVmNr1eqWilgMeC6QM4XXIlIpKEGZginns948W7OtT/k
Pv9V+aX/43/t927H/oPUeYUU0GDmW2EmLyepcqk+reZpu0iFaybFm+bFJ6xz
jtllHbUq2bIr2TBpOkuq3CRlrnhUrxbnVSeGaVL8vUO9Azw5LjI3maU10xE0
GcXc2s5cwhAD2bazsfWSK8ozMrvLK2EMNDR3VTfUZOUBuWovr8iMjjYmJI62
tk20tzcbC46M7GwoMkaFBtWXlfOdOIAjPA63v64lJiKS44S8c7ksTkZsYkdl
TWt5WbBem58QXZWT3lVbrle40yhIZLEdGamx0SE6P2+BSC0WyWSSyviI10Y6
jpVlt6bGVeamV8Ul8eyZlnR7W5jdFAcbCqr5B0a9jVdENY3r/8SrZ3OScZ4e
NrDCmZ8Es7L/n/Gr7SgWzmHAG2S4Kz1MeGRwamVuY2dJsrFwsrU62VZ3frhN
LUStGUB2gSQcm18FvNp/8Pgi4dcHkHXoxEUiQnXr5JXn189cgjG7ctjTPzA2
I6u2o2t6/+rBE2eOnb8K1Oj0pVunLj53eOvM0qFjgDYTs/t6RsYqGprj07PC
45N8Q6LyS6s7B1A+w+jM3ul9K7v3r8FSC+Lx+MUXTl2+feTEZXihsbRU5C4O
CI89fu5KWW1zU2f/wtoheJ/sotKc4rLMnCIXgAIBv7m1oro+M7cgLDEdhdnj
k/yz82L9A7V2ZLSJhjUgIeKoOC0BDgXO63iao07Gwagn4SCiNRf8AFgB+wLU
glsiimWPyRVONiACUBS8RYj3dgEBUC2MAwNTL3gUhfSJPhHESURmZbZE2y+s
KGGpAvxBOXV8CeAVQIcN6paF+JU1YbnA5vJ13sFSD8IInS8EMWiPLDXoZCLO
jz3qke3nDlNzCxuaSkHTKJ1ZCK8YLkKlZ0B0Yf3o8tWlrQ9LaqcAPfguKO3M
xcUD26y5Eo1NQfrhohu+wB1X0OMyRtyFB1Mvok+rQOau0ul9VWo9booKHxvW
c2BfMCdh9tpYU9w91L4B4QEhsZGxmVFxmZExqX6BESKpwp7hTAP5wIR/KSPs
KdjYVwSwztTMmmRiYW5tTzKzMbe2oTrShBJeRlb84uKul1+89MY7709tHPY1
ZiXUVEwdPdq0MBfUUq1vrZi6dfk//3H38YPHd+/cv/PLz49+/uned3eAXf39
u3tffPW3tz78ZGjXnpTc0tL6jurWvoKqlqLict/AECaH7xUUPrm4duPdD59/
/zdX3v5AqQkNDAhrNOattLYMZmWHqz3lYimXxaOzUXTOhcW38UsRzNzKuf5N
weXPqm7+uei1/8h4+Y/aI5+at5+18W2iGFqt0hdJw5esxt8iTb5u0fcKvetl
Ut/zpL7nqD3XLZvO2jVesC07Q6o+Si46taPjObeqKSehkm0jVAUlaSUeThwm
VSBh27GFFFsaHZi52MaW6kB3NKjUmZFR9bn54x3dc6MTRVm51cbisuz8nqbm
+NCw0qycxtLyzurqemPBWn//RFd7c3WFMSWlID0jJSUpNzOjq7x6sLs70Nfg
6sKXugmrC4smu/t29fdHB/pnx0Y1FOe115Rple5kWzvg+fYUamxosJfEPdbL
Oyk4jG5L9ZdKlmvLC3XKMJUmMTo+KzIRPhLwPxsrJAORLy2Z/ixePcuvtvXg
kxwGIscPl3o9SWVn/mtv/b/h1bP7gNuohZUjvkhREjWNbmWJmv2SbGytTU2H
y4q6i/JsbZAPeU5Bya59y8Oz++eWji4fOrVy9DRqIr+6gdMbTly6uXXxuVNX
b7749ofdO6dU3gZAodr2zt7xyeGZPaMzC+0DY8VVTXlFZalZecER0V5+gSqd
t1Lrpdb7SBVqL7+gkMhYwB/Aq5beob6xmZmlgyADgbmdvPzC5Rfe3Lrw/IHN
c93DOyPi4lQ6tVxrWDxwFPRgXknVwPiuqfnFkJj40NiE8KhEJEzY7LqG0obm
goyc0IhYXUCIWiZ3jk8M1ukVZuYkzIVwwch2e2XcR8/66Q8OmGM7LKLLvA3O
VMeptrh76bPPx2bIOFUeHVJiowTOnULuCXgFZ5No0oe4HLKNcnKBM8h9YobM
xykBmMjR6VTQd+ghN5mbSA4IgPHKyoIAInMzvkCq9PQTStToHbguz+LV06pq
jFcm1mSKKYttL0FhJYGrmOHsEpuSU9Y5llDc3TBw2De6hC/RwGRxc0O+2Qiv
eG5EPA11jce9t4imgahYBv6pM0/AcuYDo+O4IF9TeMhDqdd6BcDw8NBiiAMQ
dgQiwuFjvALEBkDz8QsNi0oOCIrz8gmHVzEJ8xxcigivojmA6HYhsl4lQoE0
JDAiPCQ6KT4jOa0kLaMkK7OgIL9waLD/ytUL733w9suvv5Q52BlcmDu4e8/C
0U3f+jJmRVr90eV/+90Xj+89/vb+o68fPPjpp3/+fO/RvXsPfnz489+//vbz
P//90PFzOSW16QWVZfUdQKuMZXVJmQVyhcaJ5xocHTe+sLJ+6cbK2StL566t
Xbyl94kLi02NiQhvyjUao1NkYpVE6aVU6J2Eagcmz8mOYRmQJNzzUva1vxU8
92n9y/+Zd+OLrOv/Hnz1Dzb7XjQxzpsMvbDjwO+tVz+wXvvIZPVdq72vsmde
pU68ZDZ122rPW6Thm6TBW+TO64BdtOYXSD2vmi+8TR2/5jh8SbnyQoGx1o9L
dxGhbHYbyx0snoNSokSo7sAONwQ0F5cBXrVXVLdU1xUaixoranvbuzub27NS
0hqqajobmnd29+clpy8NDHfUVgd564tTM5LDI4sKjcnxcV1VtQ1lpTUlRcG+
vgE6fWWecap3oL22Jjk6IsRbX1ti7G6qlUuExBJNZTk4JkdHxgYH+ao8YgKC
5G6KuODIlZnx5urKmKiMjJyylLgsS1sKirETW+oWFJojlYnxatsKZhuvnjCr
/xevsKvVk7YmxO7Vf8Or/5ViYezCfAw39wQescMCRAtq4G5uYQvLW2JYQKBW
ZUayMDOzAJDZObcwtHtxdv/6/DJKo0JWMEtHZpfXQSSiVhQHN9a2zgBq1bT3
SjyUQplc6WUAoqUPDEvKNpY3tJbWtHT0Dg+NTfePjA+MTsBtR+9Ac0d3ZV1j
S2dveU1DbWsHKnMe3z2xZwmY2+b568fPP3/+udvnrr+yunlyZGY2v6IyOCY6
PDZW5xfS0T+6un48p6giPb8Q8Kq+vQumn7ePP1x9cA0Wl2Zn5kSGR3n6BSl1
vnKpOyc80s9DLsbpSU8pkx0cMfzdcTwKazpMqfCGKRLX9ixYONxcxUq4rNyE
ADgEvNAJfwa0vbH9A1C13V8GzpdQINNpDXCLGoBTaOYojYqKtyBxjwlgFMBG
rKxtib023CQa4RXy3BC4Y7wiktvNrS1RVMrKjqzUegNegR5EqVA8HoPJBv2I
CgyJr7DdgsfC3MScQja3obCc3RgIG8Qwi1KyC3buXeHIDULvSH1kprNEy+Ki
Im7Ca90VniQSow7ygD9ER0tkWSyTa3HTQIFYAZ8HVS4TjcLVugCNLkCt9YdH
EbS6PfHixgRs28UIeXRLVTqfEH//aK02QCbTEIE7D5FIgtoXsnlYF8MfnZzc
wsMTl5c2JyeW+vtma+u7h4enpyfnDq8eevOtd976+OPRlSXf7MzE5vqO+YWC
uV1OlVmRA+2vv/X+g+8ffP/48aPHjx88ePTwh/uPfnz4zT/ufPXNt3/8r+/e
+7fPByb35pTW5Vc0VbX0ldS2ZRVU+AdFotoiuba8sWv3gY3JlfXhfWtjS+vj
y0fH9h9JzqqJyS7kiaUSjtCFKWaLtCJ9qH9wvNKQ4MyVMS1oFoGp4pU3jC99
W/TSF1Wv/LXh+oPYax+FXfmSs/oX0uDbpFO/NT33e7ONL3cc+K3d0c9Jyx+Q
9rxDmfqANPMOaf59h4m37BY+N5t/kzZ622z4BUbdcZOqLVLlJbvCk6TG5xc2
bx4cKmlMMRj1Ad4Sd7VG5o/8zbgUO3pWfHJ1Tn5FWtZIR09zXROIbqVMFRkS
FRIUHhsdl5WRXZhbEOwbmJ2auW94dKS7x5iVkxoWXZqel5WWnp6cUpmdN9jW
UpCepld4qMSSnISkgZa2zsZ6Xy9tmJ8hxOBVlJ0hl4rwjhLT3iE5MiLYz1sh
dfOUydUirZc+wFhT2r979+7lM7Orp0rLW0jmVjYUModuDxLS1JbiSGHj+sFn
+01gvMLnlwh9iJ/lV097mnBx2SnmDDh+tR3C+m94he1QcLgGbim4qJZsb2pq
YmdlTbMAAkEND/EJ8dUxzFH/TQ+VZ+/41Mjc0p7VY7vm1hZWkZsx7u21snEG
gOvwqQug+4B0gWwkejmJIuMSa1raG7t7x2YXDm6dXjt6auHAxuoGamk6Prdv
5+75vrGpnp3jbQNDAF+dfUN9OyfGdy9M71sDMCRkIIDVa1dfeGtt69SeAwdq
OtrSC4xh8XHRyalhscmRCWkbpy40tPcCkSuoqJ5bWgVVGBMX66GQx8RG1DUU
J6UGhcdoVVo3hVYiknD8/HVSmRAbICDei3pXoSICoAG4Y6ml5RMcI5gSFSM5
MCWQb+4yJS7JwRRru1uoA/FDlGU5EP5XaOsQrx2ufDG8BM413LEG5kxD/bmw
HoT3BCAC2gPQCnOPSAelYp62jVcomeEZvELutUhPkrU+/jKFl5tICQsW/F9H
BotGlFHYEHj7tEmNFeAVyWKHPdnRxZFH5/FYrqD8+H5hkSvrx4ITkxShEb4p
WfG5lfZsiYuLjI8CVqAVhLglBGq7rNB5KL3lKh/QjIBaCrVBqfGFW/gL/B0N
uKPygYcEYhVAq1Sqxl49uLcvzm1+Yn/EEXj5hqnV/vCPgEqhLVdXAd7FgDuu
Lm5isRR1NHMS+AbE94/sL6oYKigdqqit3Dk2dPbk1q9/9d61l55Pra0UJUYn
jw1Wzc9qWitl9SWzVy998+CXB/98fP/+w39+/+P33965/+DRN/d++PruD1/f
ufuHr74+99zLpW196cU1+dUteVXNeeWNMal5UoUWPqTBJ6Bl5/zE2tbu9TPj
qxuAVFPL67v2o3r8gvJ2lT4EPgyVyoLLTS7XiWSeHp7+YrmPUOsld1KTooym
e64EbH5V8vKdthtfFt34c8iFLwKvfc1e+thk77vcrc81F/8ouPiJzfpvYFgd
+JXZ8nsWq7+yOfhby4OfkJZ+RVr+NWnPbYuJa5Y958xqT5pVnLasPmdVd960
9lrcnuffPDo3V5xSER8QohAbgwI8ZUomg+PKdEkLje0orW4rr5oa3tnU0IzM
Qh0ZLhyBjY29s0Dsq9HNNXX0lZQ311XP9faNt7XV5uUlBAVW5eaWpWeUpaR1
lJR1F5UWpqf6+Xq5i0XNJeVjza1DTU0GjVIjFiaFhdWVlCokMhTZsLOlkG3D
AwM9ZHIeh6tWqtylMo4zm2xnw2YxvPTauvrmzNw8U0u0UU6xJjtSUW8anN+O
l3W8WGNLGWJ7XYzzjXGkHcWviFxruMVOIABrcFkRNVwMYr3+35kVtgF8kiNK
JDZgzoBmvo2NhSmFYmsPF7Ofd6SfVyyZbE6mUugMNoi14el9k4uH5lY2pvcd
nF08PLe8vv/wicVDxzfOXD5z9daJi9cHJmZzS2uASsWk5mQWl1e2dLQOjAAx
A4xaWD16eOvMypGt+ZXDs4trMwuoDAentU8trM4uHZknnOEPHr944tKt09df
OXPj9rnnXjx29srioY3O4VFjeWVSVk5sajrcJuXkuordJ6bmZhdWMgvLwpNS
ats7Dh7dhP+SV1Zf1dg5ODaWkBYRGqXV+0ik7i4CkZPBFy4oFxMTEhwWQCfk
0Mt2tnxyfROhJxsylYzMMUCeY5rkxHZBLlUSBcg6gCyBQIRaFD1dILDZFN5g
RX2xn5rtAxDBagJTXa8P0Ki94PlEmoEVapFGOPgRdQpPOuEC4ODsKRh2FDJR
0s5Ffgsid1ehDDSahSUO1NvsMDVnc/meen/AMRBoOPoNIPmkx9PTb4E3KHG6
F+oDiEySXXAqgk7nf+X1DxPzK/VRaRn13QW1fUyK0B2UDhf5MwDRIhqhqoAF
wYdXKLUeaOjh38lVXqD7gFnhPqcg6zQ6P9zgRiQFzehJtBrXgk4EjIevQ6E6
CIVylrNQ4q6FZ8JnhqcBsgEN4/HELDaPkITwqUQ8gZjh6MxjuLLovJDwuPb+
wbKq6t6erqWjqzffeuX9T347sbjfJzsroKWuaGG2ambGszivcmr8zU8//enx
47sP7n9394d7jx7effDwzg8/fvvDvb//cO8Pf/vuvd/+fu7AsczS2pyKhpzK
FpgPGdnF0VEJHnIN2dFZ5O1X0Nlb3N2/PYq6+grbuo0tnXlN7fHpxW5SnRNX
DHwPjhh8YA5f5uwmZ3Gkaq1PsCaant9NGjxHa7uq3fhNwWt/j37uK49zn8nO
fEle+MBi5SO3839WXf7K5dzvSCd+T9r6grTxudn6Z2arH++Ye8ds6lXr6deo
Y2+Z7XqHNPdrGDtG3jTvfdm07yZp4Dq1/0X17O0rp7dWm0oqwtSRGnlhdKJK
rgV+JRfJAa8K4lI6q2orC4qzUjM9ZErAeZgqsLgIheLC5LTB8iqDSAJyb3Nu
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
r5tOv8468plk80vJ5W/UZ/98/fV3n9s3WxGiacjJ7q1pAUILa5ZSpmoqripJ
yhht7ag2FidGxLbWtc4PT0SEhbu5uuxsanl563huciKf59pQ1gh4NVhbV5iU
HKL3DjcERAeERfgGp0YkZodFxwcEw7riynKO9QvOjkooTkkP0GhVIrGvWhPp
FyTk8Sl2aCI5kMmhPoaMhLiYoMC4oKCSzExjWirgFY1uZ0sGVcIRCoWoRxiI
AgoVFiY6heFA+VcxDq7H2daDbk/TRJ/FKwxZBB+QyKQKGtURoA9X7P43vHqW
XG2bYVIJyzWc644gzoGCvAHpDjZ2oCbEQmkIncPFiMoTSLoGJ2YWD+F+Xiil
gXCvAkqDmgwuHwayBGAFA/edR33hcwuLaxobOvsGJ+f2rBxZPYYsKYBEHTv3
HIytCzcArM5ce+nU5VvHL9zYOn/9xMXnN889d+j4BRwZA/QbmJipbm3PKS0D
pAKYKq6uq2xsyS+rsKXam+ywbO3o37t6GCDRWFmdlV+Uml/QPjA2NLF36cDh
4kqjTMHz9VdhvALSymIx4HJWKFREq0HshID6yGMzGdwtiMdx5RNkQyJGedcw
tqty4LATYlyM3aLgvOBMNhS2cuLDQwq5TqnQw9BrAw2GMMArWFyw/ftTyz5L
nPCAjdapNKyekAxHCeoUMuAVEfoWA14BiYL7lkRqFvArOxpd5ektkqJ40RO8
Qh6nFLyV+Sy5IrI10C4hztcCwoZN0oA4BaTn6kNjmaACvQPcDcFsplAqcAeA
BGAUiT2AViEHBrn+6eYg2ijE/CosMgFGdl4JwBTPFcSRv6c+EAbGK/QcoQy+
FEGuGC585BwCL/cyBAOmwVB6BngQ0TAAW9A4drY0GytbOxtbJg3IPcvJTUhj
sLOz8l+5/cbL773TNDHsnZk9sX9t8uhGRH9b5FDbqVdffvjol3uP/nnn3v3v
vrvzy4OfH/5w/7t//PD9jw/++s33X/75r29+/Pn84eOJeaUZhVXpBZURiVlR
idkB4YnBoYkyhReFxXWSygxxcYaEeI/gEHV0tGcUGoBd2rg4fUKCd1KST3Ky
ISVFKNXJFD5AYx0dubZ2qGrbFtQG3dGRzma7qNi5XRb7Xybten1H3Tnr+fdI
hz8n7f816cDHVou/Ik3e3nHwQ6uNT6zWPiatfGg98or5wAuk9quk+rOmNads
K45ZZS+YRI9aKHJJLiEkR7W5Y7Cpa+mOiAXTjls7Vj4QnLuTceuvn73/2rW9
u3KCDQM1tZONLbBWiqQKnUJXnJw9Ut820zc4Pz5VnG1srmleHBkvzMtXSGQV
qemtxkKlTAzCKNIv5vTSSk9ldZSPH/BCd6FUJpBIXaVykcLdReSl1nlrdVy2
k0GrjwoMiQmOcOPwOQyGzkMZ4R/kIXa3trY1MTEByEiJio7w8w3SaoM9PYvT
0ooyMww+Onu4fATOHBHfmcuxRyUdDmS6Pc2RRaU4Mqks7Mq4DVY4MPK0ZF64
nSb6bGtCeEgqkQNzwFYDmDX9//AKGzTh2DKxjU4kjzIYRIY8jU5jO9izYWUX
SfwLioecBHIAQFSMT3Usr2uZ3Ls8f2ATwGTfoeMrR09jGyvQdIAtwG0ApgCs
YBw7eyUqOSM0LhnwqrlnsH98N2o7ePT0ysYZ4FdArgC1gF9h4Fo/dRnjHiDV
4RNw5zTIQNCMu/bsr2/rySutyC4qKayuqWxuqWppa+zuLSgrs6M5kEjm3r4h
a0dPdI0iC5qSytra9o7OobGe4el9KwfyinIkHhydl0zmLnRwpAAOs9nIAkyt
9gSksrKyQZCOBeDTvmYEg0LNZEXIr8MDwB8OKe6FTYR33IFBYbCCBQLjlSNh
WAeERKXy1uv8NWofhFfAr7xCPNV+8EwAfxQYJFpIoEpkoqIZLgQyxR7wioa7
adtRYJCpFDj+RF6BFIlB1JeQb4OWHuSoz+K4aHQGWHNBXrm6STBY4SKgZ/Pq
iabS/8IrohsFD9ADMFAg8OBovAIi46KSUmUGQ3RmTkR4PIfJ4wtRZoVEqlAq
vVQqA0i8ZyELAApuYQQER4EeZDm7gUjUegfDAJWn1PgCXgHKwcfGPcWA9WFn
CY6LEJhYUGhcaERiSEQiPJ/Ll9jY0szMUdE3CpzSHTks1PuMyeWS7RlV9U0v
vPlWcllJdGXx5OHN7PFRTXVR8+Lez/7zrz8/fnzv/k8P7j28c/eHf/70y4/f
3QUh+F/f//jlX7/53Z/+cuHGy61Dk8nGcqBVAFahcemG0LiE9ILqxt7egYna
xq6csqrwtEyPoECRr58iNEwTGaWOAIoVqQqPUIaFe4SFbQ+BSKNQ+YEepNOd
gF/BN7JCRR9UBpxnVbSgb4u8/j5p7HlS8wXbmfdJCx9aLn9ssfKR9ex7puO3
zY98bLX5O2vAq4V3duy6Reo9T6rdMDHuN4ufMg3sN9N32ug6rLzbTSTpZk56
W3uVLc3PgptJ8mohxQ6SKi8kL73y9VtXL+/qz4kMmurp6cg3urmIYREJ8Q0p
SMjorajf1dHTWdtYnl/cWNXYVVXd3dCSm5IZrPVVuIoiQkL5bH6kT0RpWmZG
ZEyowR9NLLqjA53pzOax7EHHcZzZqMYZ6ylkc+3EdYFpzGLDYDuwgOtaE3tN
LDrdS64IM/jEBgbmxMWhfNT0jLSMVIW/PjwnOaYgS+mtQyLMhoKaSzqiyBWb
zt7GK7w/iOnTthJ5xlENkEoI8hB7CAAZkErduVwXYAu4xOb/pwe38QonRm5D
FpvFR1uHZAbgFVxAgUHp07PnBR5euCufmZVtckbOxOy+3fsP7kP1g6cxXgHL
ArwCpNo1vwIDhOGR0xcv3HwlKduo8Q3KL6+p7+htGxwb37uE8x/2rG7AywG7
1jbPwVgl3gG3BsO6kvD924AxsmuuurkN8MpYXglgBUjV1NPXNTyeYywwNbMi
29mTaayxmfnp/atA4Zq6elv7+0AedvTD4nzYWJKv0Us0WqlIjNisM4cJLEqn
84KDQ0GeQjYoWv40YIXBCnNUQCqQdcSQA3DhcnLUtYQ41NtFwVgPwpuAtIEr
Xa320Wr9AKlgGHyCdVo/iVgJz8TpbXAucFI9Ti6lUB0Ih2Eerv6DiwKABcev
UD6GQIpTnrC5KBJ9dHseCgPpRe5qRLEIY3myLZpgz2bXE41+0A/Oa4A7cK1h
wgYzn8cTA8eIS0odHR0Njo0xVtXk55dxnVyJjFCUeQXQtL0PCKAkVaCu8UCu
QNkBXgHaMJ1cATA1Oj+NPhAGsCbgToBaMhCDTGeAViIixwbuJxK72zOcGWw+
oJmvfzS8BD423hXFNYa4lSpuo4DyD20pKYVFOa1NJSODgFF+nY25o4OvfvRv
j395/PD+zz/cffDd9z/cvXP/+x/vPXj4z+++v/fXb374/d++/eCLP25dvlHV
2p1WUIbz1YOjknxDYsZ3L73xwaef/fG/Pv73P3/06Z/e/ujT09df7BibCsnI
BIDyios3JCT6JCR6xyfAfaBYMDRxsRq0uWyQeug4LlJHFkoQhQ9pbYv4rbWF
iYN/Yfj652EvfOt67CP7XW+Sx94m7XndevVD06X3LYBxjb264+BvLNY/sVv+
NWnmNcuJ9yy6XrSqOG2dsWIRtovkO7wjYNwiYpasazGXFZu6JphyfEwcpDuY
ahtxmoNnC0nb5Vu18uXz59c7KvIjfVbndlelG5Vyg4dUlRAWB/dXR6f39A+3
VNaGBYQU55e0VFW0ldcUpRewHHkeco1O6enj4ZmflF1TWBpqCBS7ihAoEZUI
KI5EVH3CvHW0Z9jZkGFBkUjdUVmBLSrNwP3pYBqbWVnvMDOlk+08pbIoPz+9
WBbrF5gYGh4WFFhYVV7W2xpZkZfcXKWPCEVdRegMih2AFgpXwkWEzdu389u3
eRSPx99WfwStEmKHIuSoJnKXyZBJILG8WqMAFEEA/td4O8Yr8tOfbZbl6ODE
ZDKBzgF2mVmYiCWGru5lV6knejcm29qGovP2H56cnVpARg371k9ic+O55XUA
q9kl1E4ChCFA1trWmc0L1/LKqqUqfXIWSr4CvBqa3js2i1oKYvGIG+XALWHh
jqyxsJf7gY3TMPYuHwIg6hvd1dDRXdXUWtnY3NDV3TE00jmMDJYjY+N2mJrD
UTI3Jyek584fXO8fn+4dmWzu64LnNHeN7Flcae1q8dS7K1USQCrAKycnlkwm
8/X1x4Z48I1RhaAjaES2Ewv14MYJ3phZAViJhKh9Ay7AIbZoURUnl+OG/YFR
Pz7C3hzexM0NkRPkwKnSeWp9dFqDXuerkHvCqcGmZLiiHLkUE3mqgCRwwToy
UDdJmDzoorCxA1yi2aNQPGHTJ0FiEPkxuuJVj85git0VQplC7IEABJXpwakk
U57FK4tnflBlNCZaAMuoySnibDQam2Rlbm1lYWdpZkuzs6BRAcFk4v/L2HsA
t5Vc26JgBggSOeecIwkCJAgGMOecc86ZYqYoZlEkJVEiRUmkcs5ZGkmTg2fG
M+OxnOO7vvZ1+ddz9rVv/K/++7vPkWA5vf9RXdAhyIKA092r1+ree20LXiJc
CeQcxAcWuoC8TazRBmsUECqcXwFMQbM7YuEVa0SMJSLOGhlvssXicg+9OQxg
zBYVnVrCcGZwGBy+wxUfFe3V6qMAvvDUHrMlwmKNhAskJZicEBpVwheH+ZFA
CseVFXdvH84aG8oeGly/e/N7v/rlH//z//63P/47sKl//fXv//M//tfv/uu/
//Dv//Wr3//pF7/6w/d/+sv3X3xvZftsUX17Q/tgXXOnx5vujE1ISMmqbmh7
+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
//hnv/nDj37+P0Hx/eK3f/jpr37z/Z/9/PNv/+Dph5/sXrm1Z25/eUtXbmVr
TVt/fkV9bmlFZl4hLFvEMGpEpGtx/Ti0srpOaDmldVnFNck5pd6s4ih3Iiho
5DYP6wsd3TdUxE8ktXgSHEmp9sRkY1yCxZsKqGVISIImYYmYHHEoV0oFmc/m
ijkSP2MMdXAm8uJ3WDs/oB14wZj/iFC9G2LvJRibQvrvBJ3/JuHcC7+V9wiD
DwJWPwJtGHj4U8LC+37LD/1az4fWXKYMvOE/9IBQcyo4dYXinCa5h8LTNwgl
OwT3BM3RR86c547dD7rwecb9fzLf/Wn3vXcvD3TkWKVbU/uyAWMj1QKurDyn
ZGFgFNleNTS31jfarAAXyNvTIlX1V9Ql2yIq0zJqkjMtYrTU6jRGGKgg7hQS
qV6tsRutLntUlDUyzhFjNVhgdQvw85eJxEY1CnUAcQHDgE1nCNlcLpOFG/4D
btAoKCmMFI7OrFERYbFUpFAY3C5DclzlQIct1oVGDub+R6YhyMJWbSGbJWAx
+fD8OmRJxEpsy1eG/4h71cIcgb6AlRMGJzSUno+dDcHH85kP4MCFQ5bPyPfV
7tWfJSGNGITsmMJpeOZIGJmeEmG7PNV9o6/oZGPGmbb84y35zamxjXWt+zfP
bp1HLg2bpy6DGATIgmtoQLQOHUdMCZQdgA9gSEltU1xGTkv/8N6VdcArdLZ4
CuUeAlidvXb33PV7Z67ewfasLmKS8MqxUxcOHdsFyJpbOTS7uj46O790+Mj+
w0cBrKZmFwZHJ/gSOSAVjHW0YjKRCVNQKA0o1tbu+e1zNxYPbh05cebw9qmZ
pbWVAweT4twiKonkR+htqb5x4XhStJNKpFHD0NlrWHgIABGXBbQZSxyQqFFf
MwCkBJjBNY9BY0MDyAKKBWimAPYlA7jjwpKEPBYwwygsiFet05pBCUKDCxRV
okPP+B4XfowIN9wXeEBEW1Iv6+DgvBcrN4/0IBYsqgCKIhCiczRoVBoLGblL
Ud4KlYI2NrHzNRYeAvGKShFxZ1Gca73yCwzy4ZVcrge8AhIHYwNtwgcFw5ik
U1EYHshPBWYfqgWSbnL4QkCBXwFeWYFQYXiFt0hXIjQcqZwxiZHOOK3BCnqT
Rmcj2ysOqpLJFyljvbmRHphwmaD10J6YyYbnZYBA1mlNJjOqsh3piHG6PJ7E
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
Y8VP2/FivvDhgcKjXQsmB6W+WqM6hic6hqbqO4ebe0Yau4YbMePiisaugsqm
3LL6/IrGzMISEoUBrAnmJiUsHCQtfCnkVUYm40b6qFQKdhMQaoWFI28xBguI
HJMjhJup1ZkiHc4oZ7TTHZeek1/e2NTQ09PU2w+tsbOnvqUjIcFrMcXorN7p
o2cvv/d596FLpoFN9vxtQdMtv4xlQvI4xTZJ0PUSZPFhgihC2gRh7lnA5ich
8+8Qum4GrLxP2PiK39w7fhNPid1XwhvPh5bvBlXtBlfv+uesEZJn/HIW/PIW
Q7MPkl2zgQkT5sl7KUe/nXnpfzTe/xlr872tzd33lheH0yKrHeZDkwuJXo9a
Ey0Ta2qLqlbH9k62djUUlhRm5wJ1p9P5Ar48Qm4sj08pjIsv8yaOlFXXpWYD
G+4trmvMKipPSs9yx6Y4nTlJiVVFBTXlJS0FhY3FRQmuKJVQ5DKap/v62srK
WsvLzGplcXpmVV5BjM3uT/AD1k9nMrRqDbyVmIUKPauVGoVCFev11g70pTXW
5LY1g44mhoRRQ5E/pD/QIlRFPMAXSIPbRQKNx3cegErheffYr+AiAJlPEoP9
QMhT/mw3B7/Fd3ex9ZaIpxPip4QYWFFehyt8/+oVXoUjh4ZQEj00EO3O+RPr
UuPvjdde6i4oNSsbIwxPhyq3ypNidYa8suaVg5sgAHcv3d5GhVOvn75yF67P
XL134eajyw+eX3/yzuV7T0AAtvYMub3p6TkFfcNjkwur+zeO44eDJ86jcqsA
XPDKwa2d/Ye2lg9u4uRqfvUgjlfArwbGp9r6Bjr7+1HMFZUOnBOFP6nMaBLZ
3agMn8GmMdpZXIlEoglnCdr79ly+8/DE5ZsHd84tHDzc1dVRXZTdVZpSHK8/
trfx4caejcbkS4NFjw603T3c1ttQ4TTr2LRwUOlCEaCLWCgU8rk8nA/gJ4N8
RLoQQwC6pZJIMIkOywYfrywDqtBsiQCkUqtQlKnZFGG1RAL7xROi4XZz6BQO
PZzHpAqxynoMEIWBftAj0DXQkwBcvmgTQEusbrIMWc0IJVQmR6UF5HPK1Rad
2a7UGeFFUjgl5JXZO/QaTFK8jqoPrPCoKwy1gjFzQrJEqsLKael9eIWKUQSh
GoVAPFAtLcxqz8evcMjSmyJ15kiV1qY1RPp8GOCew6/UOjvgG4AVFq8uAWgF
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
7/ZA9pWZqgtjJdeXWh8c6nt8ZPDRxsDOaNlwvrUvy7CvOvbMZNXTo33v7Yw8
PznanGEsiZY1Jxt6U03dBVGd2ZEz1amLdek1DsFchfvpwe43j3T3Z0c2JBqr
4oxlMdpSp6o0WpMTofQaZYkGkUsrMMt4GjEH8IpLCyUF+eOb4kTkNYrqf+HV
bZgsDlY+VQU0A7l/iBXWCJfZFqUz2uC2KFU6wGogSCjUJISECyJUHYBCwY9X
Xj8mxrqb/Fd4BbcCqKnvsAbL2CLjbo1SqdwcEW13epzu5Ji4DGiAVJGuRBQj
GhVvd8SBTlRpLciVC4sNw1U5ti4gHwA2i4+n56MimBJhMI3RnJ/y/Tvbn1/d
/fj8ieuDVedrEq715u525RxoyGpOdUspIVwmQmm05YXFm2k1RrgWCGWAmR2D
4xunL08sHG7uHs0prcnMKwR5efzEzqdf/fyNN5599OnnbV29uCcVTizDyCRY
Xl/lDrxctfFwEcBvPLABfvlyKYdVHrPKRz7MoFnYXCCr2NcRgTIViaUbmzuz
i/tTMzOAUQwMjoxPzJSXVVdWVjZWNYFEnTq0deTkqXNXb1978/0Hn335wYtv
ffuLH7z/nR8//fyHT97+3rnHL46/8eXG3Y/233r30pP3nr347vLla/OXrx68
8/DI9cfHLj07ee75iQfvX3j2yVe/+5Od9bVyk7LDoW+MdsYrDYasvQRrDIUk
JjL1Mnv0YudARmyS3RYdZXPV5JdNtfUu9I3MDo6O9/XP9PXVZCb3V1b3NjfR
GeFKsTg/OrEhpaA4KQdW9pyYhOaCkr1dPblxcUCISQEBCpkcBw0KMdRh0IPE
CyX4p8bELY+PV6an6iRSr8vpdUVJeDwYQSDMRTx+tjexvqxSr1SmJCaATmyq
q83JyTE7o1xpyd7CwpjcHIkjwpWeJlfraGRqSBARRA+eUIbjFZ73gZc5wA3D
4W1RjQOeAEXFYV5zwIeR2x52RvyX5YZfghWOUj729XqOM94oYeEoOD+MDhQr
LDiYwaIHkcIoJJoEi/KyGOMXaouudBUUG5VKllBCoRiZVCWFLRXIYzS68eLc
xYrsy5OdbxyavL9/8IOt6a+f27kz33lmqPL+gb3HuqoutOSe6iyzaKVSscRk
MJuMNqlMDZKHSmOTsVSUMASTMBkpAEF4/DYMJCqNAWgDNwFmJioDgayDGVQG
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
EeJXjkR7TJrdnQl4ZY3yai3RGqNdrNDBAsvhS1A+GoZX8PWJoSF4TRlkaA+L
OFfCEShZQiXwKxCVSVml+ZWtJbU92eWtsRkVVk+Ow1voAq6VVwfNlVJq8+SY
olL09ngunzUx1PHB3TPL7dknBgsu7608M1l2eaHu8aHBF7eOPjg6Vee1RnBC
7RxqBI/rUShTjOwkk9St4nrkNI+aHaHiGwW0uiRHVWpEikaYKmWdHW14fnzw
w/PDTzfbr8/V3VxoODdeChrz0t4yIG+bPdmgMfdWeRpSrM0ZUZVJtsJ4m10l
VAjZTAYtBNu/wvGKhpky0TGDd0AhciiVFEoF0IiMjgcMB5BRK1VcJlq3eFw2
IAI9PAwGUlgoGTSOfzDJh1e+7K3A1x7/P/EKHnKZBvBKp0MFUlHNQQAuveXv
4hXylpeqfEiFar8yXpZzgmupyhBM5zrpig/69n53fW4lVlvuFnUn2kbyo2fT
opdykrOc5qDQQBApIDXEQglXIGWx+SAcdFoTImygI7TGzIKytj1zjf2TNR17
Grr2pOVX8BV6pkCmNtj4AlEI8rUIx/xaUYbgy1Syf/D4W7z6u9tcvjniTUiM
j4vNy82uKC8tLy2rrq5t7+67cv3OzNLB3Qs3Dhw9mVNaFZeRl15Ss+/QsbP3
nj559+NHH3zt9KMPjtx+E0Bp9Oi5ie0rdXsPX3z6eeeBE12rJx999cdbV57v
O3Vr/fqzc/c//PSbP7735Q/SBmaCVNEsaaRQYqVLDWSdjcpy8IgwNsKDmEwO
TTTSPZySm8NTG4FKNRVXrY/sPTw5lxLtaWtoaq9rLknPqyqt1GsNwC6YLES2
tWpDQnRCpN7OZkvzU3MbCopLU9OkbI7b7kiJifPaHcDeVTJ5lMks5QvDyTQW
kw93O8bltqjU6bFxNUXFQKL8/AiAKyADU2I9wO5CAgJ52IGKgMWRC8Vmo8lk
MUdERAC/crlcAFmpqelKpRo/FsSVIG6tAHiFp/Bj7Iv6ehWn1xfT14za/r/x
6nV+5WNZ8OZcJi00yJ9KIlHDaWQK0xmXmllQUdvQvndl/cTFq4/e/fDuWx/c
fuO9y3ffvHb3/bNXnh05jsqVlmVlpVhNFqNCxWdmm40ZVl2EVJjpdsWoVUoO
TcAKLow0luj0sToVlcFX6yNAAwK5csTlwLPdlWywefRmJwx1rkgBAxjGrw+v
Qkgv3VdgOsCyrjXAihFjjHCrTC6ZLlKsjpDqowzOlLjM8qzy9sK6vry6vqSi
poS8xqTCFrhIym+ITinRR3iFQv70SPf7d3fnWzKODxdem699fKT3q9eWvnnn
xHhpgpNDyDBQWtIM49Vx6/35M43egZL4pjR7g9dUF69tTLWWeW16LjnFptaz
qG5p2PWl5ifrbY9XO55tDDw92n37QOXVfTW3l5puLtTfmK/bGcoDSNweLJmq
8LRnRPYUxJbHmXLdJgmd6HU7dFo18m/HAgle7tHRmVhdAwpuqwjsWo8VKuUJ
0fzlcPmgD8MZbAaHiwp7hRLD0WZMCErOCiEH/eXDB1Ov45VAKFYotX+LV3gA
GM6rRUI5KpmhtWJlUu1qNUClEReJPk6F77TDM4poxc4E8TQcXzwDihol8YTh
Appc+OTA8oWW0kYHt9OrO1ScPZTumspKzlTK2GRSMJVCZSGUk6DCiAivAP0w
+2gEhv8vZ28ZHUeW5fvKFmemkpTMzMykVApSKaYUs8VsW7YkW7bMKDMzlpmZ
ocpVLq7q7qpp7pk1s+7c++Xd9b6/T/ftE8fKVrmm5q31omNlh7NSoVTEid/5
7302gEkYiZZ1T6xv6l/RPjJV1ToAhmFxbatUZ9fa/CabM51MQQE4YGIQVQcz
icCOj4b3wkGOg6s/wtev/4k/6Qvl+nMilVXxxqaWxtaOls6e2ubOXQdRC5VT
l26+fPf1kbOfnPzk2uUHz26/+vzeZ1+fvPlw5vCF4V1nC4dnTbV9xeMbh/d/
0r/7wsVnPwzNnVp7+uaVlz9uOXoDeLX5/L27n/3x/c9/Ov/6M0dpg0Bolspt
bFuQG6gW2lvY2XImhZpKS0uikvkM0brRVbXF1TKxJhYuWNY5sHd6/Zr+scG2
rrGBoZAnUJFf3FDXrFEbQKmT0fRFlwnlQbs/GshnMkURfwR19SqM6kSSXJcv
Hitpisb0eiOqys4HTSzMBjuFJwNkGXRGp96wpLGpuigmYLGI6tkkAYddXlBY
X1XDojNkEqlGobToDDAEXQ7QVwG73Q7IslgsVqs1FAoDrxJl3D6EiaKe4+xE
RYWE92lhAk56opvv/FSb4NVCk3ChtZ4wAxPGILYLKFnplIx0BplGJzNA8Ftt
LpkUpawKxSKvLzAwOLxt594LV25dvvXkzqNPH7z46tazL649fXP52t01M+uL
qmskChiRfL1UxmPLVDo7jyvloJLRaV6FuMZsDunVTLZIbXLZfAXucIUvrxqQ
5fTHTI6wweKVqy18iQoeUlQ1FPd7IlJOsPcY7CAeXyKRG1Q6p87q90TK88oa
S2qX5Fe2uSLVek+R2pGvcRba82rc0fpIdRfwCusrqy9mdORLpdIts5PPrxyZ
7Sy4vLHz1dGJb65s+/LythXx0GCx9cRM+42d/Td2dN+d69jb593WZlrdEFhb
79k/VHx2dduyckepgR3RsF0KjpVP3TxYcWg8/97Wps+OTLw7MfvJbPPR5dFP
1jQ9PzD+cNfA6ZXV2zqCR5dWbu0qWF7hHCpxtIZ0TWFzmd8sZ1HilaU2qzkp
KelDGRl4hTmIWAaFd2BiYtFpbAa9tb6xvKhYLVMhDnAE2RwhhS2islEmC2oG
DeIabnjKYrAsU//bjVgNTAdjUw4iWIMaleJ6yIm1Y5xDAXdfwJdifQXGYIJX
apUBrxtiTYVzG3GraOyzSoQxJOLbuVIFgMumUj1o6R82yGrM7IkS79JYcNzv
9ghZaYuS4Fsz6WwyjQn45XH4IjEK3eeiJUJUQ15CZFQ53IGG3uW9E+vBKmzq
X97SP9E2NNEysKxxyUhxRQ3IbxL5Q51JWhYVbD4iFvHDnJso7PaLCm+/3BZy
bKH0guOjZy+cvXL94tWb5y5dvXH34YVrd85evXP72ZvXX/7u0esvvv/5r49f
vdt58NjWg8d3nTw3tmHbipuvKrafiW4661u+V1Y1VDkxt2z3xY0n7+28+KRj
/f6d159devr1LhBXVx5uAMvk099//fVPp24/5wRKUw05dFuUZS0U2crEhlIK
h5tKJS8mwySUqWSIt42vrS+JKxWGwmBkSXXTyc27pruHWqvrOlvb/C5fricI
0gg17+AIUTWVVJKELy0OF4G+4vEUYW94sKm1MVZs1+pyPf7ScH5pIAfQxGYw
2cSYg1sGV5vPFemV2qDDWVEYBd2VTaMmLU6CwaiWyyJeX2lhEfCKQaMrpTK9
Us2hM416A/DK4/GASeh0OgFcwCuDwfQhC4fIRcVlN/AMiM3ARJ5OQmXhCSJ9
QXuUxJrRR0uEv3ZhLXS804nFKhIlnQ6zXxaLQWEKBDyZUiCSctQamU6D/kAx
T2IAjRrKLa+s6B/r33Vk98PXb289fnHv6dvLtx4dOX+la2gcpmmYl4P5daZw
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
hS+/MlTc4AiXg9zSGR1ShV6qMEqVJhjDDA6q/4Yazaah9sRs1FeaxuVKQV9p
TAGtLc/oK6lsX9YwsLppaE28d1VV18qKzhUAq5bRDfH+6cL6AVdhna+wLhSt
k2udcE6Z0pCUyh0eWfbk/MGussC6lsixgbxjU43XNzWfmKy5tqnj3lz/7e09
N7Z03tnWDfv1je23tiw5sqKpp8hVYeJX66hb2iMbestNYlKeXnpyZdXz3X2b
moOP9g483dl3f1PvrW2dV9c2P983dHfHkpMrykF0rWvxrYp7dvaWrKkw9ZV7
3Eaplk8P6vVasS4ri51JTgMDEIsrGkGthGFIJnO3Lpv+9yfnL422zhT5To41
9flt4xH9XK2/3SKYqMm3ithpi4jyaGQKqKzf4hUKJUXlf1Ncbj+IFpRCqDYI
xIqEKz4Rnodd7sBPlRJ1sQQbQq02o3bPKj1q9TXPq0TwFS53A4Y96CKc+Jwo
1ICUEuHImo+9ycYt5HBbATzYcIgsrruFssyIiFOxRAGv8CuQ00xjRJ3FzFaJ
2phXVgc2YNf4msa+iZLGrqK69pxwAdi2HC6fSO9A87tMqkLN1PR6gBLwB1Mo
GAzCZApQAkDZbDaTyYRNGNBRADR4BU0FcINXLbHBsYrYSoqLamtr29s7BwZH
P7ly8+qte2s3bm3q6qlqi6/ZtWvj3KmRgbZ3d4d/etH71YM1rx7s+/nT5f/6
bsW/fr76z19s+Nevt//HV3P/+OHKvUdXdhw5tffMxbtv3t968fmlBy+vPf/s
0z/89fGXP+w6fj6vbTnLUyvLb5dEu7n53WxLIfJZMrnpZCo8V3AjRFzhxMiK
gkiZUmmtzC3atHz16v7R1vKagY4lE6Pj1aWlYbcn5A12lVeO1cebqkq1ag2P
yg1YfEaNwagxwwUpDIbjuXn5VrtZp4appcDhKyd4hR5wMplNZ4nYIpVUYzTY
BAIBDACQo8T6SxqHnS0R8KO5KG1QKRa7DMaIxxt2enNcXjpeikVxzhmomXJm
OnxVFOWL0uUyfotXCQ9hAjWJtUKsrz4KyPkte3DhEmHi/Cj3EDQUlcWlCbhc
tsLB1ebz+XYaTZaVRk8HUpFooCdRf0NqFnKvKZVqu800Nbnsu++/hP34ySOz
69ftO3T00dNXd5+/b+0ZBzXFFsj4YD6IlCB1kKvcHQVL0B6MOXNK4MDkK1KZ
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
8+0bil5c23Rvrv/+rn6wBGEHlXV6RfzQaNmR5RVHJyqnqiwD+drBqL09aK1w
as6sqny9v//+3NDVLW2fHh67OtO6oz9ycTb+ZP/Izu6CoTztYIHu8LLqh/uQ
A78+aBBS0xRCtopLy3XZwH4hU7OppHRQU4ApZjYbu7CwPQjDlcPi8pkCu1as
FbAcWnmu38iGGYqURKVkYa8UiZqVlJIMB3DvUpNTFsrphVsK6jyYuWhxWqSg
NJxXzGAJlSo9YOEjXqUTBZnxEIKJkuCVgigYKJr3LClxiRt8MC+upL+oh0yQ
CjdMlMIHBNKEPYj9V7hsTkJZYUf9h5JuRJI7Lv0nEMpQawyiU49CbcrJLw7l
xQK5qKKO0WQTi6UoEJFBVam1bk+wpCRutXoddkCTx+d34jwRbAmCxALFZTab
QWIBr/h8Plg9iTkdPykJCwUeLqLLHhNT68rthy/fffvum5+/++kff/2P//2H
v/2PO08/Xbd9/8Ydpzbsntu0Z+uWuXVXLmz+9umx7+7v/fbW1JdPRr570P3j
474fXoz//GrqL2+2vn96Zt3mnR2DQ2u27dhx5NTOY+d3nrx07933Gw6fm5o7
MrBmk8zs5um8FEOROL9T6Ckj8dTZYj1AHoUNU8F+IQlYnGX94/mhIoPO2V3T
PBBvay+v7W/pyPMFxweHO+rqVSwunU4NWp0bx1dGbPa2WNF4de3swLDX7jZp
bDarW6/UVgTCeoEYpi0Q8ialTqvVZ2VQuIxsmCTAcGEio0Uq5IiVUhnMArjb
IHyYy2EBrOqqq2DCgCHH5/JAkjHp2aC9wX7HBR5hxsS8gmPQt8Ar0Ffz9v7H
vEoYhongK/zJhJ8q7cMqdtp/E3O1kHLYx5WIc85AhRroWRSSSC7QezUcLTs5
C9mqqTCnU7PgdVHa4hRyCkPIFGr5LDmdOHkGK5shEvJhnDg8/vJ488rZLReu
3QNewVOiN/sMtpBEYxdpHIHCak9+tc4WNDrD/oKqcFmrI7dKYfLJtHa8E7yS
09lCtkjDU9kyORqi+rFNoXMZnPmgrCw51f7Stki8t3N8Y9PQmrq+6baxjUsm
tgGpStuWNQyuBV7lVHbZ82r07qjNXyxR2bhClVSh11gK6IHeeF1znVtZ5tR2
hK1beqvOTjeBvrq6sf365k6wBx/vG366b+TOtu5P1jRe2tB1dqZpZ1/BTIOn
N089WGTuy7d055pq3PpbW9sebW19tGvk4Z7+67MNRwZLzq5tuLuze0d3zmyj
c1NrYK4n//b2nqcHhs+vqTFzMwW0TINCKmWSXEYNTyRlcoUoQ5NCRXMcyA8i
6zmxZzFYPIEGrHIANfzXTEoqky0hMxjYWEA3h5g4sLFPyshcmJD1S2sQ1bkC
Xk2uWt/VO0amsjVaI58v/ChhB58HDyFAigxsrvlCGcSrCOsrLLEwuASop/yH
YhGo+BX/A3Mw34BXgl80wWHitH3sy8Ix8LixJhGyNV9B68NJpMAr1LbVaINb
VlhSVdvYXlRWE8qLun05eoMVfhaugNPl8/pyWCxRMJQXyS0EQRUMoWU+h8Nh
Mpm0Wq1SqRSLxahZKoMBqgyXWlroWsEPEZ6mMcrgmMvlAuXefv277//4b9/8
9Pcvf/zrT3/7n1///u9X7788d/3Bl7//252Xn1+692bvscOnzow8vtPxxb3m
b+6VfHMv/uPt8p8e1f38vPtPr8f+8XbzV8/Prdk01zUytn5u76qtu7YdPrPr
9JWbr7/qmli7/dSlpon1cqtPbPRRTUVcfx1b50km0anZ6HIhxzWFnJmewWOy
Bjv6YUa3W/x9De1NMbAlmjrrmno7ukb6BsIut1OpUcmkJpmqtqC0rbq6rSQ6
29l+58iJSCAslyAPpEqiiOcX2+QqGCqgprhU1OJDr9JZ1Dp+djboKJhY4BaI
ORIpX2hQaXgs9qKkpGwmXQ4GPZfjNJttJjOLzkCefDAWuQLYxUIJmcjTx7xK
R7E0GaDlQJaDvvo1rxbGtiX8Tgn+ZH5o6ZuJTTzseF+4Gkj+5YYNQxxoin8K
M5BKy85MJ2XTqHwRm6PgMCQs1OQZtUYi4/IdSAPwiA5yIhaJBWMdrarDA0Sn
kNGfJpA4vDkjE2tvP3oxMjFDofP1tgDwSq73AHD80bgtUKQ0eiyevHBxXaSi
3Z1fq7IElAaXVOuQqK1CiRrsQSZHzhKbBMYcktSFKtfxZRqLP1TcFChpy6ns
9pd1GsNV7sLG5uG1A6vmmoZmQWJ1LNvSNLyurH15cetobnU36CtHuNLoKgDQ
gcADBmpteRn+3tzC0kavrNJnbAiYxipc6xo9IJ8AVg92D4JVeHNr193tPcCr
K+tazs40HBiJ7esv2tiSMxQ1T1T5p+PBnrCyzqt/NNf1cFPz5ZmW+3NLbm9o
vrGm/dLG1kPDpXt6C2frHds6gjc2deLEnHUNDr+WL+dlqwQ8CSPTazOozTaZ
3kLcACpeE8TGYEJfwWPPgdlMImGCMGeLeCxGZjKDnoVqzhB9P1FBJ7jDyIdA
FLn6KIc0sZFJaXBfklMyZzfOTa/ZArzS6kwwRS5M21nIK+wfkErlMrkak4cI
i0I11XloFU+GTUIxqmwjIyqgfigumoAVtuzAHgQQ4VoNOL0IaypkzM3n7MyL
KwmXI/qIV3B+4BWYezq9xWR2FBSV1TY0l1RUe30hjdqAa2TZ7J7yihq5QpMT
jjidKDIBpBRgCi4aLlmJAYUfio88J4nBn1hqx2HYwNOcnJyxsbHHb7569f7H
p2+/PXvl4eW7Lx+9+frkpTsHT195/fqbq7fuPXz23e073z689/z9s3tf3D34
7YOVP97v++lu+5+eLPnDi+EfXy798eWGJ49ODa7d3DYwsm73vpnt++aOXzh5
8/G5ey/K2gf2XbxuqeqmSox8jYdhLeN6q9kKA4ACVSlLJWqiZqJlXVBB3U1d
Prvf68rtqmmK+XL7Glp7Wtrzw7ltTc1FoZxNK6Y6GuosUo0VqB4M1RaEZ9pa
zm+fy/EGhTw53CCtXA2SzKUzwONJZ6EQLHiuzToTmNZw/+AyAK9QO2CWmE2h
FecX+lzu9OQURhYF1JeUzy+LRrVKFcrfkUhlEjnoK4CVSCBmoCJaTCANJSuD
KMuTCbwSiSRwpecXf+kf8Qr/c6GTHKsszCg4xoVG4Xjx4sWk+bzmhc6rhXk9
mHJwgE+LDhic1KQ0Fp1GpZGSUpKSSCmoFUIyhZRJy8ygpqeQhXyJWq1FC6AZ
qUnwv3T0S5FRDAfpGVkUht7kLC5v3Hf0dFNnH5MjdQWjKoNPoLLZQqXugmqL
r1BhcNv9hZHShgSvFHqnTOcUKkwAK0AWg6egiUwcYyRTHmQwuVkMAYUlF2p8
joLGoqbR3Jq+2r6p/JpeT6w52jDYP71rbN3BtvFNNT3TsEebhgrq+q25Vfac
CpU5JJSbRTI9TNYCjSPJWJ8bK20JSovdmv7y4GSDf3O7b0tX6PB4KUis+7sG
7u7sBchcXd96bUPb6amaMxNVc505q6qcO3vKUeRnzLA27mwNWq6vq3u8pfne
5u7zq6tvrqm/uqrl7Kr4gYHKnV2FZyfr727pvrmh/d7WnoMDsa0tgaBRIsqm
gubWCbN9TrPMYJIZ7Sh/ZN5/hcMYcMgoXGoqgySUqTKyyWypHPVloGeysyVZ
VCYMlYy0dDoti4IGdQoJrSZTk1M+LsuQ2NKTk+B5XJxKGhydHB6fBnsQBQzI
FL/FKzw8gFfAAexIB3EFvCKk1AdYYc8VWItEs2k+KEAc1YANQ+zRkhCpOh/K
NSTiFgSiX/FKgnvTA6wSvAIM4naxACuj3iSXKqxWu9lsFQhRS2sehy+AH+Qr
A4H8WHG5UCzy+Lw6nQ7+KCJh7cM6FGlBkbeFB4mF9cTDgp8puG7A08LCwqmp
qYMHD16+/ujZm2/ffvmnS7ff3H7+1YO3X285cGx41ZqTV57cfPDizqNHN1++
vPDis2tvv3r88vmbR9e+fTj2u882ff/l4X/5w5U//uHOl++vX7x2cnDlsraB
oTU7d09tndt19vKVF5/vOnejcWRqy/FPsvVeji2PaipkOcr5jmIKTwOsoqQm
wc1FXyYTdUAWsPm97b1+RyDgjTREy8baupfUNg61L1lS3zwzsqy+qGy4uXNF
c1tAo6MsTtaqdSaz1W51jC4ZqIuWcrJRTR4hX9RUXBY0WmA6YbG5dDKDlEmV
i2RWjV4rkQKX4AMiviw7C3XyDTmcDo2OtAh1IeHyOTqVsrqw0GYyUjLSdSp1
vj9kVWqFTLaAJ8wkLjLGUQbKOqfp9UaFQgUjKJGVQ7gr/wmrxDFMItiLmCAP
niZAEgOpsF9ioZs94W9M5E8llkhQqPD8lIRPBWdOTk7G6ya4ZzRR4iwd14+l
AbQpZNS5Hv1n1CmYmCDScEArA7Ask5fULrF7C9Q6ayCnSKAwK6259nBVsLhJ
Z3KrzT53XlV+7ZLcqg57bjn8U2V06zROgcZDl+j5UilHIGRILDxTjKXMB4sy
OY2czRVQGGwKT+UoqM+LD1W0r2wZ3YAFFRCsrn+mc/lWeKd+YA0QDHjlyK81
+2Naa0iisMgUFoncILZGU6SBnPyilgJ7mV3WWWjf0Bo+Pll/arLm0Fjx+Zl6
gNWtLV3XN7Xe2Nz2ydr686trDwxFDwyXzPUVr67z94Tl4zHDbIO3Iai7srrp
4Yb62xs7zq1pPbui+tyKyqNLK/cPxE4urbg4Fb+yqu6T6To43tYZXlltizjU
IlKSWcTSyyUOj9efH8uPlcEzm5aeiZUVXiXE+CIKIzN4fCFwAIAAO50xbzDO
F1klAmA+ro6SyG5IJObAjYE3UzLI3kCeJ5jHA+bIlEKRJG0+4iUROAr3N6HV
Ya4EUgGgcNwC0VRCigUVcAm71ucFFQBKjpcO8Y6tRSHBFiKPjIU97XhZkEFn
o44SRHQW9rfjA6yvEh4w0Gkg8NQag8lsF4vkOo1WKVfAZUqU62eweQXFqENE
Nk8IgopGRW014OJ9lFGbGPm/zoP+ICZhAqYiagEMW9u6Vs+sPXf+4ps3n978
4rNrr14/+OzL11/94Ytv//bk+febtxxvaRo7ffnRzQfvbt55e/fBZ/cff/b0
xWevXr369qt3f/3q4f/+t5//7//1n//57//x7//4+7/92z9evf9idve+9oGh
5WvXLV23+cDFG3c+/XZodsfAmm2TOw/TNS6+o4jlKBX4anmWgmSaECaNrIwU
eHyQsZOJnjguk9Pd2h1y54SDhc3FlUNNHT11zS2Vtc0VNetXTJflFhR5Q+2x
EnEW1Wu2AIVoWXQhR7BtdlO+JyDhKcwWh0KmrIVPaQ0gWNGEmAXTIodOZfCz
2Xw2C/S5xWqHK8zKFho1yrrSMq1YAtoEdI5ULlHLZblOJ/AKRIvVaArYXWa5
2qTUABhT5x1QhB8JTXRGoxnmOBwq8GteJRxZNCKQZSGvYIO/FP4TTGm4hy+2
9Rbeo4+QlQAapl+CV/gdXDgXBjOYFYRjluAVOTOLgmCFqprgkrtEp2DMK1yt
FIYWUD0nFncGCm3OkMaAqijoXIWhkmZrsEyht+vtIV9hLfAqv7YbFJfWGpDr
HBqNTaxxc5QmnkgMdMqS2Gj6Qoo8zJbqs5i8jMwsGNhMMK1UDn9xa6SqF1RW
ReeKrolt7Us3V3atBFI1j6wvbhkvbh7Jj/c5cqv17gKFwStWWlUah0xpklii
qVKfP5wfDxkKDfzmsHkq7t09VHJrWzfYg6Cvrm1qB17BDuLqwur6M1NVp1ZU
7x0onqx2TlQ4lpfb19b7NrYEW3JNp5ZVPljXcHl13dnphuuzTRdWVpyfbvxk
VcO5lbWAqSOj5YdHyvYPlGztyF1T567Jc8moi+XZpIDbvn3X7n0nTh08dsph
9yR4hVUWJhUlC+x/JvAK/liMLKJANOv/B6+IZl7pcDdMVtQ6EPXgkMilMgWe
g7CTM6G1EovLfL4QeIVBBEQirDzkvMK8QqVEiQapSEcR6YSJaNL5RUM5draD
vgJA0ajZ1CwmvMIx7kaBY+BxlT9U9JLJBVhhMqN22fMiTaHU6vRmuVwJz51e
q5NJpHCNUPNNCh00J/AqWl6bkYUCFShEayBcDv/XRsTCte+FZgUa5JmoFg38
iu6evi1bd167fvPpsxe7d++99+7Htz/85dm77x8+f//plz+9/Pz3e09e65/a
evjMxSv3Xt24+/nDB1+8efnFN++/+PT92/e///Z//vsPf/vL9//y8+9+/sO/
/PT7n//057///I//+Pxf/v747acr12/sX7H67N0nz7/7Y268AyNLYAsLPWU0
c4znKufoQotI2WlpGaS0ZNBX6CYSvKKTaa11raCvQv78pmhZR0V8efdAb1Nb
ZUGspSoesrvzPIGqvLziUKiyMFpTXJaStFgtVa6fWu0yWmR8uMsqPldQFsqz
yTUcMAZpDLPGTKETUSUklMOVSc4wWi18sYxKY8n53J7mFr1MnpK0CHjC4yHn
VW9Tk9fpgEsE40AvQxUMDHKVSqFGnbPnkYWbONvtKDMXd1n6iFdZCyoqJFII
E153uBdElZIs3Lkek+qjSIaFvEoMdQrRUgqH1ZEXBKPiwrlwNswrtIw+L7Ew
smCGIhMmSCIKiDy/RgmveSV1oUiZwewB406i9Tgj1XkV7Tp7RGlw2QKFgaK6
SHVXQbwHwAW8kmntcpVZpHGI1TbUZJAtpKr8GYaidHWewJiTnMUnkelEKTCZ
2hxw5dYU1w+Wd0zEmscAUPG+1aCsQGKBMdg4NFvevhRMRVderc6VL9W6pGq7
xuCWKowCfXixwOHwBstcqrCWWx80LS23bWjPPTxWfmtr78M9QwCum5sBVu2X
Z5uvb2w/O1W7qy9vfZN/tilnQ1v+YIFuNGYCrQU/fmJZ9fOt7cCrE8srL01X
X56sujBVB0Jrd2/eVK1jrNSytMw+We1GIRN1nsqgSUFPkWWTaypKdx88OLVu
4869B72eUHoGKbEy+Fu8gh0UBTYVE+2QUAjcL6sKJJD1C3uQqNhBpWWDdSCW
oRrsgAKw9fAKctqCuOIUoh0hnt3YqNLpP/1UxCKgHC8IYkzhNl44VgrD6r/k
FQuV0f3QMQcbgGAnYo59KDtDxDMIwAAkPg8fg2OUzkOUqcGpiGDogd4z6g1m
o4nD4aGkZrTiz4RJJ1Zem5lFh5GZRUHV+jLJ/9RO/yQSsSXyQRZCDD0FJDLM
7I1NLbPrNm2b2/P4yYvTZ86tW7dh7cGn+y6+O3fz8+v33j1+9eWjt++3Hjsx
OLvu4NnTF27c/eT20zM3H5269/jap59efPn03OMH9x6evffg5MuX5z5/e/HN
6wuffX7n/Q/vPvvhm6v3H0xt3Lzz2MnrLz67/vJ9y/jqvRdvV3UvE1gjXGcJ
2VAEvMpWOxelIZ9kWmoyMlLS0vBKCjUzq6mmyWvz+T25LbGKxqLy9so4wGrv
1h3DS3p7WztGe/o76uJDnV0jS7prYsXRQLinpf3UwSNzW7bVFtcYDVaZRB5x
+XQiGbKesmh2oxWkNYWUJeWjbE8YG0azSalUM2gstVAA+orLYCQvWszlckVC
Plz0woDf47CnJC/iszlKsVTJE4EhqVNqSfMVpYmriMqwezw+YD52EP6aVwlq
LfTDJyZHvN4BhIHjlPmemL92XuG7mQiWyyJK9yd4hf1m8LHEYMYAxOZDGlF0
CYw+1A4MlQn40DM67UOqGu4Chh6VYH65zZVDoQvpPLXCEs6r7HTn1SiNPp0t
6ImUB4oaIhUd0doeMAyBVwAxFHmlNMtUVi5bwOQrs62xTFtVhjlGNxZRZS4S
XcSGES5UAIL8hQ2F8cHy9uXNw+saB9fGe1c1Dc3W98/AOxUdE2Vt4+GKLuAV
6Cv4sFzrBF4JJVqhxreYZ7U6vFGrPKTh1+VYR0osM43+Xb0FF2aaAVmwP5gb
uLej78q61vOr6g+NxOZ6I1u7Cta15q6uD/blaYeixpn6gEfJBtF1bbry5vom
UGLX1tQ93tr5yaqmI8Ox9U3eoZixK9/QEzWPltpXVXs2NfhbCx12CV0vESxf
umztxi19Y0tnN2wtKCzBvErEX+HFQRxE+lu8WiCxflGGjrSgrNDCiAY0f1GZ
GCY4SRl4BTc3Uf8KIwsb/phXMNhwnDnmD46/wiDCWTOggrDbKrFomFg3/LAL
5VyOiJUNZoeAxxUL+FJ4RyxSYBbhTgTYx4WBhtcNsfGYhVp0IUMDJVBQ6WKx
FHadzgCTuEKuwWYjDE+F2hDIjYJhCF8+C7V1TiVTqAlXxsIFpgSdsn5ZWIb4
J1WnN9bUNrR0LOkZGB5bvnJ0bGn/wFDJ2lOm+uX9m05ef/bdk1ffPn/+/sCB
M5s37zt+5f7xC9cOnrs6eexC9a5TTafuDJy8ufropfMXHl+5dPXp3eNfvtj/
5sn229c3nzyxZcPmVa19/WZfoKlv5Nbr9/sv3a0dnJw9dN5Z0kBX+5iWIoaz
UhKoZsqMixYjV2QGUTQBPV9E/QRmFgP0VdAVAnsQeDXdPzrY3NHX0tHf3hUN
5daVVTZV1QYdzsHOroDN3lBa3lJZPTO+7Mjc3tMHjsSLq+HyAuodWrNBqiSB
KcRkcalERzwKXcrhi1lckPUOi9Ws0roNNjDncpwuNoOOix9KBHyX0dTf0aZV
KtLTUmBmMqq1Dq0x7PZZDRbC7iPP+wCpYHW5XB7gXgZKP/+F/+qjOM+P1mcp
RK1FjCm85IGphQn2EawSUzMepXAGHH+SaBudCEnFUzaGFd5QZBdh+qHkNJgN
0v85p2PLAn8NeDVavGqdPTWTpbXlemONFW1L7YESjdlrcIU9+ZW+wrr8qq6i
eK8rpxx4pTG7RUo9X24Syw0ctpAjtbA8tRnOONlWmmGoYJqicksuKCWu2MiW
2+W2aKC8O1y1JNowWN+/qnl4bW3PZNPQmrax9dVLVsQahnyxFnu4CvSVTOdW
G71aowdOqzQEMsQO4FWeRRbUiupzHWNljtnW3N19hWDW3dnef3cHKhN6ebYF
9ktrm4+Ol+0bjO0eKJ2O+/sKDD0RA3weqKVhZaxrDl2fqb6xoQmUGOiruxvb
z083b2vPma51D5XY+mMO2Aej1vESy6oqZ2fUYhPTbBrV5NSqsYnJ5VOrZzdu
KSgoA97jYAa8J/QVHHB5gl/zirbAJKT8VwXofo0s9Dhn0bQaI67TgnxNcg32
TKbMt5yYrzmTiu8anBx0lAIkGYEgogXGBzc7Dg2FL4YK6bN4HBBCRAcu7OBK
sEsokCV4BQd8ngR2eBOUEvKZ8wTYwZUon4vqpoIRwuHAH5WYFhFpyVSBQATP
gkqtd7p8sONAepQVzhWCkcvkoLVOChkF8JAIG3nhanjiMcFxXxiJRBE5KjZk
4FRqvUmq0JodHjAwHR4/kRKu3/Po8+FdJ3d+8uDmy+/uPP76/pNvN205tWbD
0aOX3uw9cm37wUsdO86qVhxUrb1YtO3GymNPL1x9fff2nftXdlw/MbhjTWzp
QMHy8c7+vp6OwaFQrKyxf+zVj3/ZcPSTpqWzk7tPy33FEmdxtr2M5Y3zXSVk
tgQ0DCq9mE6Gp4lIQUezfzaV2RJv8dn9uaFod1X9SEtXxO4ZbOtqra4baOtq
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
VVy6jFmnk3NNZp1cY3D4k7FUCeaITK5ms/g4+pqJWzwT/Ao2YFYAUwBWWB7i
rGcO6hcqKOMV9mUx37qwjtdJRjFUtUQVu3pWrrFtZHbFFU3DNZTL9TKlTqU1
gYKGA4XaoDfZzTa3VKGFT4CNDoXIesYCE8YGhil014iPAhsbJRm/aS6D00Vh
nOCqCDDwYJSabM6Tu2dOnbkI5Grn4s3PfvzdT//xn//0T//pnRefbOxfPHP1
3vbRtYVTBzvnr37w+Tfvvvz01MGFTHP7+NzKnYfvRuIZuUJjtThNJotCoQIA
xI5ckQg+vTQaCe1uLw4PdNvtdqLhBV+uUOkNFp3eotQY4UvBFwHYgT18NY3e
ojPa4AviDtGARSarC/ZagxWuABwDWL149emp7f1EurCxtQd7eCaIwYoTgFSV
JyqJMtFkCsarqqoToH0sZqdMqoYxDt96fHz87p2HY5MLdDpfIdcKuJKaapDh
NAqN6/TG3ImcKZgQmd0rZ69Nbp7pnlnTeeI0sYYq0NF0MZGryBRrgbYBXqEl
wmp4W6JDFqEHKyqqnTZvS6ZpdWRmd3b2zuHhjdOnL25ujnW0zw30t2fS3Y0N
vcVi1uvrLzYOFZtmO3rv7J29sLxxdn61LdckE0hUCq1aqZOwBWalqjWXFXNo
QNrAvDWl0gGDcb67tzEQak/nJvsHVicnox4vKFOg7zqpzG009be3Oi3GVMBv
12tppBohm63g8TvyDelgSEb0VzrmqSbDPQKKhX3guM4MzjgASBEKhUREyl9s
RzlMFCMSIAwWhnBzMbMiTl6NQQYwCtcdAvWBbRY8jrNCdDrd3NzM3PzU0bn9
u/dujo+Pwjsi40KcmcVigEhMpVIymQzjHgGDNeWs6uO1T8thrqTqE+5Q5vI7
3+4//GXf8jme3IACPBio9AzQJIFEzhWqRFIYTqCeW/zhvEKqAbas6z1dEZ6u
9g+Sw5PM5AxFH6kh0Ug0DoUl4EsU0VhidGwC2LvK7OKIlQZ7MJxty3dM2KKt
0dL44OK5ZMccDHaJgmhiyCSEDJtfz1cqXRmuo5kVGbcPX1ZEOkk8Hc/T6imM
nhrrn+1ssEvZEZMiY1NeWRkeSNiN9AqvnGURID2YNEpBEmZM0rCa71fyPAqu
hMOUcRmASNM55/OTrT9eHv/h1uKVhRa/XuA1CKxKpoxWoayvsnEZaZux4LVb
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
6JIozGKVRaNzIa+7SM7jqQCvUPCR3spVx2i6hMzdKg71kBwtivjgyoUnn/7w
+199+93fvX/pxlLvZNo1EjMvl7yHo5n1Vv9Mxjkcs8/kvCWzIKNmDcTdvQlf
wiBzCuk5rzUf8c2UQtsdgZvz7a+2ur7caXl3o6XLJQfNeHa64fHu6GKDt9ur
GUw5Q0a+U8oyC8hKZtVwV+npk8c3b9+6cePGrWswzy5evHge5AyRRskDdYXD
RMuFZVBbXiJECuc+wwGuiAUsC/uvUKlSOqfcW6FccvY4v8JghZuAAFgR/JyH
4xDgpgNnJpPrAA5wI3fsv0I0Ca39sVDAkskOSIUX3fABqiRDRGEJiNINsAG/
wsIQL8zB0EWOCwFPxOMC2sD0P7p29+Z7LwGs7j97/ez1L4BTSdRGiVLb2Tc4
MDrROjAyMrt07e7jo0s3IvGcwWj1+8HO2zUqLdAPtVLV19MLxCkZT+ByWxq5
OBkN7WxvwmUEwL9w4cKVyxcvXTy/cXJtZXlxf2/32tXLhwd7B/unZ2emopFQ
MOALhwKAB3AMGxzAI16Py2NWJTcvP/zlv128fv3So/uvf/nbD7/9/ujm9duP
nl64defM1Wvre/ubZw5PX7i4unt6/9Ll5d3dvUvX4Ltcf/Dk7LUbh5euXL37
IFlotbp8LR3d4+OTs9Mzk+NTc/PLs4unUo2dTK7iBJUn1LtKwwvuOOCVop6v
aBueTJQG6FIThauUKQ2NDcXWxkI+l0pnU5lsA+BVPpcpNTX3dA84zM5SsnB7
/+zuzNLZxbX14dH+QmFuoLchHOhKJwfzudH2ls6WRo/FFLF62nOdzc09i3Or
/Q0tqHyfSGUyuLUqs5gr5DHQnQIjAiOED8RYKLaoDQ69RS1VCvkitNzDQLn2
YrEUsMihNQaMlpjLY0Edc2VuvTFgsQRMpqjJ0p1r6Cg0wfgDhgPWYWCg4+K5
3Xce3lhcmCY6qPExvyLSk9EPTiEkiiezj0EWHafJV1VVRcLp1pYemVQLEhvE
IG4QQGwkPJ4xXuHUD9iDEQQJiXOrcSns6upajIFwTlzlGEdKAyvGCYm44QiO
t8f1Q+CD4faFIpEIlXpWKrVaLe5gmCoUTh/dDWUHtN5Uz+xqx8gKT2qNpRsi
LauhYo/caBJLlBq1GQBTLFeJlGYQdHqTM5hs4ul8VJmLzNdTGUJUu5XCrK0D
sOX0Dk794sc/re7f6J45XRzckOscJmfYF807Ayl3KGP1AI9Jml0Rq9X//9H1
3m9xJNm2aLdaLQcIT1FFee+9haKgCu+9994LCSsJIY+8QSCMhDdCOEnItp3p
mTNnzjnvnu/c98P9vvf3vBUZIofumZu9FR2ZlVRlVUasWCtyx95cgZjDE3G5
CuAVcTKSaIN4rjBderg4SZHaFOGrOi31u/Pbnq7v/Psvf347Nd4QMJe6FE0B
Y0uyti1ZMVZsn6j03G9Le9ye9vx8/uVKr191NqCPrk8z5Vh48co4v0nWGlBt
jJRtX2nYvViyO5p7pc734kL+r0/6vtxqfT1SvjBUMtGe0eBXtaVast3GgFmu
4AQXZvlfba4/mXw6Pzs3M/l4amry0aMHWq0WvySzhDmWel79Aa8YVACXEaNy
VBgCr0Cn2bjZR9N8U7yiWo8yZDr5Cdl27Ng3bG4junKKJs86fvwYg11kbILy
YpapBuHjdEYbqA7gEsjD58XhOlChj+EAayBU6AsUzehBEsMhlEmkFRVBKCBA
li9OCGReuz/1cmN/8sX65IvVybmlxEA6GMuJMyFCqcySkNjS1/907mV9U6dc
oTVbHFarXSqV83mQnBxvfMLCi5fbW68b6uoBVoBBrUKan50xPTU5NTU1MzPz
7NlTjADTU0/mZp+DVj2ffvbo4X3Ywwf3Hj96gBJQdvfObZSs3b5148b1q5dH
hr39N6/MfFxef/t4YfPLT//rL//2/669ep9dXJqUmmFzxXu9vsTEJLc73uFy
6kzGzIra2Y2dO8/nhq/fBIjVtLbgy3PieIkJyYz5PK54nzcRF2y32lL8Aa1U
DPYbLVBjqFY5kolCPBGcUliZUNb+vUCEGx15KpYnUPIFsUqJMCJOSnI9iMUx
sRwujy+RyEB7ilPSr/ddmL516875gYsNzU15+X0tTQa1ItOX1FJcmeHxgClp
xAo5T3ah4/yNofHntx5WpeeatEalXCMVK0RCGSQhyQTBrO+Oxg0KOcuJiMEA
b9aZpAKZQqxEScNW4KeOCIsEoYUGhwHKYiM5CvRmEU6TGzWGRLc33uGJCY8u
LMjZ2lh+vfHyzdbi3uZia21VVBhZQo5RjzZFkiKQSwKtc2KIoeFR/k9Dj9Lp
KcCLVm3T62zQgwBAAAhlR2d+H9+PRr2miUJEArFBpyeJhI4fO3H8++++Pfbd
t/jfieMnvmftO+LIRiokvhDZO0ZO/v47ks7y5PesgaifOX2SEm82gFu0UNU9
eteUVF7Scrl54IbEFO9JLycZIjLLDZ40ud4l09rlOodUYxMrrRKVTWLwyEwJ
5vh0EiImhDzACg6LPBEaFRbJIw/FomIMZldJdbfTX5Zb0WVwpehsya6UgsSc
SkdasTVQ4Mko9aYXO31ZZntSdCxxNyLP1DiCEI4sWhl/Vu6NkSeJTFmuol5T
+XBsVrcsu2Pw5syPH35de3K93CmaaMuvSbWnm2UVLmlPhulCkfdRS9rDjrxy
j8rAOWPkR+hjQxyC8GK3piReqVHFJphkz/oqxkvtTS5huSamya++XG7ful67
f6N+ZahodqD4YnUg36N2qPh1mY72ouQUk7w0PWVlYfHu3fuPnjycmBi/cxv0
6rbZbGZmvKO/rh9Ebw8jzpNBwWcJUYmKoVNYAqGUkisQLSYvvIi4SlKXeCaN
AqXNbKAGxkPvH9Fl6YyBUChkkYqNvX80vAZ9dkO1JAZBtC4MPRj7YHTKi3mk
SLKfEPeFyJjDoKPh1DsLkIWSPjqM5sSQWa2wcPK0QCjuvTA0tbB5d/LFzYdT
D6fm80sqzpwNDw4LP3biZOfw+L/9z/8BiJnsLpVaa7FZdQY9Rj0Mf/is5ubm
3d3d169fQ4Pg2ohnsoDb1tq4vra0u/NqbXVx69UaKthFHeXG+jKM7q6uLKBc
WVlaXV1GubS0AFteJkdQ3ns2eeXOxOOll0sf3rz9+28bP3/a+8sve3/+uXdo
9NKN23ZPIhD1m2+OE5fO709IVKqnL5ev3Xs88fTZldt3dCbzt8eOHztOoqBA
9p44fpJGtT+OPsRED7MCdg0k6qbJ7a/pGKzuOJ+SX1rR3Hnj0dTG9i9jj5+5
vUkxwVEkJsOpYye++ebsydDvjjFrfo59S0JvhUdqZKo8f9q1c0MzE3ceDI22
ZOedq609395qNWj9bo/PZAcHtao10aGRFq2lu6V7uGfw6sBIoT9VHCfickjM
5K8znOTZQmh0eBgHY0poGFALBp0IOOJjMOHEAaNwK0NDws6cIvEHgFRREdH4
LjiC+4sjqOAIYA0jCM5pams/+PB+fXNtbW3l7dv9urq67777nmnAXz0QmCRr
JAIM0JIk9DnEq6OJntHYjAaHxexWyDVM1LVT7AwG68BwNFA8fhC0PYPBwOPx
0MiYdPQRdMEOfVpEVQP1q6EED8M8lAlGWPQZsZBke5JJpHKpTKFQKZVqlUqj
1eqNRjMGR/B5jEoZucV9o7fKmodbB+9wFTaFyeNJKfCklVl92Vp7slTrkKit
ACuUFK+gEbTOgMFX+E2Q6JuguDCOiDTpsyH45WRyJUBYLNNW1J9/NLcXyGtQ
mr0ilV1rC9j8+e70EmdqkSkhgwRAlptjeIoYrpgoqWheGO4a1KA3V2TJOCOy
fhupCZZ44zw1XH+bJLOravDB89WDewOt/QXuGw3pSYqYFL0QeNWdpiuxCXsz
9C1Jiqp4RU2yqdJnKvFoC2wKnyyiItEcFxuq4kUMF8QP52lvVrgWz5XODBXd
bUy63+R71p76vCdntNiRa4xxS0KtonCvMjZRxTXyQjMTHOOXLkI7d3V1tLc1
NjU0nj/Xb7FYqM8JXT94hmRXCKUUi8UrQlIEEopXcSRdiQRMJ4bDJfGyDvGK
5quiMwCH6WNOnz4MFEzxCsM3G2aWhazDRaYnWOCiC8RQwYWR+S6FlvEpjaCL
8TkcDmVrGJEpZGFcptmdDnM8EbIXFhEOvOIzF41L7RsYfjq/Rn3dJx5NVTW2
f3s6+NsTp8Fk3v741x/+8p9peYUqnTE+IdFoNMbFxeFz0TKBTufPn3/48OG1
a9f8fr9SqcTPlZGW3tPVff/uPditGzeB+ZCDN6/fQHnvzl1qqGM4gKEC4X2P
2WgF7/aI2QChXRcGh65f74foe/zw4r27154+GZ2Y8GcX1LR2DV6+XlHb7EvJ
0hitSRnZG3tv13b2n0zPlVbVxomkJ5jYxRjijxP/rG/ogmgm0jIJMgcEcNic
OplEJlXlldaeG71++daDjnNDDZ19Va3dDXWdN6bnLlwY1ISGSaNDjx3/NuTU
2dATQaeZ8HS47ce/P0mWrcl1hSnZ7RX1vbUNz6/fhB7MS/Q1VZRr5BKFSOQy
WsxyuVWt0ilUfm8yOFXAm1yRXyTnxYWQFEdBoAwYSoAzxCEt5Gx4SDCECicy
AggCvIqNiqYPnmEkzWgkUe7g1eDMNHrY2eCvM6J0noGuX6YpaHNKyhs6uisa
25p6z/cOk5xo351AgwtnM6KinZC8acQ5WQjUorEX6ONCqs5ohmWT0alS6tFJ
Gdf3k4dsP4TFK0YxfMUrQBOkq8PhSEpKslrNNpvFCqCx2202hw3/HA6COPGg
xN7ExESfz4fTUCYnJ6empqanp2dmZmZnZ+fm5ubn55cUV5SVVlVW1NbVNjU3
tbe3dXd19vV094+Mjl2deFrTMapxpPGVZrnOpjK6bfHZACW11SfTOcUqi0Rh
hokUFlhUNFesd2c0jMbYC2PMGXytSyiSRUeEcGIF0IwYbTk8SX3HxZzybpEu
QWNL1Fj9CaklvuxKY3ymzOABYVPpnBK5IYYnE0rU1HMpNIKj0NvtvmyR3ntG
qg8WGGIUXo23Vp3apUjvcJX0lPeN3+ipmx+pGy5yFTkVLVnxF/Ld53MsQ0UJ
gyXeunh5XaISaNad7WjPsLWm2dI1nFKPtbq8pLYga6QwcbItsDJYuHOx4mlf
8sFEy+61ukctKSMF1p4sY3uGtSndVukzpJnkAb0oN17fUJzV09mC8aiysrKs
pBTW0daO3xl3JzaWd5YRgOThYOhZVhIyE0JcqgTpg0KIQUYP8iKZZNzBh1lT
KV7RZFWUbrGOK3SSEw0A/IrGV/wDUh0NBHTiMKcSnbrEyKVWa2k4QTQo3AgI
/yAmzSUdlylesQFnMJQT100MshEkuyeNgwO129bdt7b7/s7T2fE7j+89m88q
rjgZFh3IKVx+vf/bf/zv6qYOiVzjcMZrNDqj3qDX6gBWuGyXy3Xnzp1Lly6N
jIy0trZeuHDh3Llzw0OXLl+6On7lBsqR4cvYpTY4MDo0ePGo4SBOgI2OjMHo
7sXRK5cujqNMTcuOTwz40rP8OXl5FVUos4vLKmobp5c3QQKv3XsKaL3x4Bku
++n8CnZbevo0Fhtw//ip0+if6EvUx4MbS1zoQWKIj4qMCCgwHL1KpxSQxHwk
Wr5AeSY0Gp06Jk6UmlcMqlY/ODLzYHIsK7vQoMId5Yvk0RzizioQxNFFDVqN
0ayztFQ1NZZUZ7l9nZU1bWWV1wcG7l+7alIpwoOC5GJRqt0+1N5eVVAY8HgF
HOLuLuXyYsMwwJ8MPnUyNCgYt4Y8vQUNCT1L1gyfDZbLJBazEaVUgmFIJmG0
n1KuwA+OEvSYptClIe6pY94pJm87bodKpQK9SUlJOTc4mlNaBWGbX9tWUNtq
8/rRIAnH/hqmL4xOkoPdAYuIl+DhkufgI0lscUQmVXNjhXQtM+XzJ5gMFGy7
pXhF56+imGVoCV5fS1trcWkRrLC4oLi0pKikuKyspKKirLq6sra2ur6+trGx
vqmpobm5sa2trb29vaurq6enp6+vDy2nn9kGhy4Cmi6PXbt67db1GxM3bt5B
ee367adPn926O2VwZ0eKLUqrD8RYbU7QmJP1zoDO5lMZPIRZyU3AK5IVQmqM
4QpDuKrk8j5FUqXGVyTS2KAjYqMwOJD0l7hohdaclt/Akbvk5mSXPyc1r9af
XWVNyBapXWK1w2TzGS3xcrleKNVx+TIujzi3B4eEm6wuDl96IiQ6El3CmqAy
+iT6gMiUrvUW6tyZtoT0Z2N9j3uKy62xlYnapgxnd7qxP8MwVhmo9ZtLnPIy
h7A9VdeRpq/yyPMtohQVN9ukfnD/9oNrl27VZS5eyF8+n7t6LmdtLH9nrGq6
PW0gS9ebYRgo8ADfqhN1ZW6lSyrwKPgVaa6S7AS7RW2xmQ0Gk1qpUStVLodT
rVYTn3DGdfNrDmLA1eEjQmaN89eFyVQYUl8sGl38a2xkZgxi8YquJaR5n48m
JaF4xUbt+Jcb637MOiGjLYlEEhp0CI2Ixvegq7MBVhi+2TwUdHUhdXgggUYj
wsl6rrOhXOLvwMkvKZ9d2bw/NQfIevpytXPwUs/IlXc//+Xgl7/WNXfKlDro
J4yQOo0WXV4kIJPAuOn19fXXr18HxRoaGrpy5QpYFsrxcZRXYahcvnxldPTS
xYuXsXvp0hh2x8bG6atXr+JPb964cWvi9v07Ew9gt2/dg9E6Do5fuTk8MtbY
1J7gS7HYPWqN0aC3WszOlt7Bx7NL1x8+G7vzKK+y3p2SxVPoOGLVqaiI79Hn
Y6LPREaEMw9FZQq5TCYT8Hmk1ytkiQnewtw8t82lkiodZtxqDVBLKlOjKRLJ
czpIYzCfGx7rHxzoHL966/K1O+XlxRa9VCwRiBVyuVSrUakU5AEuRIrb5VVK
VAkOj0ooK0zNfHxjwme15wcCaS6nghcrxg8bcibVbGotLs50u9GGVHFxuEmC
8HAVyRsUHRsZRjCKmbaKwY2IiOBGkelFgFWiN95qMWFIMJsMOq1ar1PpdRqH
3ep02LALKEO7xGk2q9nphFCyJyR48AnEmdyf5PXGZ2Vl9PSeK6uuS8svSS+q
qGzpgDAlsV+CzlAWRGc2KMhEkA8nS+DpuuMjK2vIXHosRwD2hXGQRktgB9Yj
YvArXtGM3vhmBQVF9+/fv3hxBEb9pkZHh6+MXRq/cpka6nT36vjYjRs30AJQ
3rp1a2IChPsOeb5169bNm9dv374J/n3v3h0YKrdu4axr9+4/vnp7UqjzqZw5
WleGyZtmdKdqbakGR0BrTVQaXDKVVaIwSpUWkdIskBuhECEbTYnZsXKzx5fq
cLrlciWUIDSIGjdSqUzJzC9tPJ9a2M4kAst3JuWrzElilUtpTDDak/XmBKXS
KJFoBFJ1dKyAw6QUwW+Y4PFCvULGVhYXm42W70+FnAiJPEHiBIYn2h1Pxsa/
rE7dasps8ckqEpRVPkNrsvp6ZVJzwBDQCrNM4kK7qCVF35VlLY9XZJtlaQZZ
nk1eUJCWleTszbROdaS97M1Z6c5ZuJC11J93tch8ucj2oC1nuNhb6VEU2aVp
6lh1dLg+NjTXa/C7NSePf3PiFGjMKbIi+LvjGMXoJCRAgESaYpxFydh9xKUB
YEXX4NC596+LBw9dTNn1zpQ2s3hFM0ewS6jo80GaLuTE7zcWrGi0DSoMTxxJ
4ozWAlpF15/izWkAInwQBSuGXP0OrzBMk1YXEhxFptyjccW4SLTwJ3OLz5fW
H0zPX7//ZGb51Z//83+v731Am5dIVTa7Bz3UqDeBXPHBN3gCvDl+Fqg/nU4H
hWg2m1GSFAlmMw5CAjidTg+zgYNRLcAKAWwQAoFAgGqBjIyMrMONioK8vDyU
BQUF5eXlhYWFEBEQFFq1BtABsX06LAbabW333ej1icqWLm9artxgj0/JNng9
GrdD73ZGi4THgs6cDAmRKJQKJen46P4qpTwpIb6uqrq2vDLVl2xQaZwGo1ws
Uco1gjihTCTmcTliCYDZVJxZePXR45raxuIkf39PZ0ltjUIsT7Y7CYBotPhq
ZrPV40nAWKZXa0JPn44NjSjJK4iLidSJhT6jMUGjcmnUTqPOIuBrY6LVMVEm
gUARHa3ixpqlEnlMtELAE3IJZEWFMdNW4eGciFDwLvA3gFV2VkZJcWFZKeEm
RYW5JcXQR4UV5aWVEEklRTDUqyrLUZaWFldWltfV1dTUVMFAYIqLC0tKiqAL
qquri8rKC8rKOnp69UbDyRPHY6O+xhihqbfp08DDx4LhLF6xkRbIOCgkGTGo
7x+7duyoGGQC1ITRt6UhRouKSiDnrwCarl66PDaCcnx87PqVS7BrYxevXh4d
vzRCDfWLo8PULl0cuXwJjOoiStRHLw7CRkYHhkcuwIaGzw8OgXT1Y+Abv/3E
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
1KHvkI9n8PPV5tcbQY1Mq1Ow2n9PcekoNFHUYijWPwxHvp755uP7jx82d94k
ppZrrcySZ3tiIKc2o7gzs7Q1kFsu0Ru/PXP6JNQuSQ0TmVfX2z16ly+3TM2u
QE6+ekXuE7me/fcfP/1ktblCgiM4HFF4tJAj0hrdgYyqvvSq7syqnqzq7szK
zpzKztzK9oySBo3ewuGJEpPTtl7vr62/hqHJ4Pq398ns+u7b9yhRh6EO5rXz
9sOHH35ZnXk6XOa9UeuvTjYVuzXnc60P6lMetGWPVCbjiE/FTdUKxKe+sUqj
q3yGg09/woB4oyF9tr94pNjbn2EcyLbQ9YbtKeR5YqFD7lPHORUCg5jnkAvw
5+l27Yu5l1NzS2BZ89OT2Kamnk9PzwATcAvS0jKg1nHXMLLE8UhAFZo84jCU
cTjaQwwnLiKSQxN+sTkKzzJ5Pyi5olGRKbNiwCqMWYd1lq4YBS1P9PrR39GL
Hz54ChRCB4fRCvo4OjuOo4KeDkOXp30fr+JPcARdXi5VALIYThURdBrEKYbP
E9DYOEAnOt/O4hXJu3rqNI4z4Ha6ob5l4eXK1LPZly+WYS/ml+bnFlHOMTaP
Iy9XIJNZW1xYY23h5erLFyuwFxDTL1awS49gd252kRreDWjMQhxBwsmZyafP
6Rc8+u0mbt+/dfPu1fGboyNjxDu9sQ19IS+3CHjucSey/fQoyYHR4ZtiFDtP
ws7u0jo9geoRgkh4dQcItQMjUxzbRBrSLn8UDSj6sTh5lF+hAiGIjrCxvgpk
mZl9OTx0qbyozK7VpTkcmU5njsuZ5bBTvDLKJBqR0CCTink83AjgVVRoMGgK
yPCVsRvo7DAKU+juFLtYHnXU6Oey13YUt6nhz3EaUAtDLcxkspCweyeCgDxo
qOBI0H00+SkQjBdLopmBIBGnlNNB33xzPDu7+Oc//Yffn4IxFO2TXV9PGzyN
HgOwogEccA520Ttysgvm51+iyzBT7qsMs9omvPXIFQLeMQrA9nbfAYgoFgGp
js5i/QG1/nHO7gFu7Ov9dznFrWZ3ji0xXaKzq8z++ACZYD8dwfn2zMlwTmSc
RBQcGhMSwo0QalvPXRYpLFX1rRCSaxurIKHQla+2tr/88FNpWZVQotSaHCKl
MSpOEcqRCgyJSQUNvvx6Y0KOLbnQkpAhVFoAZVy+JOhsZEV1A/AKzR54hVEJ
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
hy2sbtHALyT2y8YOjQMDo/XFtdeo0Fexi5MpXlGYokgFVCTMbfF3Rr8UvtHz
aTCulxS4Jp/OAK4fPXwGWGanlShM/WOuafctfSDO+K19fT5OewRKHKRPz+kJ
qNA5EzrNC6M+b0wn+rT/5gMMHeRoff/gI52soPMVxANt/x0Obu8dbL7exwi7
vgFNcFBcUkETZin4IrvO6DLoXTqdW6sxy+VaoVDCiY0OI8luiFPTmdM6nQ63
PgQyLSL22TPIqO0NMEaQkL0DlHt7H7e3P+zuftjf/4SOhl3UUaKOI3tvP++/
+4Jy9w2pv33/47sPP705+IGe/O7dDziT3KYFwnhdrqToKK5CroEAjIzg0IUM
ZLXCseMk/040h88Xmoy2EyeDA4HsL1/+kpSUlZmRd+L7M1CROA0NHsN0HE8c
HhZ7JujEN99+c+YMiSWLHiGVyiEwgcH+1Kzlta2NLTKK4Urog7ODj7+++/jn
g0+/vf/8l08//u2HX/7jx1//E+WXn//++ee/fP7p3z79+FcYKl9+/vrqxx9w
5l9RfvjyG8offvn3H3/9O8oPX/769sOfvvz6X12D14zxmb78uv+fq7fwj6vJ
zoSNYm5mNYu6xUyWxWjJlkm2ZZRllBlly2Km7hYzM8uW8aV5hzKbZDIzyWyy
YfiSbDbft/snfE/dI3e0o9/xdd3q27cvVD3nOVWnzgk9etwYlxsWkxUckWmK
yIxLKQ4KT485WmAMi3EXy0OiM2E26kPSzJFZTa2D29vf7Xz46crWt5sbH3CS
+u6x4MQcVWA085OPzQ2OzjGY42Vas0Dhp9AGB0em6AKi5Bqzp0Dr6Co8e+EG
bmFiZhWX9PHbn+LuwKy23+Oaf4YLtt8R7W5+/On7D998s73Z+fzW1XRT07W0
+frSj30V39puFieapDyZgi84HqOafHmi7Ig+SS25Vpj+6Yf/trz15c3Vgt6r
Sa2XUx4fi6jM1WeH+11NNduuZ4/dK3pzLjUlQG4QuAfKBcWh3qVF2aPjULus
VU8ubMwsfZif3Z5b3AJVADFAz+ofGNUbAlicZG8eiDTzauAJaL6PQx53mjFB
JcEazQ+SVbg3xwTZhlwyL1cvbwEN3Xt5eANV8FF0VHxP71C3pbe3b2hoeJxM
sN3ePTpLvZvMKDZ8xNlWUBw4Ese3tVvQx4sKT7k4e9D4GMvcI2ErdfhCb1wL
LorFamMBRd28PMmfmQtl48mc3gXePrFxycATnJDABPcO6AZTWtz48OG7X/z4
q9/++Ks/+8kf/foXv/7tr377F7/8s9/98e/+6o/+7Pe/+NM///mf/O5nf8w+
haD80z/57c/+9Hc///Wf//I3v//Vb/47BIf98td/8cvf/OXPf/37n/3pX/z0
T/58r/zsj3GGv/jFn+JUv0cBu1SDI3/849/95L/99odf/Qby/R/9GeS7X/6a
tC0JKd93O5/RQt6++7T99iPVo4xKqtnZ+Rby/v13Hz58//HjD9hi9+3bL58/
/4jdT59+ggK2qKdjPnz8FvLx03efPn+PLc6M3c9ffoAmhfbc+fg9tqRPsUXl
+0/fvfvwDcgA4SRYem5uPvo4aK1W5Qv6JOZ5sfDsPp5iH5Zb0MkBNrgPhYpF
gwBeQaF4uXp3dPQygAIJWWMcAyC5uflxbW0HmEl3hHux8w1sN3Cn7z5BUFjn
djffftzgbh8XQ/wEoAcABB+4dPk6kEfOMiAbgTA0FUgpmDkTzxktQSJWALra
23tAnkUiNaxFoBmle8bVQrGikWvUBooiyxaRuXiCWem0/ga9SSHXJaVkTIDx
zjHijZYD1MIW+Akkh8BQsjss4WpxqZs7X0gIl+yoRVsqkOCAta3PWzsfl9a3
tz7+0Nk3aY7OOHrsSurx8pjM0uCk9NCkTK0p1hiSbDAlq3TRYllQcFhqbEpe
cEymMTzV1xj99GUDAHxxZXt9+8va6jbA4dGbrtTCy6GJ+WJ1SHBURvSRoujk
vJCYdNiD3iItICsoLCkp7XhMUp7GEHzu4g1c3tjUMikIXD9sQJxq4+03m+++
haBAgvL6zrdbmzs7i9MLlrqbWZHDzy523ymeb7hzPMWkdt0X4Lb/UrzfyPMz
N7P8Y1Ue8Qbt7ZLjH7/5+eaHn9Teu9xamjL26ITlVn7nleSWkoQrod51x8Oq
zyQVRupMMs8AiWecn/xaun/N04ezi+/GJpdgI0wurE3Ob89MrQ+PzQ6NshEY
woSw8Gi7t4lKpeaG3BlZwosDEKFyL179Xy4Ne/CKnCLIJGQxpURyKGKeNx8t
Fl9MTEgZGZ202vr7B0Y4d+5JGj6iESTACLa4GFAgCAps8KefHdnXP2y1DQCv
7tx+gHNSQgGFwFfkBW0ukgnlEBQEHkKJt9zT1cnHg7nW83g08s/NFbq6mM1R
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
aGpkaHQO3HxxGadt6R5KyC2Nyiq9/LDRHJ8XnpAblZiflFWceuxCWtGV7DO3
o1JPGUJT/YKTw2Mzw+IyI+LTh8dmWcCrucU5LjoOTL9dJ42vLMvuvotrW15c
2VhaKj976kxGwrX8xPMpQTfzI6+khxdGqO7khXdczx69X9RxNaeiKLn4aNTW
zPD82s7q+x+2Jvtby3KtFafu5cXUlaatvCltL8+ruphzpyjh3omknBCVzsch
PiSg5v5NtIE2G3P5W5yYHBmc6OkdGh8bHOwf4MKEsCBjYB3AEK1W6+LmSphD
MyzQlZRMGTVfs6B6EV7Zxyv24hWBFfExX7UeWoz5wIglXp7uaDkVFXfaOlpr
q2tam1s62zs62trbW9s627s62jpbmlrbWtpbm9vaWzu6Orq7Oy1ccIJuS5cV
rREaDe0cYNXdaXtdWSX04YE4HWbx4R2gOTmT0Nnd083VHTsuXq5OQncng8gr
JdD3TELIzey4J8Wp1efzOhrqANfWbssoG6GdgYocGRpmbl7DoxSqAhYKWaNk
ZYDUEWqRNQrBRzgA32XC7RK4jbGQFzNk2UGIbtmFDEYaikGZZIpZQLvEjPDK
bj9SL5gcnwJMQbjgCpz831hkxxxcLZlR9gJ5bZGFtZfRoQZUCtyFaBi4kz0A
AqMK+BTXNjk3gpvCbcLqGZnk4kDAeAMPBRcfI2zHMzlz9oLJHCL3VQeYQ/UB
ZqlSLZUpuBB5zlygKWdPMF4BD1RHrTGcPn+p5GKZTKxqrGu1dtuAfngLaHhA
ALRAAA7HuEC4RsgHnjAKWI27xqOg50BwygpfCRjBNS0rQyE9PZPjV2xCkIte
habrw2fpRoQg+BApl7lSo9EBWqViNmEdGBBcVHiS4IuPQ328Djvsp4DYIGMw
N3BCvc7/2tUblm4Gsi3NjSPDbMk2YBZbPBC8LFqUbae19ihYbDkULPhlGPUr
Syy8zOoytwgaeLLGrD/GnAmvyJwEKoBIwuoaG59cWFxtbet2cPBwcfFx9HIX
Kn2dvcQCmTEz/0JO4aXQ6PSohKz4tPzolFxDSMKruo6l5XW2zn16Eiwbtmd9
a1/qiasJRddO33gpNUaHxeeZIzMVxnBD2JGg2Jy0E9fzzlXknCyPSi7wMyfA
TkxMPcZyPLEGgOtYZfC7sILLXlldp+XYa+ubKHPXv8784UCJJ6dADcvPnIzV
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
BpNYXFweHByen19k69xHGeYPDYyC8oFWFRWdCAgICgoMiYtPDjKFmUyBoaHB
SqUSClQoFIIXubm4e3l4e3rwgBWw/mhNFoTy6qLperj7oOlygYOcgOeOjo5c
LOLDFI4Yrxtfdzh0OD83D3iFlg9cAr+yT+iPDvZNjrK5+15bDxuRGB2HWQaw
amxqzy88GRmZKJGo/f3MLLc4N9jr4OC0/8AhmUR648atV69rk1KyNHpzUHAU
DFWZTCFXqBQamLCJR7NPZOYdD4+K1weFGUJihUo1TyyX4hiYsUIJWA2aN64E
xAa4AawAgJB3PfQ7g3QunCCZ8JT2jnwa7Q4JzH2rqxNMCVt0cMqcSKnKKJTW
rgyMQgb7R/p6Bnus/RBrd283bMq2dliCsAo7W9uwhWGIGhTIC2s3sdlX/wcI
uipoz0BPr70jo+XTljoyhDwf0B1QQ4ldyb+CZgfobMzhyWqFDPf2kgzabH3d
3ahBAZ+ipt9ioV3UwxwGt2yurwGTDA8NA6diK608d1dj4fWCYuHpgyZUV71B
B3F1Zh1crdFl5hZk5hWGxyQEhUbKVTqJUufFV8DCMgZGxSVlh0YeyT12Jivv
5NlzN85duHn37rNTp0qDzRGFBSdg1OBp4LJpvpXAloCXuaB8xdu9ziEQHAmr
HAWwHTANla8OlLuqtq284unR7KK4pMyU9IKCohKYHqlZBcFRCeBgaZkF4XFH
/IIjIaawqKTk1MCAYJbBnNm5rD1zgUb34zbZqKy7h1Sp0miNvmp9aFhUaFiE
SqUyGAwSkRRwDaUDbgzbFnY9XhwoNygBzATmmMfRWpTBUVmNpZNzvWOvg1qa
fWKFCr22vv7eAZRRwO7JwnytUgYry+zndzQpOcwcHBUa6atUo2MqZMpTp84k
Jaeg/4rFYtgw+/ftO33yDGwHtHBALnoL8Ar3gk8p8gD+5DKJUavxV6uMMlmA
XB5h0BtkEr1coVepI8OjoqNjTaZg9CPAndpXKfTxzs/OeHDnJrCnrbF2egTP
v2tkoKPP2tRrabR01Lc2voY011fWvH586dKZwqLcq2WXbt+98fDR3fv3bj2+
dxM9C4bt6srmN9/+5Gc//9U333zz6fPO1ubK9sbip/dbbzdXeiztA73MQ6Cp
sfbBffCm22Xl19bWNzc33tkDzAK4JsZnNtbfAsSAzNCYgUEhhUWn8vKPF5+9
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
lmlDYxRK9KOtza1Wg8aMwyE6lpcHe/8F+iHl2A==
      "], {{0, 88.08}, {96., 0}}, {0, 255}, ColorFunction -> RGBColor, 
      ImageResolution -> {300, 300}], 
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True], 
     Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
    ImageSize -> {255.60000000000005`, Automatic}, 
    ImageSizeRaw -> {96., 88.08}, PlotRange -> {{0, 96.}, {0, 88.08}}], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Slika 2: Dru\[ZHacek]ina Jager\"", TextForm]], "InlineText"], 
    Text["Slika 2: Dru\[ZHacek]ina Jager"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.924161880766487*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ae1a8639-7848-dd4b-a4ff-b1874fa03b94"]
}, Open  ]],

Cell["", "Text",ExpressionUUID->"891784d1-32a9-df43-8b37-022625cf6ce5"],

Cell["\<\
- podjetje je med stranskami prepoznavno pod imenom Trgovine Jager, posluje v \
41 maloprodajnih poslovnih enotah ter v centralnem skladi\[SHacek]\[CHacek]u \
Mestinje
\
\>", "Text",
 CellChangeTimes->{{3.9241619329502316`*^9, 3.924161989576168*^9}, 
   3.92416203683724*^9},ExpressionUUID->"c15af734-f211-8346-a63b-\
817d878bbb2c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9241617956312656`*^9, 3.9241618600692596`*^9}, 
   3.924164434401214*^9, {3.924164617181875*^9, 3.9241646184479914`*^9}, 
   3.9291586909754143`*^9},ExpressionUUID->"3831ce76-4cf0-5846-b444-\
d0ca1f738605"],

Cell["", "Text",ExpressionUUID->"5f7e2ecd-f3fd-eb4e-849f-59a3af9a401c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929158683407219*^9, 
  3.929158683407219*^9}},ExpressionUUID->"9d79afdd-4b21-5d4b-b44c-\
ef76d2b6067c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.924161706466961*^9, 
  3.924161706469227*^9}},ExpressionUUID->"651d12d7-20aa-1b43-9b88-\
3fd475c62b6b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mesta", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<BistricaObDravi\>\"", ",", "\"\<Podravska\>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Velenje\>\"", ",", "\"\<Savinjska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<SelnicaObDravi\>\"", ",", "\"\<Podravska\>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Rogatec\>\"", ",", "\"\<Savinjska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Radenci\>\"", ",", "\"\<Pomurska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Pragersko\>\"", ",", "\"\<Podravska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Prebold\>\"", ",", "\"\<Savinjska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Odranci\>\"", ",", "\"\<Pomurska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Celje\>\"", ",", "\"\<Savinjska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Mozirje\>\"", ",", "\"\<Savinjska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Ljutomer\>\"", ",", "\"\<Pomurska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<SpodnjiDuplek\>\"", ",", "\"\<Podravska\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Maribor\>\"", ",", "\"\<Podravska\>\""}], "}"}]}], "}"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.92915850745537*^9, 3.92915850745537*^9}, {
  3.929158880034807*^9, 3.929158892414915*^9}, {3.9291590798443146`*^9, 
  3.9291591372128735`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"efe16d13-ba37-924d-ac81-9193d28d82e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obcine", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Gori\[SHacek]nica\>\"", ",", "\"\<Ptuj\>\"", ",", 
     "\"\<Braslov\[CHacek]e\>\"", ",", "\"\<Turni\[SHacek]\[CHacek]e\>\"", 
     ",", "\"\<TrnovskaVas\>\"", ",", "\"\<Star\[SHacek]e\>\"", ",", 
     "\"\<\[CapitalSHacek]entilj\>\"", ",", "\"\<Vransko\>\"", ",", 
     "\"\<Polj\[CHacek]ane\>\"", ",", "\"\<Pod\[CHacek]etrtek\>\"", ",", 
     "\"\<Kidri\[CHacek]evo\>\"", ",", "\"\<Maj\[SHacek]perk\>\"", ",", 
     "\"\<Kr\[SHacek]ko\>\"", ",", "\"\<Kozje\>\"", ",", 
     "\"\<\[CapitalSHacek]marjePriJel\[SHacek]ah\>\"", ",", 
     "\"\<BistricaObSotli\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.929158707273226*^9, 3.929158722174347*^9}, {
  3.9291588085354824`*^9, 3.929158859073658*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"735f78b9-baec-c249-8b64-8ff98527a414"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mestaKjerSoPoslovalnice", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Entity", "[", 
          RowBox[{"\"\<City\>\"", ",", 
           RowBox[{"{", 
            RowBox[{"##", ",", "\"\<Slovenia\>\""}], "}"}]}], "]"}], "&"}], 
        ",", "#"}], "]"}], "&"}], ",", "mesta"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291585567772427`*^9, 3.929158589806692*^9}, {
   3.929159061094103*^9, 3.929159067113617*^9}, 3.929159293667177*^9},
 CellLabel->"In[78]:=",ExpressionUUID->"2a822535-5eaa-fb43-8f5a-d856eb1ad71b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9291590979444656`*^9, 
  3.9291591582542286`*^9},ExpressionUUID->"31e34dc1-1f1d-a245-870b-\
7e989271bbbe"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291591556153545`*^9, 
  3.9291591556189632`*^9}},ExpressionUUID->"ac210c16-1053-2648-9218-\
8884310dd8d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obcineKjerSoPoslovalnice", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"enota", ",", 
       RowBox[{"Entity", "[", 
        RowBox[{"\"\<AdministrativeDivision\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"enota", ",", "\"\<Slovenia\>\""}], "}"}]}], "]"}]}], "]"}],
      ",", "obcine"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291587364042034`*^9, 3.9291587574047127`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"531e4a8f-6aa9-d143-a0fb-389efa0bcfc3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"poslovalnice", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"mestaKjerSoPoslovalnice", ",", "obcineKjerSoPoslovalnice"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.929158765382723*^9, 3.929158783893381*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"8a3ffda5-eedd-7a4c-9b1a-c502875ea2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"GeoListPlot", "[", 
    RowBox[{"poslovalnice", ",", 
     RowBox[{"GeoRange", "->", 
      RowBox[{"Entity", "[", 
       RowBox[{"\"\<Country\>\"", ",", "\"\<Slovenia\>\""}], "]"}]}]}], "]"}],
    ",", 
   RowBox[{
   "Text", "[", "\"\<Zemljevid 1: Poslovalnice Trgovin Jager\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.929158615756836*^9, 3.929158634002825*^9}, {
  3.9291587976347466`*^9, 3.929158799709322*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"7001d3f5-f39b-e647-bc33-2a4014b220d5"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      TagBox[{
        Texture[
         GraphicsBox[
          TagBox[
           RasterBox[CompressedData["
1:eJzcvdtvXNl97+mZeZnH+Rfmn2iMbbiBQQMGjMZ5Oe7Jgz0Pxz6TeBIEGSDp
JLbjPOQk8SX2MXCcuNt98/RFUkstsW2JpNxicTMokSVKVSx1i1VFNWtX0SKr
ihRJtSxe5BGNepjvWp9aPy7uXaymlPj4AiwQxV279l7X3/d3//2vX/5//uMf
/Y+f+MQn/uJ/1p//+KW//t///M+/9LXP/y/65//4s7/446/82R/+X5/7s+f/
8Ct/+Of/25f/J108/T984hPf0f3uc5o2kuY7I1r/UY+2eb+2ur2wu58e/HLN
Lqo93F+bb3XiK4/V9vZbjV5RrfvR+2pr96q8d7Gb6NvdvTa3rWzdKLbe5c7y
nctDu1pauaSfq4frH93qnn6m++anRw9NTc/82HsybWzsBxcnX9CHK+W3ChM/
7rQranv3U/p5f2dZPeTOGz+f4Pn6y4fG4pj+zrZ/ysWHD1cOp3HXjVRXZqff
tidoRPZeDU3X9dvq2pTa8sac3qVXxH3T9fgnvg+T6d1r9x40NLeZwQ6dxnrv
X/UQ3flBp3DcDOiHuu2DzjRP0NKMmF417Rx1Q4/lop6sn8e3sbj3d5fdNmuM
75a/qg7rovpsw6Hz+ndvv22PsllSZxi7nty89e5s4/ztu7MjOnbCpgdqjHqO
dr6mUf9qILoS92qxO6OXqukGfaWeNNaLGrI6r78aiFrarbQWp5trM7pH66jr
ul8/3Nlr6q8O1EblX7pnnlFrXfrih9e/oymyPcOE83Bd0Qc6pg/1+vhc/TT3
XBz7F7fB1ovqgN1gA9FF9Wd/P9W2YZ/ojNg08lh9Fb80s458y6P0Fn1mn2g4
+tvburl945u9d5/bmH7+Q7899EC9UXfqBr1r48EtDVNLvLvXYtQslm5wJ2jp
ai+d5SDE5EXHQXOV74+ebDfv3PxB9/WnNi9/mSuttLHebX60eo3nuL3aqWkF
tXBaRMauLumrew+W9K3+OnLx0fvaMKI5bEJd1E90Rf8ONsC9in7uaFRzurdV
1Z26qK90JNVDNR7ComvsbD8ernt0v5perQdygxrHX7OhudXNulP/drfTa+na
Lx+6oTFjboz+Hj1HN/x/D+883F1dXbmt5j7cHN9qztzbbi33OnqdOrDxUSfT
9vYHc6XH6ieb66lmSU1P0Gfa7n33WF4qEqr7WV/1851T3zv/1jfZLeqDOpOh
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
1SVLi0qSE3dzqyKp+Y0f/30efykVDRyYlhveklMPCphoT2d4uGYJ+5oVg7bh
wOHE6fsI+EUCMt8P4TJS8GaocLESVdUcQHOrgid5GqU4HnTeP59ZGkGCRrTS
8WHFjKLbKUletrrMHGdcaAzWD3xwev7J0IHUx9lZJGwSJfrD0mFuG8bd5XNo
ZNKPsM+PG7Wbw51lmBY9VvJvpV0wapy/H1YqPwOSfCVxC3PrdecB1dus3K6c
Xbr1YvvdPxBAd858Tkj9wvTyP44tqOnDlevXG7WCGpuHzUnP0XsbcmExNCzG
Ls9+w+mF0GAcEnD0Mg12zJA4EW/58mrzsrgCuCaLCzC/3/k748Oo64QwBTd1
ct7GFm2UYyyx/lrcd36JIYlJ5F4eE8/4ZhcktTgkViu+zXuaTZqyzqVB8MTQ
RONyVKqYcGOyPFkuMmbPnlkMDth5Lk7Uns0JoFNSymITKCzIcWuuzewvfsvh
8vKZwz22mXq7ldNjS4gmiNjUdwjLJphj3x9o7Os/7TQK+mE+yHpEy1fGhITC
Rmb8ozhflrtSI6Vv6FpjWurO2sK3xWpu3j7LGbcal2aaMacjwdBJTMxeR+om
c7vbKBR+bLEqQ1E+bkjHcDXVkC/CNgAR0DyqFCpcF0PNEcDR0NzkF3HXaXMS
RQqECMtF6hN4gtS4FCJpPgwZ79393QqSFE4F2o1AtrffuQECr+y91XsVoB9l
FxOlnli5H0u+oXOEJdQWQhDgsmf7ons7varOowOjM89oXfY6VwQcc62Bg1bm
TOHvbcBnQm5GyRbnAEdLRtwHQgSCKvDXCOXk+iGe2rgLhGhToWOC7AdLKB+c
G/lekxOKFQmLpxPQfJlFU48TIg3KkGNku1cHOm1zchu5uIkF64dq1HDsln7Q
BZ57IzU9QSGJNzj3YGM1oIEPwS6MTOT0jWGkLvJ95TZOrbyLwHYotuYExIdX
JF2nJbfMg8jQHIwnOvI9wiuS/DOZnC1vlIxd6PmMGcguigWKO2C6KRJ/QSsy
1jToP8o35hOnMhsRhlpaBjpHe5XEIcC6WdDMo6rHZBG0m9dzFdxcYYKeSyAm
cioJtNUqXGteVD/bdyZW3nm2e/qZUv3iVD2V4Czx+f+91lGTKC0059TovThv
hwTOiU0704LO3A4RviW4GpKgAJpGikWyQZpY4aS55ctxzhAgPg2h5UnkVDa0
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
vP+DAGIQdQY6q/X8qKqxqEQDPcmQVO0vasj9FLQtNo8R7A2U79Ua8t163AIu
D+rMNBLQTEji0sZlfYSShv5u9tsykqFJa3vtM8hXxu35OimVUrOD0pLuiHFe
qTQR/r7sTfeVdG+IaPtdLFWQEforlXT5Zh1ySPnI21RV9rdutCWs14JmPfun
p3/JR7EMap54Muwp3F79S2NNotAchgUzK0kJ0zRmsJgzbaT2UuR93IIwMoU+
JrHL7Lp1bQ5/FjQkjGz4zu3hidM+v8JF6iIxPmO1N44N7j0tNqpJE0xzww94
/vUieQdJKWWu9Luml+df0b9yn+uxI+FyqHqeIzzFquinD2IVUQJIGrB0aqnT
QSVJjOIauBhwSG/B2pPQyQJzLKIzlMWgFhI1sYPJSilW7JdEUTNg5Nofgpzw
60iToevI+zD3LFdCQnyY9Lo5Emjb4x2dkAsDVfkusEKDRTzxTuwOTLKAWASx
fQKz7AdmGrBO8s4Ie32zb5kRF//CT+Ba6eLkmX39Rb+LJd3VZD5yzjpMobW6
nxpdOh2hsBWsTNyhf4KxGeZtP/aV6NT0YmUQWjrm6OwhtzrUoS/88Oa//u32
lWcExzSqDtyAVCSu28rByJsOEfIX/1GOs67GQfl98xttr5ZWJyIYlVE9YAHZ
IEYml7lWzGfqp4h4cIu5GjAobHQFTWl5joNRQzRHkh38AbW/VGZ5fOjr+ONW
DTW0EemtZmzhRtIuKz2YE5eIiePalWeJYN889zdylvUtIW9eQ42PjN9N6ZYs
rqlTPzt94cWl5p6IN3Kd+XKUw81jQrN23lqZ62TtvQ4alf0N3w8aazFjnqe5
nZEvYqZDc3tz+8PAXk5zydojmnVUVaNCef9OE3WvYQpNh2+157WAU3TjRCHu
WzVVp8oTDyHiXr3TXQqJ3d4CLvMwk/kqsm4a5VPY76n9/zeMWeMfUXz0yD2M
R28eeROL5GZyjppX8prP16ZIXYE7uBu4RXgfOHqsYFgUQK1ukCPkHA+XFAoB
GYpGqubARd0X6IhR5WqqPFrpXQic7ZiuxcvGQjA6O5RN9MMzP7+GfhIrqWC5
BOigp/ec0+pqqblzkdaBzn51/Uaqq8p36DFuTbl7CK40uEx4ij3nDeA8xtvO
gt2lBxA/6A87rQdro0KqYdTpEjqDXGhswgReuxVAmQCjnS+cdyLDDEwpnGiK
R1jSQV6UNywuR+YXKyu/p45hYoaB6Y5ZkTGMQYAuuAlJDL4K8xDntxYrBHPf
cDxNPD5KHGZGMEXurUOGNz8NhXzC8jkRHf9af1dis1pKqzR0v0KZYQpTs1xf
vnICbsAQmsrtDiw4DX292Z0HjnOM1utrV98ejpVa697pZlEhroFozMNbl4Hm
xdaMsXIiNI97i/n6NkidtYl+3NtZx6Jo7Kc6axtBM4QlK7xRzZGHa8YHS4TB
EUCRQfh1oHkYC8SqY0p9PEFOKOfL9URi2CPRTftfb58LfuWxb4emFZdfqvfm
vCsDtO97aSDf7TosQ3NpXXJvqfyngfvSO+TE8x8d6aNGDnm+8cR9lj7Vjatf
fVb2hsZBV6CTeh87lZbv1uv2gwedza36Zig2CVVjkIS7zRn9tfeE8+tJWPqh
YO23Q9ZS6Hz/bkfetEZeqEVUdhzXDmnAkY/51cuzjU8eExbHN3MOopLaLjzO
fh6589Iin1trHw/mStajNp5Z+DWJZsp2kjvTiq5HuFaRQz6H4+z4sF4QDbO/
8/sH60SqYZXgSg9jQCMWcc/hX0P92vfcRZsK9Id33WzOyJoiSc0+DaDVRPAu
TXu3mPQFKT0R9nkn2s++RAdZs45s41y7ne743M5nF9Fvf5p/pWRC2y+2RVHa
M8pOyOP43DkkX0mttECzrn+3PXuj+BEr/K1Tf7FzLy7dgy4RS4hMuyPNn1E7
KpCFGDJur16g9EimOypmdC31SZgd0GTaOFBcWq6HMfKJZwolGC4ZP0Fah8x1
LZYQVpLuB+58J+qY4WUTDz+kACf/aF/NdWo8sRubO99/cGOYRMVDxPVeb1TT
lJog61dIuFy9Ojsz9wqOof6ajF1vzoSwdozpwXYr2Se5LTHo1lvNhd5WU79Y
XW28c+rnb7z2lPasdUlfkdulfy1sODrgO/XQsZrOI298c+F/fp+EtVl8Ewc6
rp6E6ID5X3INIdccow26m8xkjBNvprMWNOuwnUfWa6zKx0wTg9Fae1dj3/Cv
Cc26sNqPGy9W27Mr3Wqrs9ToXMof7Vosdj7oCSJPVGS+SWk17lw/F1zmN//0
o395kjf1E/k2VGeHAu0oUCaPxtRuytgtH6q/F6afZxsN3sw18x2fF5S78hpY
16+YPe7BT1g7JbDUTjy9d+TJd3D0skiNBiwZJIf35pnvr198+jFdTstwecHh
ucMjwxfO54y/hcRinkslmZj/rr4FpzqYQ2vXVmLFbmlFPTzKQTztoE/fX9mw
INgjh9OX+U+TruVcQKXHVy495IcwlUln2yXH+yhtrC1JNMuGj8tsi4QmuExC
0NVJpetGUwkLAGKcE20gCRtFknsQOXhOyRXiH8F81pzB47aiC9b7RvssuWZo
b52k3lkckEnRZjI88puVb2b7BGPscW69d1I6a+L8DhEctOX4/u1EOLbgL8Js
PMQ2a0RZZnxYdkVWmoynYNeIENLNd29s3KrST0qj/f5fB53qWPjT7K/g8AI9
RIwFWJC4EBMAnXHPA47ES0eoFpY4XwGg4WIhb9WIhG0vp7SmyhdYa3TI7yZE
ySlsxW4LrPy11I26hHFEVgV/ro7n6yWXk6nlUD8aIyTHG6m9JivMzcGeylmu
BwI0b243PijeyiuhtPCen311FFhOciIIgI+bBIcMFrdT536lPQiaqYP22nt7
szm+vbzmtdf/j0/P/Ptbv/mb9sZFa8VMHDplplk1icfmE0nXGaqted2N1IAv
t05hZbtRQjUWI69tXz0okH7IyQ5SzwhGqEKKsWKKkjZWL62vrY73C5uI9YGo
ELW2AGW5tPobGE0xrJGvsYFkdWO0MrvkigLhgxaQlc5s6OkWU7Hd5oJ+AvQ/
aJWw/1vEZtPooaFFxr//cvaXJXi1q+tf1/Y44DkEG+sJkutE9EMIlkLUp2mm
XWnthOtMWbRXjNLNundzKUh/L739ZQHFpk5q2tIirZmYsXPESfy7MPRyDwXr
d/wCLjWmKpGNM3H9fJyjOujWvPdRGegnLqqHfwpafdnLVUmynxPPiDIlE7fs
KpZcM04Qr1k2GBE5xxWFqo3U6dg6GPnPWUaVf3NNaTpX2vsmM0iFONQyapwR
FW+MujbPQ0ehu9ko7xkbN+fucL7a+HSK5MgfckFyY9Jv5oHu8Qd2Yv4a3784
2L82y26i5zvx2Nx2Kv+hzMCOAmUx6Zkn0MfrlYJBFXrTXIP3JVzu1H/V7MyG
kHLkR+mvOcnCo2qkQ4NWdpMNT/R8xEeDCYB5wMH42LDMkeXB+XpMkEL4i+pX
VhK9xlBxBeUwupxYDri0rlku7Yp38Lg7SbXGja540CgYpKNHqYMkHDbaVHHK
rJnvRLmP8SGMZuf5xc9f7+7vZ2GWC1dYHvTJqecuXJjKo6PBdXrtKX00fq20
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
OCffWbh8b+Vl8Dq8iO0mh8mPLqlLlWYmHuK+Jag5F/pPJRoYxmQja5/9mEPn
220uBC/19W/cXvj78U8D/aB32i5wgGkQNnq+wuKbZ77vjwJxeuav6lefBT1h
1FSj2nk4x+aMcFbbr378YuWT4D5/9C9P6h29qI66rhfMMaEbQt+D9nyo4um0
OrEEjH0uNU9p//nV4GEULApw9ZX19jm5n3J4sd/C6pR4IDb1w3InlO+NUvle
PIv9OOVk1kHQrA1I3XrpM1zah9JjcnbmZdB5auonel3S6w6QFEMHutoTV6Rc
zCF//6txn2qjViOz+chRhs2Wsvqy/NTydXLi/g9xqMfXfOxqan4R1ubNxzyR
8acmJ/dWEg+HiHFpDffg4X3tzado76gBImudkdesN4ldjwA6vpOTQEjU+gYl
tepgOU/0T7lEFkUpkkVRquDw6dx/0COCilAJQmGhNVXkAukYaD/tMRLljlFx
V+tADMv1vsaHl+KDtvmafPjSb+ViX4dPHv+oG+k6NpWXSllRoUglzwx4WcSc
cTmtHpmP9Q9nqIodxq40RXS6g/pcZyFiUNhGyz7TiUAoZTKkIAk15ycCMxkG
AvBNxQ1ThXInmilQ0QzklXj4/IqD4aMmCNFL1UyDuV1JjLhGVN+C74TyGFMU
Xxuvmd4TXKVq1F9FlBIe+8h7vR0aROIpYA9YL2uxu0A0nvSr3u92Ft0IGBdV
nqxAGUlAlPp8MHbz8bV5/Em4m4Vuxp2soGFqoR6yn5/+VkP/9gfNavtcSfrs
xInnCXVevTp7e7OJ+TEz94rRWdg9Up5PP80t2LvO93tf3Bw1Otnd2sN9Vx9j
Nnjdc1JgfLqaPqer+vBerxqFaB4+2JgYoJg4QlD64tPBbz3z/YOwexhJSgE7
SEAnVcxQjw9SH/u24JiZ43BTJRGxrqTSaW5Hq7PksdKtalTbs5faZ/VXo96b
46/eX19bldnQ7jX0ddJViHBqt4Jg4a+wlZZSdI9qLU8LsuHPbG7Vr/zmlQvT
z2toA/0rJ1ob1K6/i9kW+l+0z8kGQ5yHY4agm/timN+N/boirACVLL+MC5+z
Jb2BzAxm46XKcbx45s/JE8/f3hzNit27Td0C3QjMdXnrcvNlWrhoi3IJs+nw
g4pHBRLH19XGYwikcDVCojlCc8wCzyP6dPiybD/oS63e3j5nWT/yh4rMyipi
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
Wkeakij9S/6OZovE5x/eWzdklCqdfY67sTUk8R+QCODD94G1QuE/Xm0qoFtd
Th0kDb4+BjaDsI3jDC3NPDQ+9e3OQ9wauEuXr5zAl8cjIzjA101+0wv8cewl
oFNWze3Yu8oybgQTtOXmdkNeG57sMDa5OIQDll8rH55xc2LluKnyFhvntygU
wrrQiUy987NQ/jP3yv328dD/4u5yJ/XpGKZuMuE676x+tn5Z08ANs67sl6Ms
IhM7EIA7IwnrcYZ5yHu++af3Vo58HWj+bCdAs7zm+s09gKaeiyC5/tVHGvm3
9D5mGAV9ugKr67Oh1OjuyvkLr72UJNQIXAuRT194sXR275z7xVtnntfQC21A
v0VB9h8XRv8NhpB6pTNLURUVbdfqb3ebC3KBLSFS3d/rxG9Wk6CTMJTgrVBJ
UGs/ul6fDp7dpeOCY23TWpkzpNJ6SRu/f+q50Nzq1M9YmfWjS725E8f+hy6+
/g5jvvjhvZ4OCaVQA7H+1U7mLhwTIusn+v0muGA+mLCG7YXXw0DP2BfbwWEc
r5zdN4ezetv8rIuYRPYpB8n6Uz/TEF4vtN6xd0wYUyiJ22u1MbKrBJYhQZnq
bKb0OEZwDEbDIoIpK5XFWEyWw/Gc2GJjHI/y6HEnSZcA95WMIsXRYmywLBsZ
dZpwzPDo8YKJ7mrjtdDI72Pzz4sYEABk2x+HbBdh+XsP2gA0JcOkoStZ5Z1t
gErWaGZi0VkltaEcP99S+Lo6puA9+noMYu8RJqOAs0uHrFTJhcK5I9lHiBvO
NuVsBHtxn/UpLrNQdaTG0GvMfXJWY7G7MLFRIKt3roatq+SK2uryEbjc7vNL
yfPgdkfbCJrxDd2rcf1OHd8QJ9TNJXn6SgdQcve46Xi7IOz/x967/cZ5XWmf
/1WA9MD5LjJoTGD0lRsf0MkA05juSX8DBOiLCWYwnnwX6e7YOcFAJ2knPuWz
I1qyTu6YFB1bpVfdJbJ0KKrkmCxSUh3YEqsoiaSsNk+G2aiLefb+1X60+VaR
kuMkdnca2CCKdXiP+93PetZ61lokQDFn4NQIyRzCwLeA7xojQR9BxomJgJsY
DHpfsyj4HPpDARWadvKYaA3pm8Uh4ZrWC/szsRDQg+lgkAT4dHAUc/yDyFUH
KeYrOCNNYJDSr1CQbiRoHtYhudN25tRBo3Td7GQeC80cgA5bmEUUyQnjzE86
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
98NXu++9JNf4w/e+1X/rq8SoBdDBYIibzu29hZeIUY+tOUXMA+Kl4gjzXINH
xGZ5xyR5N+UkgGZfD0J4NaH/iXQbdwSHGosFHxwQxI9mtDVo3EFiLG5ugrNM
rgFLDJeT2wT9jBNGekUH77XnBoM2KySMryIFxnki4K3h9zmeA/i6d4mpXI7Y
H4QWjX3SxyRWcBJ5cDAPSLXzYjVJgREhr5JQQCxAWNQKOQYZjCHRJ76oiwo9
pN75sTxlvujsLUQRbgcyYidZ0MLj2b02+T4efY7LbhRFDeD9hZeEzoNhe1jN
DQdNF4JNwnG+EdIMUgnr10MP6/alXKtZm9Cf+lzsLpbxZ6o+fuqWBw3GNjto
h1GACKarn/SwoPXqRhu6agZkO/Vnz7f7574SttTpMsdlPLjJFX6sHvazA0oj
qRkXtTW7PEqtzXh/MXWyeCZ3XjsfPqgT69gnvuqn1k+xraR20mz+10nhsdXp
eJaaN8uC+fLNuzvezpl6R3xfzBnTi1sZR8tks6Xq0v69D9z7L+iq7Qc1cnjj
jSSxwiPcjKX0wFbQKvlkkSJNGCaen2SjBoOOtrCwDOeFy+b8V1FHhbWI8zE0
A3zQyMnWIfWpc5MBgG9LIA5kN9elTAxbv7idut8WSVSERLYZSgGLY1iMhdcL
aR7EbqU+X7kMSMSC2UamNMW1IB6CYDU4+Ngniv3ogQa9r9Wj6s3qU9CEQF9n
EDLCeUtHvxAgCih35r7BVMlFs1nPLT0HNu3H7lSEtYHm0Nuo1xnzMmAWcTR/
9GhwlaC0AHe3f0nWxWBHDkzd7SXQ1XbnQ5g6ljvBG9fp4TKUmbpIK4mpNlPF
N6FpcritJHldJe13srSgDELTZA/L1MiYHsqYLrixpt/nayM/ijMe+/f1Obh1
aWxlgencerL/OKF4Xo6rwIV2fTGDJugkwCJo7qSGLHT5hE5GWyhSBuiHWDTb
6q9w2x7GhjVmjIPFiHni5zoGzmtGDJZjIwmVL2ZtZbClGaU8RetAGYPsW8ab
8+2Z27cvyV+e65x1wTj78OyTp0YKZmWa5nC+kY48iVbYZD/lh0s/vf/O38ll
lrerzQehZ+Uo5RbzqoRR9EZ1wr3uJRoe5R/BMhLSPZby+GQZfNFu/y6ZaCwW
OHV4DWNAkGfnc8KzNvjJa3ce5+UxV6aOnp5NPXdww3L6k5ZESyT5lIqUgMgF
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
874cFLbbGfvNfm+XO+nN3d22dsVrQuRO264f5D9PFKlgmdeQBaLqSfYt/JAo
86B1tUjSAZR2DlMVGFfMubLk0hwUwsQEm/BARX7NEs2KhPMWPwyFUUXKU8Jn
iHeR1QkEN9EmUrkQNUkMZ0kQ9SwrcCUNuEIGa6li5ePld0MC2JnnB6e/GHD5
t7cH2zN7SxdEogOD1kJ0/mvaAJh+nKTdQ23U7DlRD3ABwyPw7jPPX7/7K1sL
q/FhIWcGqovbeTLV0/mQ8kxyDkynA8rAAXNKywYW47J/FX81wO2pGBpJxzSw
eiqQ5/Ia15zyhJoWm7VLaevSbcu9YP8YGE6s0hd59r1kcR+pbsZa0EJkDwDm
lm6QlWSIwvM+M6SW8vB5RliCdAAVtUw7B/TdEInu1cFuDBIMQhZJHkZSDRl4
FzFRrE5Z2oFPltDoQ0bMRfdMKmbmUtTxtjAU6y2RYtbwMjc+fcpSCdagC107
LEKVzdIyvJXLdHMXOB0YOprwUOYrV/4/fM4nUdUmtk5OgrYneVigpkH+M+Xn
lAuRRgL4assQZf7lZ7of/4CVh4tQntpa59Huyh8e3n5UvLw/+zeP+1eGiYMY
O4D7dorTLaTqNq58SbRjqRE2JG78TilFW3rt2H4sQxQEizsvfPDzkAtx+FK4
gungOkTP/P7SxWES6Ro7bLoPD0e0cyJQqZYCAUdB8FHqD8v0oNgq6G32Dyyr
qdgRT7vFAQ5fHqY69zzQY8e19lMh70zm/J3ICss8McN0Ds05ejqsrAN7vLOo
25qTZXPnZ9JhHf/jRwdOb0+ksQPoGX2fQPN859LuXs8pUuQ7wRxd/2v/dojz
xkIwI5qxDAElgTKRX/IEnCa69vA2xoMzuIpU0ISe9mSqvbJTzr+4UArIlLln
guCV1HO2SC2iIMVrsZUDTxDAxwE4g8WUihxRbIBaEgnPPQYa3dZFh55NiHAM
tmPNMuyDRCOemqmDvk7BSwm3iqkUZTUujxjJtHAxozaOcQf47KlORShXWGN5
uml/A09hvR2mIoLKE8Saz51db78ZEPnsC4M3nhMoB5p87XvOSWvHpMe9hTcD
2p7+YnBxv/nl0E/qwtf3ki5QSFG+eXZrc479fzT3T9py6ewLtSQDMhVrsWGO
ZoW5PwEKDBg5xb1IwunQgemUUpijEnlNrrCoJbezo7p5ghkB63aqZSYhxNqY
+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
R2cKttG37K9Tzwp8txfe0oJ5tQHNtYDzbi5z0NzQf3d2WkGccNmrVIAkran1
ZkNAuz23VEM3TGOmc7Heq1lWLhTTFUlWdok2ZqjpNoZbDHrboWq896zbpTCc
dSXx8eU+0+P7oZiIu1oNSiP94VGjgQlfHTD3ywustDfZThqyneQpW0XV3OnU
iBp4PFYmXGBoD5MZGQjN52sD5sziFKpRbE4BXjuwbt7+YCffFi0fBi92f+5H
LhnLteVZucxyXVOv+VHR+ZXxRaHzv5ea/Pf3lXn5ziYP0j4DOq+e/3ur6Q58
s330MZbuTI2cf4HItrO4U+K0sFXQDFubnhe0owpvX2uX7RAC1/SNIkmtp0Ub
I0vidG4sRqCfmDZ+dM5nt/zyoSfmb2ZVWoCOT9ryEIEbmht6m1GfizKyU8if
MuvqU+ijB0/QTOrQ9wa0OecHT0pfBOhd9SJ9/HI2qvZvftaQmDY5335I++Ks
UeDsQF+JLY04L09fkowI2ZBMiTrHJMdFBX91qUFVysxLMWyu9U6KpsVhzpL0
ZZmdYXJoE6GiIik9Ta+9SknsRDs5Nsw5UIwTHIiq7CS38lERJNFat1PDDCPc
AccMErUfOQummB0oak7Lz6kr6Fy0k+WgkkSWgR+iii132BRGMbxp1F/OYP4X
ev6xdoihbsVroYSKx2wyabxFZhkE18Rer7/jh7EPDQyfV4BFL6d+yOGa+6n1
wY9ee/c78qOFdMK74tf10Ap/caWFg9m39oI1UiEUIxse3f5A0GOIvF4TOvdj
EwdoVP29rOwGksUrM4JpgbIeGz3eMjYE1lZjtdrScLgE+AhJkYHFCNSP7iye
1klhIXSPfvVy7bfptYWjFUOUhVLQwhr9imDRg4SfFhpXMZw2j0Kmn5TPira8
1REc6/Pz7Sy5bNmHANb0reBzIFW7yDdwY0AX8/reMObjQXMaA//wo10udzFD
bZEQGdgJIss7FvK6a1xMNxfRWZNzzmV+PN/5pfdbzgo7N3lFvnO9NiFEI0u7
eupv5DvTUAPEHIjRRJ4ZwmjcZ5fWREAb9QbC1KZRGVt4aE1vY1fnk6SnPhED
QdcrSenuZrQFGVwNeGJ0TdLTdaP8IqaFXGbnhqGKWY79FuEPU0+KahOtstJU
Ka6cddN4cJOD/7hb3r7banYqSNI5YH0auzr2Y6US1Q3M5wMZSlOJnRBmpAtW
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
jdXKTGXVqHnLo+JdKrQSBapyQVPLY+BoiQCXENj6UXfII8mEjp06mzu23PFj
gSxtzLiqRpi4Su5C0iEr9cSL/uxUgtfpSt8SHGeN20sEMVhTrNIaCM3kU9Jf
oRGVa7B4vQ/vI2d0fyc0nW+ezXnN6cBeKsUIsN/xicYxd5yPnXkel/mAGEd3
5sfA0y8+3AALV8YmSXf6POWBWjITqRM4B+otM0UTrmGNqUWFtClaJVwx+WL1
+juNrPlmRhsDAniV6p2yJ1IF4hRDPRL+7l/wm/nOobFyun5zpSJ01iAiRPFU
P8aZwUro2ZgTGXU5uNI8RXpWBc3xcVpp3mo5j+WAGJo2KfD1aHHfX53MhRBz
0JymINOva7c6DADaq9GZuIxvtvReuz0GfYtPnbipiAQrhcQ0ep5ww8g0gcUe
CU+JN+mkYRpre6GZDqFeNEEuEt+qFKW5c7Fr4cvZsXMpeDnmOi4DvgBu0WsG
l/UnfUW+ZC7urZWheXeX7s/XbppDDV7rv9PNqbQmy8PIAj7ZDNqDIPjQ5XaR
qv3YfDDPPutQhc7yc3VNbnz4cyLGgmmtWVq8Pt+57E5uZCB0aY+u/6716jTF
OPLmT6u7DSBGqdnR+9XtXhbsgg5AJ60o2KelomKZs/ZJ4TPp49Afs0XDRHvf
rz6Hyuj2wpt06OBg+MVy0NBm3vBJdaCDmYswO65lecNbTaCZRk5wg7XAJE9I
Gc/CE6Nev5ybzAe6ogPxmsOwdLbFFi4wAbqkCRAgBIEC518RFHoIfTxpVelJ
1RgQbmEROeeKUAD2OdS4SuyGvP80btzySM1iivCMs0CNbQi5c2DF6uNh7nkR
xN2qt1T7VmN8EA2e6SV3K/3m5nbYCN3AS8HX5uHEAEBssxpLOfQAFBPNxQln
95rEI6/N7RbQnSy95NIiB4RIedl/eqoYjF+nru0PIhY9u9cYhsi+TOzXeYNM
6b1oSWZlAvMnoIn2Q/4x/V3rqtwpe5jUFICPfNn6N53/7iN1XHKGErUGA9G5
e3SwM94PyZrl2RHYX16gLdeDVwnpab8UWY+q4FCbSRAkPUmQacKv9Wb3SVam
I0wjZ90BZyXUzfvdC1Rb585l6+5NcuWh8Gc5JRX74XnXRVgr5di70+5L97Jw
UwaJ8au3O2Cxlq0wKjL3xrMyllHIaTwt3AvYXP1AQBoo5sN3IfultybV0MNg
2DPPLI++9vvG7yvztVplfm5cuCxv9OTUjdQvdixmEK9mg2GEbb5o0Dw7QPdJ
O7mx0iNC7nHymc6Y4PXt2fnz9T0lAzvrNZkKcpBf39vb4o+Iy4yfvDMndNZF
QCozA0G9DrWXzQDuNVrtCjYS1U+k/0JGdXRjzXxb4TK1VBQRZ76ztYcwlF89
9TcsyOHNNEJPfkfQX16w2ii4W3SqwuclbY337dX9VsL8m7/auSdPsIVDTdIk
dKMb8TRuqgyZm5+9/4I3P9qdt0NE2mqXNg2afZsU5mj2kSNKeSFYJXZGdvd8
nwTuQBjKPc/e5BqxMi8n4VfIxjaSRsbVIJ3hXjPRckwOoru8DpUoVYprA86m
BsN47McxAO9ak+y83i1rQXD8+YNFzzjzK9boc6sxMNFcGhQ0KEVPuXgFfCcp
he+hV4/a7YEXH/4A9k9667Hu8H0EzSmd+6HDn7Fm9eSHS+cynlvzlED5gNzs
o6f+zVXCNP6U0p1EQkqx8dBDsQP0ya3kCmCqcQ3JyBADRBSdKBC1ftYcuXaa
2ZgW3tQQ0cEh169z4dx39dZ33vzq/k2piis14QMfRJ6RCsltI8cBiY+UsJ0O
QbM8XzpWQGwjVq9TwIPGldYaItt4zV71nKHnpsW0i9nM4iBSkQNf8LQfyroh
wqUkN5sYgwIJxcjAevGukZuGA8C9hhkuXE7bauRSA9wjcBn7yt81WFv8ova/
j1Wf2QDNi/TFIGQ9rEekDyqSXr+04C0XBbsC6NHJUZaJZntAO0XqYelmj11r
JwOhOeeAa8upGwvCZYGsoJk7aMpgd2+em72uY/viyHuQ4PY/n5zVAct3hrh1
58abAlMBqJxozd7B+a3RGB3zifiDbXmrhZ979Hf/CmEb1rTBceh11T7+jQDN
X7P/Hn0KkRAv8Nd/ZQkIbUkcUz0EgAL9ILW9DqEDtdVebXe02WRsbO0p6fC7
e9zSFJrHow6YBzPT+bkSeiubXsQnN5cbl3Dwq7ExQSVUV1Vj7yeeT2KhlDOU
B7UsLEd9Le/HFClwe1hhuPw5R8yifwnXiLLl7H0MNCRaA3Mw/r4AqdgGk1G1
3lp97TTJJvi52ASyWReEpdTodAyLxr/fCqGw5tlWd5b8soyZ1etjHpNPC3s5
x6lCCLq4W08lcy6PiuzFzYb1qNLBQF/Prcem4nJ1u/WDo5vbWpp22rPHCevx
gJFudrnsYXsAkb1Z88HD4F9wpLyLgch1wKFnAA8XcNHTxQMAckFCJldLU2YY
v+iDgWKWvo/VyvovwXNdw9roD8Dl8VjPe/BBegvEHNjrivGfm/WV4JVvzv5L
7k87d1vd2tnXr2h61PRnoadeEHyDKUF8uBffStjLtJRC0dqwe2c3NE3GmQvy
UKmQ2HdjwSW79d/7q5MoouS+K+jPhEblrW93XHicof8y+K/cYRQM9LiuXjff
h4wDVZbUi7k35NpuYDTSKF6fkloUD33MgpE/2pg/MfPhUUrn9t++CFLydi2f
O1n58KOuhjxf+a1ypYFRoSoynkVodozjr9psIDQ7x9u9ZqRB9Wla2bPz+pya
eptC5j8BKKfj52eqOmZBME06trrn3L3VVW23jEpthKL7XcSuKV5GNxs1EnRI
Rqd/uzr/c4D4852OXg19t9G2INWV9ijlz/M3z9Qv/dCaVALTh564ffEZecTh
ue321uecLebcMJxul9p2XJuMPbCA5nTkwqQ+7RenJuLJevtkgnbrYwI+FDk8
NWkGc4BCsIbOgJ5eGZbufNSVoMNUFMvafXMDlasf2Va+UiYN16EUYYt4/nhs
DczB811S51kgOji8KyG1Vy0I9ZSG+6dkhfirH+HnO7u+M6pr+GLVgkqYu+RF
BjuxZXyuXGHyQA62j/1z+kU0r8Ye0H6EMOJ8g3a7dqn5zgEBjoeQ+iwKnHlu
T5ZeorGUA+5AShiFz9pMCzqRPxk0W5IxTNH4UANDvgcfsCPcjIRNpxmYUGpG
IAxurFBGAEH6EmUb6nMJEKWxTXC5e+iJy7Xfwjfb5wA87YvbiNiRC1TqYPYJ
hv/hbhV0vnfthXQ9rLCFFZvPrwR/CvBFxYvoMSrW+nWWAVOWUfVkS4SpUQMT
XhehOd/oOYTQab3h4N6ntcdv/sqkUfbuQYbNYueGvDmhLdIfg6/S3ZuLjWmQ
+uNuGS4BuMyMwaXDz2U+9EkyxVMtpCnv/aE5fQf1Rd3NnL5ZfMdHqYLHNhjs
Ql5aeP1y9qfXJjqCyKMXr05Pnbu72Usd3hwu+wJkMC0UoVnYRyTcoZkFnZ32
L2+dgSP/J8ZlO8JLC2Pnj7RrE7XlLDny6eIp0rvmQb/3Y7nSgunV83+feb6H
ntDKjbW2243WaeLo17TB6vGn9dlpTdI+Q0+Od5XSbWIlw7Q9rz6HR2y6ZNr5
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
Wu2HcDY16KLImgmZJE7z5TIpzseibcffFRa/U3hVv3XslGP5gsvDBKOw0ok/
U69UXDypb4HOVnmUC+R2etaXMkTubNIWXbWUd88VOJKRFUMzq5PQir7GI5Cd
QDpYQ8sh2MulwA0DYUcEHPKhes7QlpByMRR5xUe+fnu1F5pxpEyOUiSHngvR
byTjsP2SHGvj+sTZ38Tm0I0bV7XPWmtGlhIeJUSygVcpdRbQy+HEmnvuqNrl
c93GNZm7azfLsb+DerMcZ0F2THgbqBDVCyVCNiilgZW9cf47ce1wYbhus9BZ
XrOGMFpOdOq/w3A59pp9feth30mQGnULAMiKsMqHZWuuzyN1PTSDODioQyHm
UF2rNa/bqYGhgvg2k0FrkT4nvIaTbmenG0RkW+iMb+tsmNZcozEduJRT2AON
zoqtCaNHfAVSvSooJaOpJQtL0gVsu8ndfOS6+LntqZWz7z4uH4y+n4e47K24
LV++6uqdP/5gdONITSHqU8BlQkC6gIS4U3Eqqqvy44kNfuloO87oq4Qaw012
bnWE2sM2Rm0sTj3b9np/cuZGozL7wYdtofCpK1cFxxpg9KHrfW1N/7q1dHl9
2dUvfzTzPTq0Oid6zdU+7927M1s9TQT7+JsvzFUuWnDbOqm5b538Zufk3wqm
16vXrG0uEqC44XKfLY6NywxzzEerJvBWYge5FFhMtoCUgvoToAy8As2WhXRB
pMqk1jctmG5etSsEpVnqaQ9EISSzESxYiMp4gQyeaDJKrnzmoIYaRtzzKB7j
Q3MqhBv3eRQuC2dH9yfCahVqtNvXISDpCNmJHG0BvdVqQbEjblAO5VqlIKCR
PaReENi064/2eOymjXOa+hYKJFm7epgjrK+wvOBFWtagHMllcxNT0QZLLpMT
sSR19ofkNe99knQONZ+a8403TlhD7YqOh0uNS6KrjQkkf7nTXNLY7lbwo7Wu
1mtOJxbyv9c/PBqac4Gxpm8RdJ0PcSSt57IwP/Z6j1pUcXkEygS3nYO23SAn
mAuJnux6m+r8CMo79texr/7lXtncJQBuWGpVcCxQZpwstjMnMjWwURQXwYqb
SBYbVSwVYTAlUmYRTyvyQQaUGBLMZITF9DzCUU8FrzRW6hdxhOFF69etHygV
1muX/8HRmOefx4TY3b25VXu3u1WKI/PaTM5mob9d+0Aw0jbZeL7Jwth1xnID
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
RpLRf1ms8Hri3eq7QlL9NOkMi2aU+uvpcpH9E3cri+eAeW26UHqPKKVLarQr
jUZl625tZ7uPwa6bghycVVgjMhbHDCfO/kZ3refzdLHwF4o3msBIig28aHZt
+RzPMZUux5W2tsK4k7BktYxrY638VpqU84FxWyfRxYq/61Q7LjqS51rlFfAx
vs5PNutyQ+InLpf68fuIb6x12y48u9+U/y7QjPPmlEqlfM+6b56I5UDlDq49
Xm3BK5MQOdcZQdIG8rDJ5d5Wq+9g13kz6ZDClAtlU+WO6bYdAivcLVtD7NSW
5n+MHrW8Th2YzkL+Zuv2Te7OkaQCwzvtXHOPzs46BYwiHgQ0PB8cuBD3QMJA
dmBFpG7Ekd/C2LCiuVRYO466WNwGIwqqbYhETTFXuUGjoRkQ/+shctZNzlC8
QO1Y32P0+Ldc7UiNzd++V3/cCLkNAhe4itj/utSa7UjNN1sX9+eeEzTPz586
P/s7DfnOGtQ00cFW77Xlp4s/EwpvvvN/3r9fJ1DpCDbty0J2IfX+2ps8JjSZ
wn8M5P/EL+YT4YgGuIxJpkMSOguakQ7jQbOEo+yKUhCI5ono7CzC6tGMQksT
A9UY2oYX+m/Hk361tLbb19vVaeKQuCc4RxyVgQjWO7+FK50K/aXSnfzovPeU
Uyzi+WjRzn7IsI7MT7xCYplv1XKUeA/b7OT5XwqdhSnZbUYwuwr1qY922ubt
Zpcj1kxuliG1DABBc2rptuwb/p054+RPyUcYjmtqwQ8HT3VtIbxhPtnNSjmn
HEPsNbM8mm+r+UC1lKP7yv355I55kfHR4s4Xg7AM/S9czUiwEJACu7/XjJO2
nOD21rLMJBjgrmNL8GdTgXfiEoXQFztmyHNJHU7t1pANoUGGhg67uVnJ+UYM
mAr03HwUGjbhjWr1jj1uedAocxoCPvFkGzGMLGR6ZXINbq8uVFZmbjQd19Sp
0ERuI8VE8R4gAMPa0nnh1dLRKRfiqyiD4bjhXGspSxperJzNRSwUw33DGrj0
+f6qH/3pWi3v3kzZe9ZjuvmmE0+7+8HPsS7u76232xVI46MvSCr/S7ydyIZ5
rFpegEjdVhPWPnLE1Wf5QDMbx3G2bs7aQ0z4jwckNzKMXHyrlUDXxeqdB0Kz
JeL1RjfxrwHK/W7y6Kg1ZLCnxQETcJv29ROMiaWmnhH5vJQs6VVQJd9Zd+Hg
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
7ZPUkKjd39cm4/8Dhs+BWQ==
            "], {{0, 421.}, {649., 0}}, {0, 255}, ColorFunction -> RGBColor], 
           BoxForm`ImageTag[
           "Byte", ColorSpace -> "RGB", Interleaving -> False, 
            MetaInformation -> <|
             "Exif" -> <|
               "Software" -> 
                "Created with the Wolfram Language: www.wolfram.com"|>, 
              "GeoMetaInformation" -> <|
               "GeoModel" -> "ITRF00", 
                "LonLatBox" -> {{13.213670229875667`, 16.773255385864733`}, {
                 45.34947541513614, 46.949393874441355`}}, 
                "PlotRange" -> {{13.2110595703125, 16.776123046875}, {
                 50.9930419921875, 53.3056640625}}, "Projection" -> 
                "Mercator", "Software" -> 
                "Created with the Wolfram Language: www.wolfram.com", 
                "TileSources" -> {"Wolfram", "OSM"}|>|>], Selectable -> 
           False], DefaultBaseStyle -> "ImageGraphics", 
          ImageSizeRaw -> {649., 421.}, PlotRange -> {{0, 649.}, {0, 421.}}]], 
        PolygonBox[{{13.213670229875667`, 50.99473611361632}, {
         13.213670229875667`, 53.304391986988364`}, {16.773255385864733`, 
         53.304391986988364`}, {16.773255385864733`, 50.99473611361632}, {
         13.213670229875667`, 50.99473611361632}}, 
         VertexTextureCoordinates -> {{0.0007322897839916465, 
          0.0007325543808320845}, {0.0007322897839916465, 
          0.9994499423282477}, {0.9991956213320972, 0.9994499423282477}, {
          0.9991956213320972, 0.0007325543808320845}, {0.0007322897839916465, 
          0.0007325543808320845}}]}, 
       Annotation[#, "GeoBackground", "WolframGeoGraphics"]& ], 
      TagBox[
       TagBox[
        TooltipBox[{
          Opacity[0], 
          RectangleBox[
           Scaled[{0.8, 0}], 
           Scaled[{1, 0.2}]]}, 
         TagBox[
          GridBox[{{
             StyleBox["\"Geo data sources\"", Bold, StripOnInput -> False]}, {
             
             TemplateBox[{
              "\"Wolfram Knowledgebase\"", "\" (\"", 
               "\"https://www.wolfram.com/\"", "\")\""}, "RowDefault"]}, {
             
             TemplateBox[{
              "\"\[Copyright] OpenStreetMap contributors\"", "\" (\"", 
               "\"https://www.openstreetmap.org/copyright\"", "\")\""}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Style["Geo data sources", Bold], 
           
           Row[{"Wolfram Knowledgebase", " (", "https://www.wolfram.com/", 
             ")"}], 
           
           Row[{"\[Copyright] OpenStreetMap contributors", " (", 
             "https://www.openstreetmap.org/copyright", ")"}]}], 
         "Tooltip"]& ], 
       Annotation[#, "Metadata", "WolframGeoGraphics"]& ], {{{{
          Directive[
           Opacity[1], 
           RGBColor[0.790588, 0.201176, 0.], 
           EdgeForm[
            Directive[
             Thickness[Tiny], 
             Opacity[0.4]]], 
           PointSize[Large], 
           FaceForm[{
             Opacity[0.5], 
             RGBColor[1., 0.607843, 0.]}]], {
           PolygonBox[CompressedData["
1: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
AUStcwE=
            "]], 
           PolygonBox[CompressedData["
1:eJxt1Xs0lGkcB3BbNpe0DZFclpjSIh5djjExPC65zCKHyG0Vm6223OpITNQp
Zm10GeKYOZK0umxRQ9RkMVImlXuRS4m2rEvYiuNW9tu/e/rjPe/5nO/7nvd9
n+f3+70GYVHe4Qvk5OTCcHw5s8xbE4rFhAYlljiHbeXSxObSgAlYsXteJQ++
ze4VapcQKvk5aOgNvL18KkqCPDbUjbnJl0vfdbF/+KuUUOO+VUVv4eydh1wM
bhE602lsGe7HpcrRz5pDywi1ZMcnJMERw5fnr8N/9t3aMQFzlo42dsEH+zbZ
cLZxaWi6q3pgOaHv+RGlGv5cWrLGSF0GM/m/pgbDXcpeSrZ3CF3lGPNTJGz3
4bh8+21CWR38hzWwXoSueDlsFZuZpRrApe+veu9JgD0kHp6RcMO5j1rXcH/b
yPdbE+BB2WO78xJCfUoWLen5is3MmBN5dwkNVLRsKoMZGVs6ZyoI3Z0u6EqC
qyoZmqsrCb2Ub6egGMilNvf0N8bAyWv1WnThgzWvRNZVhMbtM3y6FU5qtNqt
LCW052Ry+wAcJZkRu90j1H3gZuv+INy/zvlIbS2h5WYb/hiATy0XC0/CF/1M
6b5gLu1M6DO2u09ozpXQoC44/uxYVdMDQnUmci7VwHyt6iyBjNB/v6kdvwDr
uZ84veUhoZybI/oNcL+udsUg8sixvHDBl7yENZCNnDEX6XcOVlCVZ56AneKq
+WJ4d2btmnOwq46ElMNPGLK7d+oJNdF+dzkd9vkcuFDuCaEZe+1no+BbdUP5
wV9cIT9nCi9eoB1UBc9IEs+sh4XFMS5uDYQuPuCRrQlzRX+POCAP3hPj4Ybv
ddmc61mC3MvCW9sQ5uZGK/MbCc1cr8HQgw3qr7/sg7eZ5lqzYUMnR8a6JkLT
ha0ZK+HXNTtcc+AWtyxnAq/P6uS5wyFOeX4lWG//B9Lep82E2hRZJ16Ex5Qi
znq1ECrQUvncDr8+xZo2ayX07Yo9QzzYVmfh3E547cnr0lHs99SguZ3RU0L3
KdR5DMOjo8EHCuCk0enLWTC7UU3px2eEHuv0fdUKa/NOxHUjV42fL9gIs9bQ
kIAOrMdm5/u/f8UaJqPmizoJHUwybf4N9Rytdlz6CHaI9dHRhVW2KdAeeJnF
/vEM9Iu+gXphI1wvEzqdhR+KLFN58KEb4UUbYGFhcR2zi9DOJf2FL9Fv/7z4
lF0IC469iQmGbVc7JAm60e8y8qEK/Vs6WGT0Ee9joeTaUQ4n67VLZ+Fd95tD
A+Dq9BVr056jXji5trWYB7/IK1/bhVykdbPY8SuWql10aMb3p+4tGvrsw6Xh
bkdFgVjPiIADeyUwO8SIdGB/Zk+XNwngHu/KYUNYZ1LqmQjPFk318bDfnPNp
ZanwjSxTzRTUy6TXxrI8uDH+8DruI9SH9bh7L9zP2OHSinpliuqG5fB8raHF
h/NhSdSw6izySyPCRy6of4MOVkMZHJLCVdtUR6h9tpmlCa53WGlz5Aj67dT0
/HcLYVmRVVoD+stq/OiDUFjMSn8hRP85KofGXoGnRISOoH+jze62ZMJX7cTy
ijWEmrecKQiALQIF/Wbwt/4KFSN43tLnFnm56P+xpXNtxnDWdEGOZjWhq9s8
vfxhdY0K2WvMF5M2/V5fOO6CumI25s8Ep7Rr0ptLm6TMlCXwijFmyDSsNTi0
QQXzLGwzr9IC1y9rra7vxrzkHbbs8IDLJ219U2BPftL+a3B28vlMNuZtzPbH
3Zp4v/e3OfZhmN/5n46mUfj//4P/AIZ7reE=
            "]], 
           PolygonBox[CompressedData["
1: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
            "]], 
           PolygonBox[CompressedData["
1:eJxt2Gk8ldvbB3DzkKkkknme9y0hkVqktLcylBARjogMlakoOoSOIZQUzaXJ
lpAoDjqRzpGSqcEpczImbVMk/99++zznlc/3s4Z73de19rXWTck7ZMc+Lg4O
Dm5ODg72X6vNKcquUzTSWf5TPYybQSSctO/enaYRC9/m9e9hs37fx5wzNBIs
/5AvhYdB4qRenImHy+9F//kTzld1dtoIF50xTAvnZZCik3m88hi/1chs3wo+
BjH+92XglkkaEb1S5scNV16r3mfLohGb5nNFq2HOmfWxHd9oxOHke5ozbPg0
X4GM04hxfOHWbNjnqLO551caMTCIvvMOPpgymEYfoxHz8zkfGPwMcmA/dxEn
3Jp+xT4C7uZf3dMzQiP+ny0PSQkwSKaP0/hBeGT/Ac9jcHyeHXMQdvXvJizY
Zvhe1JVRGqGZyBdnCzLIkQUT+2y47N/l/GNwu2bsjq2Yv7jHTsxoCYMoV30P
aMB4JW2OQWVYbO6UbcIwjeyR11kfCx9ZFdUuAZt+krYtgj+qVfZ5wKmnFxJ7
4MgKVl0o7H63s3cW/idOzrVmkEa+Ok7yaggxyB6tvTo/YaX661NZ8HpqhQwL
/Q+3hMXR4YDTVZopWN+cn8AsDY5wNLJow/qeeZ3JHMV8X7e07/uC+HVt1m9O
Y/dvisgOQHz3pBX+ugMXLK7s+nOCRj6llzUvE2YQx/QPv0yRH49LD/Z2o10p
4vabo9gPMScLlXPhRA27Uj7ks+c9r5IrrFuR28OExzf91j2M5005PSafkP/N
I9RnJkyXeJR+8AeNVLkn8bnDHr82zY3N04h1xqT0Zbizs4P2YYFGvljUvmmE
18rdVq7goIjq8eDcaVigRdFTAP5t1/Fdp/C8b70uhw/CzunVkppYb0WFwGwH
nDl//R8PYXZ+i+/2wdtlnbb6weaOPtWv4LrF/l8H4JO9x4Wuc1Lkwu2ny7Lg
81GN0+9ghsmBR9/gbFnZzCxeikSQm38biTDITqlzR+1h1rS2UDDMWOrD0uCh
CPfHE2EL8DWWYPooLH/l+5UyUQaZtRTnXyVIEYHU4+qdsGR19dtbSyhSrEaE
J+F+LXt9ARGKmJtUrtUU+/++JcZ1PhCm8r4OPER/nvHcLXRRihjGDwzM4XlN
h/5p9BSjyDv3hUeFMHdc1poQCYq817KuiYK7GDIPM2G3tFKvDNi4rTM7Bt6Y
YTNeBb+oG+jrgPfWPVR/D5/m+ya5FT69pCPbAM9b7F8XGAgvTagb2AbXNMqu
vb6CIpafe/KXwRn93xVapCjyTOJJ2y+MdxFPj9ogTRF9l8btZTCn8kN/NxmK
XPpgrBgO92rUiT9fRZFXBSUcy+CVVYJhH9EeMLMon4R4T5RFlhBZrP9loIwE
LLJMPdpUjiL2v0+fHkK+n2rxi9bKU8RTV1chHY4pDGz3UaRI8v6r7XqwtmpO
u5kqRdRWzTyThUPJnngBdYroBqj+ZQV3rht3vaxBEQ3+qnkjeOlCx9wQXGDM
GiBwoWVI9lpNinglXD6zBt4YEtYVrYX51fJz+GHe+jk+dR2KnPeUTu7Gfix8
bKK9Vo8i16MSWvJhmlXvUR4aRe6IPzgdATsneMlsgxM7P4mJs/e38awfk6JI
tbFNPRP1I1J2o+Oq1cjP1YibO+Dd0mnHPOA2L+neUdSfn7nTnVoGiNfZyLQo
uExjrIQHfs4T/UIE/rsxP0xWnyJJ87TcVtS3no8V055YT2NuOAmHDW71pxRg
vXMn5v3uoz6anXt22BS+J/je6SJ86HVfioM2RUIWA/6Ih33lhvw2Ix5CxLfo
MGzX4jyiAPclB12fRv1eEeXCPQ4r523g3wkz6znzgxEvF4uVxTqwRbj3872I
l5TZxwucsLl1f2UW5u9ROF7ti/Mg6Xt+aDFsNLRG7hvOj+QsWV95rCdrzj/5
BaxVPxgyC5fNzByPhrsPfbZ21kU+uK78/oqLQZYEzEq+xfsZ3NzUkwGvq3ZI
5EV8U2YZDWxv7bOvEUJ8+WYa/p2C71rF3HBGfH6bWHitgfmodV+zRBG/uX/1
7+j8h1N7roUGwcI7gqa+Y/yRsZbEWjhdpSY9Eha+IONHW4Pnv4npEIKfVd52
OAPrBUlvb+FEPbE7KR8Nm55LIkz4SAnxTIafcM6nh8LDTHu6JXxWfYelI+zh
0bAknd3f6WiXHqxiutc6EqYLe5rownq3+6IzYKltyXvV4KFKt903YONtSe+F
YE0/za9H4PbS88HfORjkl0gHkz2flkSTdAucEOnRdAzWXMEx3ABb8K2PEoFL
Rtzb/WGWdYGiFxzU+4QmBrsnMxuq4VlR+uiXRTqZ/93rgS97/IHU/AhYqbXD
sAyWbAqNNINF0+LMmIYUWauUFzfxi05CL49cKzeiSJdO8T4fOL7+jlsz3LrU
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
VvD//f/A/wB0OLbw
            "]], 
           PolygonBox[CompressedData["
1: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
            "]]}, {}, 
          Directive[
           Opacity[1], 
           RGBColor[0.790588, 0.201176, 0.], 
           EdgeForm[
            Directive[
             Thickness[Tiny], 
             Opacity[0.4]]], 
           PointSize[Large], 
           FaceForm[{
             Opacity[0.5], 
             RGBColor[1., 0.607843, 0.]}]], {
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.551100000000002`, 52.72716148740232}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.109999999999998`, 52.46018906506874}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.5, 52.72149038183085}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.7, 52.23832565144581}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {16.040000000000003`, 52.86703230990593}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.659999999999998`, 52.503679359349135`}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.09, 52.27200659006579}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {16.28, 52.77967492473416}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.270000000000001`, 52.27200659006579}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {14.96, 52.41672265156953}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {16.2, 52.67788010924994}, Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.746700000000002`, 52.65608400255528}, 
            Automatic, 
            Offset[10.976]], 
           InsetBox[
            GraphicsBox[{
              Directive[
               Opacity[1], 
               RGBColor[0.790588, 0.201176, 0.], 
               PointSize[Large]], 
              EdgeForm[], 
              DiskBox[{0, 0}]}], {15.64, 52.72149038183085}, Automatic, 
            Offset[
            10.976]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {}}, 
        TagBox[{}, Annotation[#, "GeoGridLines", "WolframGeoGraphics"]& ]}}}, 
     TagBox[{}, Annotation[#, "GeoScaleBar", "WolframGeoGraphics"]& ]}, 
    CoordinatesToolOptions -> {
     "DisplayFunction" -> (
       GeoGraphics`GeoGridPositionDisplay[#, "Mercator", "ITRF00"]& ), 
      "CopiedValueFunction" -> (
       GeoGraphics`GeoGridPositionCopiedValue[#, "Mercator", "ITRF00"]& )}, 
    Method -> {"VectorMapRemoveLabels" -> True, "OriginalInput" -> HoldForm[
        GeoGraphics[{
          GeoStyling[], {
           Directive[
            Opacity[1], 
            RGBColor[0.790588, 0.201176, 0.], 
            EdgeForm[
             Directive[
              Thickness[Tiny], 
              Opacity[0.4]]], 
            PointSize[Large], 
            FaceForm[{
              Opacity[0.5], 
              RGBColor[1., 0.607843, 0.]}]], {
            Polygon[
             GeoPosition[CompressedData["
1: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
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1:eJxl1Xs0lGkcB3BhV6ZaYlwrcoktlwcpYzfmiRiGcJTdyC1rS1sdyW6Kauq0
2EpaaTCTWxdFIoNcEgZhdRkiyqhEWpdEWnUk1X79W3+85z2f83ue932f5/n9
fq9eSLj3r7IyMjIhuGbvnwOybF9SDl1t3h5dKCLURz02gLmWQw+2lfi+hdsG
XTqc4HLbXoF2MaEyVQMtPDi4bCq8EnHraGncO/iV1Pb7myWERjb9K1jvwKEp
ofs4eqWEugtezATCirs727ZcJ/S3xtP3iuCdLy9/vgp/fGTI7oftlMYkUtg5
bh6JcuTQLQkuTL8yQous+SOX4WJjI2YzHKbGIaWwlOGlaF9BqHRCLfkVzP7v
qHxXOaG75/vvN1zHoTq7FovU4bryLIdQeCLPe3s0bJ46FL8TvpsxqZWP+UFu
BnXX4JHmO+ysyq/9YUfDHj5sambwNvMGobxjHRfDYaXTnt3TVYSKrQ7PkcDV
1coay6oJHVfiejyG7ep1rSPgQZ+MTlknDt1b90z4Yw2h07rfTG6DD0lYYQwx
oZ0mixKa4fDKaZFrPaFDG/QHNJwx39KZ19BAqM59D41IOFFdJDgJSxVKW2tg
aXTfcvYtQv3qV7UXwPvOjNe0NhK6KjRVLg2O06rlJzUT+lM7KbsO67ofP+X5
D6HZCxdeSID7F2tXDSOeso92n4F1im0GUxAf4x6pOg8rLJQ3OA7HWw6P58Bh
yQ3GGfCyPVuDj8F3lJtvVLQQ6tuin/sHvOGTn5zMXbhXPOAMlzSNZPvD7ADW
DjeYIau9uQbeqZv6hAULCiM4rvcInWsa/vEK1u8qHBh1QDwg21Xhb9jZKd2j
GPFNcuPskzA3fTcjTkKo7OvJ8SxYr+Xq0z64eqvcdCKsv85R2bIV+y29qS6A
++uCXdLgDzPpxo6wFb87xh2+49P/mgVvahT3Pmgj1GJIEuAPjyvuOuN1n1Cr
/KiKJfDzRJv3Zu14XtCRzJuz57lIbiYUnk40Yd+Ap4bN2UYPCD37NnIjDx4b
8488D2dMHIzIg20lKopunYT2OR5LWQNrxRyP6kF8LyPXKAq2MaaBvg+/dmOa
p6gR+ay2Ysz8225C7VW9UmPgcJWj4tvwlR0uNkvg+T8r0Mdw7+oNejqwrh4z
RwIb9iXk96CemoWr/4qB93QULT8HC3MKmwykhC5RPJXEgQeffEzJgQufrrHo
Qf3aL3M4lNRDaPK23LOdcMlwgdEkvkf1MI/Lh2N1usQfYEOvkndmcG2CpumJ
R4R+CtI26UL/2CrPyN/28Gtv/5TWdQmuVbng0Ib1uwcMyUTNxl0PC/2wn4ZT
/OrNsG2gEXmI89FuSM9eDz/2rn6pD8drXtvvA88UTPXF4LyXcpUyQ+EivolG
LPIlTLtSNQmW7D9gyb1NqNl39Ta5cL9yMKcd+XrJ667FRVhrZN6BbDjibNDR
3+FLo4LbHOT/qSyrC7fgoFiuyg9NhLJUworyYIela3g81Fsgo/TZCNxUwDpx
D/XFlnOKX4T1i2wSnghQf6+6Jd4L4CkhoaOo3yY1Dc4LjM9ji+Tn1hF6xM7I
Wwhb+CX1m8FPw31XMGGlRxaZ6ah/PVbHcmuY//58mkYtoc88DsZYwUy1qubn
6C+b33SoTrBR3+eYc1PQfzaq1UrewK1ig9gF8Dzl4FFNjNccHlk5H/1M9f7G
SVNYtb22pQf9cnS4O2QXXPbO3icW9iz4ZU7F7Pv+zEq2Rb/tWekm+wCeKLdb
G4L+/eX/4H92OaQZ
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1:eJxt1ns41NkfB3DS7Lb8yoZNREItizO2WZaiOsXuhI00hKVQK5JK2S39iqHC
SruMa0Qh0S8SuaXk2bBErhOGSklGuefSRG77nuf5/fXr98c83+f1nHPmey6f
z+d81fcd3eWxSEJCIgQ/8fPtgbVvDq5mU76Xon9MFaE20+pBQlU2VdOdOvz7
34T2t9jZ9MEZg/5nC6oJ3SxZerADXu1/yIb7iNAdpZ6LBmCmSdUWn1pCX/78
3FAADxleepVUR6hHa7VGApwjd+Jy8GNCvS+ul9kO2/Kmvy+oJ1Ti1vSYuD3v
/EJ5VBOhasf7rQ/AP9ky/3BtJtTfquGUOvzUd84tBB5LuG8iUGFTnmuvdGwL
ob6l9ofKYM8EhSohfMh9xdMN4vayxldFfEI7FQJd5WCR0R1TpyeEesUl8j+u
YtO09TE3FFsJrYvkNHXB1W6yRmMCQtvCtrTWwNJvmx6tf0bol8n9Cknwg6u/
lH3oJFR2U2NnFrxsQsjoQP8+B78gNzjitl5YPXxY4drUNnF/06nesnZCS2ZP
PDoH776zxDulDfMNKNBmw7F7hcp5mG+zXaLfRngk9ZGFIpy246DjG2U2rXCM
+64Olk27HsqDNaLPBFn8H09eihbthKfsFaR94MGtyT31SmwqxdJxDYUVHZdz
98LuLm4/zML23G9u7IBN5lKZu7D+stPPsjbDp3/tvCKL+TX6zDKXwzEy5zlt
mH/wYu/28pVs2n0zrZLVgfM591XWz3Dj1lDzKOyH4JVZrw38QybrdCRsd+WC
hzm8cs8LlVw4mNmcIQXP5C6ZL3lKKONqhO4TRTb90emX7nVdhKqYSfgOwRFH
tc8UvyBUc3wRbwCe1B/JVuwmVGh99UkPvKI4765FD6EzD6TGn8HLjDPPCl8T
6ufXHSGEozwTjgb0EtqV9KuzBt53O1HgQ98Qejn8z/AN8OF1OtI33xKqLS9X
1QpHfpt/ZWH0U+9rj0hLxvr7W6bj/EYIrTnycVknfNJBz6B6GPEn6Zv+E/b7
yYakwF6YoST51Z+wmkMnuQu3brcSDsMFpoUGLrCLqsQxB5zvxX5Ox264wcS6
hQdbaqR6OsLfhLkd6IdDNtqWOOJ9+gHTubsQr5sWwhhL3hH6+XSkiTPMGigy
kIMFFXqFfrBVaX7kYrjor0qnYjjLKbVLfYzQc4erYrpgg9wj2bLjhL7QSr+n
gPypYOp7hEwgHmwuRXDghpLJ1arvCT0/KJrPhk29TnQ5w42jAzLi/HWSz6vg
wwz/h/FLUR8251vHjcLZHP0v3GEzNb39Zh9wPoVZvclw0NFwudew/zA/tBIu
v7/Rp2aa0Nnc/SU6amz6d7uGo8xHQjOWB/zuAA/o35wphmXLirK2wLzaCZ0z
M4SmpzD7tsGxnnuX3YeTlea8jGHzkEjiO0+oary7UQ3sZHOr/B7MWh5UK4A7
V9yu7JFkUqlwozMqa9h0sK6CxYN3fjZnwoNzvq0xNYUZr6S1W2GL0JMK2xYx
qauvYraiOps+zom1c5FiUnqjr8EU1nTNHbBlfOqlVXcSzeD4rAd8M4x31p60
3wHrZsxmPF0gVOqIlvMR+Nn8O+tEzM98g55XEWxw7d/VSvDx9dkqC3B2pqFi
7SyhXwstyCgsGSjId8Z+aU5brlmnwaY+j4MKYqcIZWtlHvCGA1UaeHHY3+/5
t1i58HuF2DlrEaFcmxyOEA4NGJsZxvlcV0+sktX87/hJQsNS/CRPwUlsJ2UO
zj9/KGb4D/hN11z8dcSHcmqncjF8L8e/02PkU/8YX59fBosCr6kaDSE/WHn9
yXBhsM5aG+RTfbv9c/m1bPp1+uL0euRbn+FfKxiwlUjJ/XIf6mHsTvtZ9L94
kscJQX62N4nMauDQBSXLaDgnajzGG7569s7LWiGhVzzTy1fBJuO2Uf0YP1W0
xT0J61u1Z3T7Z7CgsU8rAj6WpfQhAvWAzyspKYa1OgeOW6JeWMY1POyA84OV
pkQvCeVE/2Z8D+6P8LtgLvbmxfbXxPsX/aXICPXm4H2O1XlY4+H0qSnU+496
OpuYsKydYFAL9Uuh2bzjnTg+rOa1uKjvzLtt+zLh3s+nuGpwmWmKriXMM/5N
fyustLRJ0hj2W6mlFIv6ynfc/V4cH/b7zJ5vRf291c6U48IBo3XhLY34v7Cz
5Ykw1ydabQz3Y6kuY+QCHLTmgvx/cH92hyyJ2QQv5Sbsr8R9yytcFVCP+E1S
PGb1Hu3yw00D4XAKK/rSDMa/4w4lGcL/co+y0cT9WvfAY6IL+dHAausKRf+J
zBpnDly2eqxZRTyer3zOGk6hAb6vawh1EMxyGLBEqP4ePu57mRm9EBHyuVDl
bVoxvgdcEjPLe2D5NmcpZ/h/vx/+ASzaob4=
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1: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
lZ+0tOyBlW4/VVKG///vA/8FR0FOlw==
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1: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
vhWUm/I1Q9wvOkS7A+D/vZ/9BVpu1bw=
              "]]]}, {}, 
           Directive[
            Opacity[1], 
            RGBColor[0.790588, 0.201176, 0.], 
            EdgeForm[
             Directive[
              Thickness[Tiny], 
              Opacity[0.4]]], 
            PointSize[Large], 
            FaceForm[{
              Opacity[0.5], 
              RGBColor[1., 0.607843, 0.]}]], {
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.5539, 15.5511}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.37, 15.11}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.55, 15.5}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.2167, 15.7}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.65, 16.04}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.4, 15.66}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.24, 15.09}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.59, 16.28}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.24, 15.27}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.34, 14.96}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.52, 16.2}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.505, 15.7467}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.55, 15.64}], Automatic, 
             Offset[
             10.976]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {}}, {
         GeoBackground -> GeoStyling["GeoPlotMap"], GeoRange -> 
          Entity["Country", "Slovenia"], 
          Method -> {"VectorMapRemoveLabels" -> True}}]], 
      "BasicGeoRange" -> {{45.4221989814682, 46.8766703081093}, {
       13.375469555147898`, 16.611456060592502`}}, "OriginalInput" -> HoldForm[
        GeoGraphics[{
          GeoStyling[], {
           Directive[
            Opacity[1], 
            RGBColor[0.790588, 0.201176, 0.], 
            EdgeForm[
             Directive[
              Thickness[Tiny], 
              Opacity[0.4]]], 
            PointSize[Large], 
            FaceForm[{
              Opacity[0.5], 
              RGBColor[1., 0.607843, 0.]}]], {
            Polygon[
             GeoPosition[CompressedData["
1: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
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1:eJxl1Xs0lGkcB3BhV6ZaYlwrcoktlwcpYzfmiRiGcJTdyC1rS1sdyW6Kauq0
2EpaaTCTWxdFIoNcEgZhdRkiyqhEWpdEWnUk1X79W3+85z2f83ue932f5/n9
fq9eSLj3r7IyMjIhuGbvnwOybF9SDl1t3h5dKCLURz02gLmWQw+2lfi+hdsG
XTqc4HLbXoF2MaEyVQMtPDi4bCq8EnHraGncO/iV1Pb7myWERjb9K1jvwKEp
ofs4eqWEugtezATCirs727ZcJ/S3xtP3iuCdLy9/vgp/fGTI7oftlMYkUtg5
bh6JcuTQLQkuTL8yQous+SOX4WJjI2YzHKbGIaWwlOGlaF9BqHRCLfkVzP7v
qHxXOaG75/vvN1zHoTq7FovU4bryLIdQeCLPe3s0bJ46FL8TvpsxqZWP+UFu
BnXX4JHmO+ysyq/9YUfDHj5sambwNvMGobxjHRfDYaXTnt3TVYSKrQ7PkcDV
1coay6oJHVfiejyG7ep1rSPgQZ+MTlknDt1b90z4Yw2h07rfTG6DD0lYYQwx
oZ0mixKa4fDKaZFrPaFDG/QHNJwx39KZ19BAqM59D41IOFFdJDgJSxVKW2tg
aXTfcvYtQv3qV7UXwPvOjNe0NhK6KjRVLg2O06rlJzUT+lM7KbsO67ofP+X5
D6HZCxdeSID7F2tXDSOeso92n4F1im0GUxAf4x6pOg8rLJQ3OA7HWw6P58Bh
yQ3GGfCyPVuDj8F3lJtvVLQQ6tuin/sHvOGTn5zMXbhXPOAMlzSNZPvD7ADW
DjeYIau9uQbeqZv6hAULCiM4rvcInWsa/vEK1u8qHBh1QDwg21Xhb9jZKd2j
GPFNcuPskzA3fTcjTkKo7OvJ8SxYr+Xq0z64eqvcdCKsv85R2bIV+y29qS6A
++uCXdLgDzPpxo6wFb87xh2+49P/mgVvahT3Pmgj1GJIEuAPjyvuOuN1n1Cr
/KiKJfDzRJv3Zu14XtCRzJuz57lIbiYUnk40Yd+Ap4bN2UYPCD37NnIjDx4b
8488D2dMHIzIg20lKopunYT2OR5LWQNrxRyP6kF8LyPXKAq2MaaBvg+/dmOa
p6gR+ay2Ysz8225C7VW9UmPgcJWj4tvwlR0uNkvg+T8r0Mdw7+oNejqwrh4z
RwIb9iXk96CemoWr/4qB93QULT8HC3MKmwykhC5RPJXEgQeffEzJgQufrrHo
Qf3aL3M4lNRDaPK23LOdcMlwgdEkvkf1MI/Lh2N1usQfYEOvkndmcG2CpumJ
R4R+CtI26UL/2CrPyN/28Gtv/5TWdQmuVbng0Ib1uwcMyUTNxl0PC/2wn4ZT
/OrNsG2gEXmI89FuSM9eDz/2rn6pD8drXtvvA88UTPXF4LyXcpUyQ+EivolG
LPIlTLtSNQmW7D9gyb1NqNl39Ta5cL9yMKcd+XrJ667FRVhrZN6BbDjibNDR
3+FLo4LbHOT/qSyrC7fgoFiuyg9NhLJUworyYIela3g81Fsgo/TZCNxUwDpx
D/XFlnOKX4T1i2wSnghQf6+6Jd4L4CkhoaOo3yY1Dc4LjM9ji+Tn1hF6xM7I
Wwhb+CX1m8FPw31XMGGlRxaZ6ah/PVbHcmuY//58mkYtoc88DsZYwUy1qubn
6C+b33SoTrBR3+eYc1PQfzaq1UrewK1ig9gF8Dzl4FFNjNccHlk5H/1M9f7G
SVNYtb22pQf9cnS4O2QXXPbO3icW9iz4ZU7F7Pv+zEq2Rb/tWekm+wCeKLdb
G4L+/eX/4H92OaQZ
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1: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
bVoxvgdcEjPLe2D5NmcpZ/h/vx/+ASzaob4=
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1:eJxl2Hk8lc37B3AcDrIkj6XsWcqScyuRrUxRJ9mXrBFFylbiQfimyPKERAht
FCpbKUqSI6KdCvWjkEiWSogk6fs53z9/z19e79c9M657rrmvmTnLd+238+Hi
4OCgcXJwsP+yDrbmLvAxicnmZEXXaQbxtDDlN+VnEnFH9StXZhgk4fK8SANs
OLinhvMHg9zeJjApvIhJjko+zIiD62qGWbvgEmUnR2OYXtR0/iV87Vghjxz6
L+3zUm6Gdd4+DdjynUFmcm9u+AjX5tf7WE0xSM+FIeM/MOcPo5jubwwy+OgO
TUOASbQbSuTJOIPMq651dYa9Dzmt9/zKIB2LIjZcgfcnD6eafcH/Iyt2t8B+
e2nXOWGv/1gq6AoyyXve1f39Ywzyf2kectFwurfj+AHYJLAhpRWOK7QuHYZp
70f6jIWYZNvo1cjznxmknUO/LgqO+K1nkw03d1iUl8OdqjF2WzH+lR1GkgXw
8nuTfk/QX6LUS6ofXjyXZBU/yiAiq/fL04TRXyqyUwwuvupgrAK/Vbk74AH3
if06oAOH1049CIFbe5cFbocfxcq6soYZhOVof6kAdlPbqTEPn/8WuD0QNqLE
pafQXr5Pf9wV9j9xTzWZHd+b4aFVcJiDzsYOxLc5rfXaWXh8S6fPJ8wfB6d/
ZwXs1xaW7Yf5TS1a0JqFS/8s7aubYBD9htjRTtg+rWvBAPnxePZevwheHlb8
4hDWwyOtnu4IOGGldRUd+bz4JadWA9aozesvhQt+tIhwwN8da0gP8r/AUb3r
MebDTKw67cBPBunPUm6bht0XTOa+/EI8DsEDEmjf29vN6PrNIIsvtL3VhnVl
ixVrOSjyNrT2Qw7M90rBkw8+tLo3n3cxk3z74HzwAHwn3j5ZE66t5ZvthqO2
NwZpL2bnt/LKAKwQKnVTF17v4F3/HD7hpBBpBx/78B+BAk6KhFgEX8+AT0c+
m3kDy1/hT2+Es2Vk0jN5KFK8JiptBHaQzDpkA486F323EGEScxHvqZXcFDFt
k9n6HL4wxZ/2GS5X+l02DP/cJMorxU8RiZcNXT9gifr610WLKJKS8IlDZgmT
DKrZaPEJ/ds/Yh74PEX7osVcpwPYNrhKmcPc43lbzIQpMuDg7yUBtwY/fua5
mCJvhI64TyI+Wmym9n4xijAzFHZw4nnfNumb6fC0SOpXBVi3ozf7MNzI4pPS
hlseDA10wycjmh4Gwyfo3yS2wgtydO5j8MKgfkAA7HqmZcYVZj2TWVcgThEp
+fvDlnDa4KT8K0mK5K4tKJSGnUTTIjcso0iG8dKIr4iHU/HmPjdpiox53hS9
Cg+sfCDaLEURxYzoI2bw0nv8oe/wfKKb4+FP5HfiVvgNIkORnld+W9/BgktW
RBnIUuSu9PbT5+AGNV7hJjmKZJsMqbDXe0xFQKe3AkXOaoxbW8FqyrmdhsoU
qRf/h98PDiE74vhWUORT8NJnO2H2Z3JuJUVG1HvcfeElv7vnRmCfh1sUPOCK
Tfuz16lSpO6ea6ExvGF/aF+UGkWUNnKdVIa5W+boKzQoclnCze4P1m9FjZ76
Ok2KXCk1lHgLa5p+OMTNQHxa/+zLgh3jvaQt2HYQPWwF9+rO+pZSFKEF2F4X
gcNkjB2kVlMkteDH8ieoPy7LUqM94KDK9O5IeD5vpldtDUWCxTsDKPjWyi83
uOFd6x6K8cKPnpWEymhRRLfXt7gZ9e79u9oZT8Sjs1VGyBBeXTSYXIZ42WWI
ARtmNR40gCc2K9Dk4ODWgWRbdYpU57HsRWEf2RHfzZgPHnOprXWov9avnMbk
4cnSuOfbYPFIZ9o4XMNvd4xi1/cWzpIgzNcPN0NbUZj8vat5J+brfdiNj8XY
H9YzB+9mYnyLrdW5DnDiZElIJazRMRiiBydnyuyRQzwGe30qabBqy/D+WZiu
EvzrOPafvuCPTKdVFLm3a37UE17kNyvxGu9XqS74lm39etsEHszvvlWlc8Uw
c8CGJYD5ZfT/ffExfNX08EUnzE+QoLnlM5ih/zVTeM2/faD8zI9COKU/PyQQ
HtnT7WINR3x5ldAEax78fo4bFsyR9mVoU+SpfGPFO14muX+32DYD3vZxXfZ9
ON76mFwUPBuYNJEHR9wgnsfhiWN39OLh0VIbs01w5+L8LD/Yw+PJojTYRZF+
YB+saLCTGQ5v5yy/5g1rFg9EnWQ/d346awcP33VzuQjbFAk4boRX+qp+jYCT
T7sPqcMLQt2l7PFKM8+PqLDjCfdoi4ZttQuPf6AzyUa6UaQQbOjsWnAJnmSW
KXjB89f1dyXB7sdLn9TDBaMFD/XhX0e9ru2BczRUK0VghfbutbdgZX7fHT08
TCKcGmtYupYiXVdpflHwwXNj+bd18L1bjB3RgeNaLru9hP/ao1PDB0uuZo7m
6FIk0mb6xQA3k8xWG3vlraPIhpRq7zlYqUb35ys9ihhZ/BpagHO4PWTMDShi
r6KS0wzzXEjWaDeiyO+ebCUWfNH5r+uNGyiStDeUtxJu4pU2KYJfe76YDYVT
oml6u+B7X2Y/xsISQvWdfcaoD86tmSlwy1lB7S6CfLX43zkBe/UrP5c3ocjg
QtfmRFi5e2QXw5QiQlk6+ZlwuePR6mZ432rZvjg4/42pwN+bKWK2TzetCXaJ
yUpdykR++NqHvsKvtYbVJGH7fB4nCu9vtTtKc9gM+9nyqg4t2NWusLJsG/Lh
eGxmM7ye19BvAq4rGqoTgeV89lloWlDk/Hqjb6/Z40Wbj7+0pIjo/JPecti8
8lLwFWuK+O/+fOw0fKOtfHksPFlDe8GOT6t0T0oz2v+TECVtCz/pP2WljPFY
b/w7+eFVHXlDsuYUYZeJMRqTvHQPVKix/Le9DtdMD8LpqlVlv9D+V77sihdw
UQlLrAPx7miqbK+CNemL2+vxfrct+s8GwJUhDIXFWyli0lO2ZxN8yl0+5cQW
injrmUgIwyPh9BsmmL89tAudNVxMUnBnal8t5r8q+IFrNGysd8HAcSPirXOr
coO//d57Sg4+YCPYPc2J/WdVSdpL5PNcUFrmALymNLxGFvnml0jUZsEOZ6tq
hwwp8k496WgFu320mHct1lO7VrSpBczy17C1xXq7mWVk0sPBJLuPmP6livV5
qCaiPQlecVNrrgHr+337Rpoj/CQu160F9eD8+OUWc/h/+w7qdQwrR9MFDrod
lElHvbnF0NlkDC9Kl/URRj2K3lOoLwRP3b3AT0P9Sv7+mdb9ZwuRnzMT4Uc9
HBkYi/4HdvQ4nZCA/Yp26ajwVTguqaMqWYUiS5qEd7+CGeo5n8Kxvy1bm5v9
Gz5mMPP7IzzhH9O4FuMvNFx3uon2YcPWYSdgsbXhGyxRry3P38irYMeTECKk
jXp9ZPTBcRZs3nH/+g34kv+BgEQ4rTFv/wjqt2Ki5of38Om0wsJE+N7S/S9o
mC+9n0lTT1GfE1+pBq2ATZMf5gfBs0MZPJfhvNiTicvwfnHbbcrY892y4XYC
H+pz/BLH+ka4SFrywQyeiyeZvH0Nn+HRefMApnL4X3AgvwoZLULeaL9whJcu
Aldzt4XMof7379hrLwWLfdBl0dE+Uv9z/W72ermamv8Jzqq2nGCvn1iZTK12
9OegbTwiiPVVvyR2zhD5SLd1+CwHT3kOZVfCdsN0BzPYJlB8XyJMPk599ITF
+1dcegIf1+czcIXV9Lx8ryF/4TlnxJJh+1bJKArjO0/MO4fDfWUy1bLwj/Wj
15xg3uuBM2WI90ZdqZwWrHDn5EU15PeUmdOcFByg1aSjiXwsKeOxtYNf3BV0
vYR8CdQ/uLkT9tX5q9EF+RQ0LYmTZH8vPJdzzZQo8ij/cdVnvJ9i0eG4M8sp
0ve5mX4f/t93KU8Rx/Ls+AZ4VOlb4gXYYZ1kzFt4LN3rgCq8ZZFP/xisn6ek
wcL5Kr2rqpzdP1StQv0XzmMZMfcfp8Pntm+XOyX5b/fn+FhzIZ57vRf1PsM/
v+hYOcBGYfT5F3A87/OKKPb3LmfnawYPuAmXNMGyikFWKvCTM0Im0/Cy1c4S
ExIUWa1bT1zZ9Yy77HoozpNcln0t92GV+CYZKzxPW1tTron6N5WiKOIAn72z
6mk0zLNRN4YLlgtKTGiGV/FP5zqjf2y45SVl7E+s9aFDTTivOgo68RJYx/17
7agozvOLBE5ZwVaJ3JsKRJD/DKkYJmyY13WuEOfnJA3f8RRYSKAwcjlcmzLT
3g0vG8kvnsB52yw0XnMV9tNlMekJ/DiP25zUvpIOSwVuF+0SwH5dciGjFZZY
X1y4XhD1rb2omwvnBXu68N4RnPdl3EKdpGHrCrWTXbgPhOR0/G0Jcx1e499K
p0iAR6eLJhyivoyjBPeH6YthrEVw/RHaHw64tVoulIXx09YkmrnT8D0X+/w5
DftEMJcrc1GkzWs37QT8jXfyos8f3DftH7aNwddSG41vLTCIzwfHjYLs883K
lTFncb+6NzLx2gGuYsS0uczjPtmg/vwsbPCc64sw7me+rrxl9+ElgQHSY7i/
lZ+0tOyBlW4/VVKG///vA/8FR0FOlw==
              "]]], 
            Polygon[
             GeoPosition[CompressedData["
1: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
vhWUm/I1Q9wvOkS7A+D/vZ/9BVpu1bw=
              "]]]}, {}, 
           Directive[
            Opacity[1], 
            RGBColor[0.790588, 0.201176, 0.], 
            EdgeForm[
             Directive[
              Thickness[Tiny], 
              Opacity[0.4]]], 
            PointSize[Large], 
            FaceForm[{
              Opacity[0.5], 
              RGBColor[1., 0.607843, 0.]}]], {
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.5539, 15.5511}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.37, 15.11}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.55, 15.5}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.2167, 15.7}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.65, 16.04}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.4, 15.66}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.24, 15.09}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.59, 16.28}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.24, 15.27}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.34, 14.96}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.52, 16.2}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.505, 15.7467}], Automatic, 
             Offset[10.976]], 
            Inset[
             Graphics[{
               Directive[
                Opacity[1], 
                RGBColor[0.790588, 0.201176, 0.], 
                PointSize[Large]], 
               EdgeForm[], 
               Disk[{0, 0}]}], 
             GeoPosition[{46.55, 15.64}], Automatic, 
             Offset[
             10.976]], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, {}}, {
         GeoBackground -> GeoStyling["GeoPlotMap"], GeoRange -> 
          Entity["Country", "Slovenia"], 
          Method -> {"VectorMapRemoveLabels" -> True}}]], 
      "BasicGeoRange" -> {{45.34947541513614, 46.949393874441355`}, {
       13.213670229875667`, 16.773255385864733`}}, 
      "GeoGraphicsOptions" -> {
       GeoBackground -> GeoStyling["StreetMapNoLabels"], GeoCenter -> 
        GeoPosition[{46.14943464478875, 14.9934628078702}], GeoGridLines -> 
        None, GeoGridLinesStyle -> GrayLevel[0.4, 0.3], 
        GeoGridRange -> {{13.213670229875667`, 16.773255385864733`}, {
         50.99473611361632, 53.304391986988364`}}, GeoGridRangePadding -> 
        None, GeoModel -> "ITRF00", GeoProjection -> "Mercator", 
        GeoRange -> {{45.34947541513614, 46.949393874441355`}, {
         13.213670229875667`, 16.773255385864733`}}, GeoRangePadding -> Full, 
        GeoResolution -> Automatic, GeoServer -> {Automatic}, GeoZoomLevel -> 
        8, MetaInformation -> <|
         "GeoMetaInformation" -> <|"Attribution" -> Row[{
               Hyperlink["Wolfram Knowledgebase", "https://www.wolfram.com/"],
                ", ", 
               Hyperlink[
               "\[Copyright] OpenStreetMap contributors", 
                "https://www.openstreetmap.org/copyright"]}], "GeoModel" -> 
            "ITRF00", 
            "LonLatBox" -> {{13.213670229875667`, 16.773255385864733`}, {
             45.34947541513614, 46.949393874441355`}}, 
            "PlotRange" -> {{13.2110595703125, 16.776123046875}, {
             50.9930419921875, 53.3056640625}}, "Projection" -> "Mercator", 
            "Software" -> 
            "Created with the Wolfram Language: www.wolfram.com", 
            "TileSources" -> {"Wolfram", "OSM"}|>|>}}, 
    PlotRange -> {{13.213670229875667`, 16.773255385864733`}, {
     50.99473611361632, 53.304391986988364`}}, PlotRangeClipping -> True, 
    PlotRangePadding -> None, DefaultBaseStyle -> "GeoGraphics"], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Zemljevid 1: Poslovalnice Trgovin Jager\"", TextForm]], 
     "InlineText"], 
    Text["Zemljevid 1: Poslovalnice Trgovin Jager"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.9291586412040806`*^9, 3.9291588037007923`*^9, 
  3.9291588728434086`*^9, 3.9291589077336845`*^9, 3.929159168407692*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"ae820da4-84e9-a44f-a8e0-1591cd13e420"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mesta", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<BistricaObDravi\>\"", ",", "\"\<Podravska\>\"", ",", "2792"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Velenje\>\"", ",", "\"\<Savinjska\>\"", ",", "25132"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<SelnicaObDravi\>\"", ",", "\"\<Podravska\>\"", ",", "1084"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Rogatec\>\"", ",", "\"\<Savinjska\>\"", ",", "2998"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Radenci\>\"", ",", "\"\<Pomurska\>\"", ",", "2125"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Pragersko\>\"", ",", "\"\<Podravska\>\"", ",", "2074"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Prebold\>\"", ",", "\"\<Savinjska\>\"", ",", "3281"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Odranci\>\"", ",", "\"\<Pomurska\>\"", ",", "1342"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Celje\>\"", ",", "\"\<Savinjska\>\"", ",", "49593"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Mozirje\>\"", ",", "\"\<Savinjska\>\"", ",", "3342"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Ljutomer\>\"", ",", "\"\<Pomurska\>\"", ",", "3375"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<SpodnjiDuplek\>\"", ",", "\"\<Podravska\>\"", ",", "3264"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Maribor\>\"", ",", "\"\<Podravska\>\"", ",", "111374"}], 
      "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.929159838429411*^9, 3.929159838429411*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"0ed1a8fa-e09c-d945-b26b-136d354051f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tabelaRegijPoslovalnic", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Mesto\>\"", "->", 
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"\"\<Regija\>\"", "->", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", 
        RowBox[{"\"\<Prebivalci\>\"", "->", 
         RowBox[{"#", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}]}], "|>"}], "&"}], ",", "mesta"}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.929159623923498*^9, 3.929159623923498*^9}, {
   3.929159669395319*^9, 3.9291596871754684`*^9}, 3.9291598517750034`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"0847ee80-f217-0845-a84f-4c3f19615535"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Mesto" -> "BistricaObDravi", "Regija" -> "Podravska", "Prebivalci" -> 
        2792|>, <|
       "Mesto" -> "Velenje", "Regija" -> "Savinjska", "Prebivalci" -> 
        25132|>, <|
       "Mesto" -> "SelnicaObDravi", "Regija" -> "Podravska", "Prebivalci" -> 
        1084|>, <|
       "Mesto" -> "Rogatec", "Regija" -> "Savinjska", "Prebivalci" -> 
        2998|>, <|
       "Mesto" -> "Radenci", "Regija" -> "Pomurska", "Prebivalci" -> 2125|>, <|
       "Mesto" -> "Pragersko", "Regija" -> "Podravska", "Prebivalci" -> 
        2074|>, <|
       "Mesto" -> "Prebold", "Regija" -> "Savinjska", "Prebivalci" -> 
        3281|>, <|
       "Mesto" -> "Odranci", "Regija" -> "Pomurska", "Prebivalci" -> 1342|>, <|
       "Mesto" -> "Celje", "Regija" -> "Savinjska", "Prebivalci" -> 49593|>, <|
       "Mesto" -> "Mozirje", "Regija" -> "Savinjska", "Prebivalci" -> 
        3342|>, <|
       "Mesto" -> "Ljutomer", "Regija" -> "Pomurska", "Prebivalci" -> 
        3375|>, <|
       "Mesto" -> "SpodnjiDuplek", "Regija" -> "Podravska", "Prebivalci" -> 
        3264|>, <|
       "Mesto" -> "Maribor", "Regija" -> "Podravska", "Prebivalci" -> 
        111374|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Mesto"} -> 
        1, {All, "Regija"} -> 1, {All, "Prebivalci"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Mesto" -> TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
            "Regija" -> TypeSystem`PackageScope`AtomShape[94.5], "Prebivalci" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 3, {All}]], 13, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Mesto", "Regija", "Prebivalci"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Podravska", "Pomurska", "Savinjska"]], 
         TypeSystem`Atom[Integer]}], 13], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Mesto"} -> 
        1, {All, "Regija"} -> 1, {All, "Prebivalci"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Mesto" -> TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
            "Regija" -> TypeSystem`PackageScope`AtomShape[94.5], "Prebivalci" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 3, {All}]], 13, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Mesto", "Regija", "Prebivalci"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Podravska", "Pomurska", "Savinjska"]], 
         TypeSystem`Atom[Integer]}], 13], "Path" -> {}, "DisplayedRowCount" -> 
     13, "DisplayedColumnCount" -> 3, "DataRowCount" -> 13, "DataColumnCount" -> 
     3, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Mesto", 
                  Style[
                  "Mesto", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Mesto"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Mesto"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Regija", 
                  Style[
                  "Regija", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Regija"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Regija"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Prebivalci", 
                  Style[
                  "Prebivalci", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Prebivalci"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Prebivalci"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["BistricaObDravi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2792"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Velenje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25132"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SelnicaObDravi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1084"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Rogatec", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2998"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Radenci", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2125"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Pragersko", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2074"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Prebold", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3281"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Odranci", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1342"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Celje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Mozirje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3342"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Ljutomer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3375"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SpodnjiDuplek", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3264"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Maribor", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Mesto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Regija"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["111374"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Prebivalci"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{345.5, {194.63403328722342`, 200.36596671277658`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{345.5, {194.63403328722342`, 200.36596671277658`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.929160134772585*^9, 3.929160832943314*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"aa5d558e-6f3e-524f-8270-b21fac1598d7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"povprecjePrihodkovODProdajeNaPoslovalnico2022", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"215400000", "/", "41"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291600616020355`*^9, 3.9291601163044415`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"47386ed4-bb85-7b4a-981c-0786667372c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pridodkiOdProdajePoslovalnicVTabeli", "=", 
   RowBox[{"povprecjePrihodkovODProdajeNaPoslovalnico2022", "*", "13"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9291601542347317`*^9, 3.9291602061475105`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"9e8c478b-a835-7546-b3ce-103b857da3f5"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291603047420807`*^9, 3.9291603244969177`*^9}, {
  3.929160457643074*^9, 
  3.929160470623743*^9}},ExpressionUUID->"3f0a7318-252d-7241-8cf9-\
a1c10ca5dcfc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"skupnoSteviloPrebivalcevVTabeli", "=", 
   RowBox[{"Total", "[", 
    RowBox[{"mesta", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291604739816666`*^9, 3.9291604966917496`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"d5b49e1f-e645-e04e-869f-9098711b2e66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodkiOdProdajeGledeSteviloPrebivalcevMesta", "=", 
   RowBox[{"Round", "[", 
    RowBox[{"povprecjePrihodkovODProdajeNaPoslovalnico2022", "*", 
     RowBox[{
      RowBox[{"mesta", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "3"}], "]"}], "]"}], "/", 
      "skupnoSteviloPrebivalcevVTabeli"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291605055446606`*^9, 3.9291605325312233`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"95e66aeb-0899-bf4b-bee2-6e0c61cf8d2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tabelaRegijPoslovalnic", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"MapThread", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"#1", ",", "#2"}], "]"}], "&"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "mesta", ",", "prihodkiOdProdajeGledeSteviloPrebivalcevMesta"}], 
        "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Mesto\>\"", ",", "\"\<Regija\>\"", ",", "\"\<Prebivalci\>\"", ",", 
       "\"\<Prihodki od prodaje (eur)\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.929160548441824*^9, 3.929160559662901*^9}, {
  3.9291606384548187`*^9, 3.929160689851761*^9}, {3.929160786042959*^9, 
  3.929160791315935*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"4e7c4587-3ec7-fa4f-bb89-dea84e577370"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "Mesto", "Regija", "Prebivalci", "Prihodki od prodaje (eur)"}, {
       "BistricaObDravi", "Podravska", 2792, 69263}, {
       "Velenje", "Savinjska", 25132, 623465}, {
       "SelnicaObDravi", "Podravska", 1084, 26891}, {
       "Rogatec", "Savinjska", 2998, 74373}, {
       "Radenci", "Pomurska", 2125, 52716}, {
       "Pragersko", "Podravska", 2074, 51451}, {
       "Prebold", "Savinjska", 3281, 81394}, {
       "Odranci", "Pomurska", 1342, 33292}, {
       "Celje", "Savinjska", 49593, 1230284}, {
       "Mozirje", "Savinjska", 3342, 82907}, {
       "Ljutomer", "Pomurska", 3375, 83726}, {
       "SpodnjiDuplek", "Podravska", 3264, 80972}, {
       "Maribor", "Podravska", 111374, 2762924}}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
           TypeSystem`PackageScope`AtomShape[94.5], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 4, {All}]], 14, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Podravska", "Pomurska", "Regija", "Savinjska"]], 
         TypeSystem`AnyType, TypeSystem`AnyType}], 14], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
           TypeSystem`PackageScope`AtomShape[94.5], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 4, {All}]], 14, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Podravska", "Pomurska", "Regija", "Savinjska"]], 
         TypeSystem`AnyType, TypeSystem`AnyType}], 14], "Path" -> {}, 
     "DisplayedRowCount" -> 14, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     14, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["Mesto", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Regija", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Prebivalci", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Prihodki od prodaje (eur)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["BistricaObDravi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2792"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["69263"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Velenje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["25132"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["623465"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SelnicaObDravi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1084"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["26891"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Rogatec", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2998"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["74373"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Radenci", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2125"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["52716"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Pragersko", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2074"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["51451"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Prebold", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3281"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["81394"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Odranci", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1342"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["33292"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Celje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49593"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1230284"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Mozirje", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Savinjska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3342"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82907"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Ljutomer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Pomurska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3375"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["83726"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["SpodnjiDuplek", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3264"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80972"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Maribor", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{168.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Podravska", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["111374"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2762924"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   With[{
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{687.5, {194.63403328722342`, 200.36596671277658`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{687.5, {194.63403328722342`, 200.36596671277658`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9291605604319735`*^9, {3.92916063978191*^9, 3.929160690321923*^9}, {
   3.929160792161951*^9, 3.929160801224989*^9}, 3.929160846102801*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"49385231-4eae-ea45-98c5-87badc8c762d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929160337676771*^9, 3.929160337676771*^9}, 
   3.929160370644457*^9, 
   3.9291604520654316`*^9},ExpressionUUID->"1b1b24b0-dbc5-2a4b-8554-\
4e8ef618e879"],

Cell[BoxData[
 TemplateBox[{
  "JoinAcross", "ntable", 
   "\"Dataset at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) does not contain a \
valid list of associations.\"", 2, 95, 10, 31121415267264603903, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.929160338474844*^9, {3.9291603722850113`*^9, 3.929160376686611*^9}, {
   3.9291607263731136`*^9, 
   3.929160727061659*^9}},ExpressionUUID->"90dcd2a3-7fd0-9647-9590-\
5c4e27082c5e"],

Cell[BoxData[
 TemplateBox[{
  "JoinAcross", "invlc", 
   "\"The argument \\!\\(\\*RowBox[{\\\"Dataset\\\", RowBox[{\\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"13\\\", \\\"\[RightSkeleton]\\\"}], \
\\\"]\\\"}]}]\\) is not a list of Associations.\"", 2, 95, 11, 
   31121415267264603903, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.929160338474844*^9, {3.9291603722850113`*^9, 3.9291603766968403`*^9}},
 CellLabel->
  "During evaluation of \
In[95]:=",ExpressionUUID->"58f5d3ea-e0cd-314d-b21f-028a1d47c7da"],

Cell[BoxData[
 TemplateBox[{
  "General", "interr2", 
   "\:f3b5An unknown internal error occurred. Consult \
Internal`$LastInternalFailure for potential information.\:f3b5", 2, 95, 12, 
   31121415267264603903, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.929160338474844*^9, {3.9291603722850113`*^9, 3.9291603767562904`*^9}, {
   3.9291607605627937`*^9, 
   3.9291607609625397`*^9}},ExpressionUUID->"353f862d-55d1-1449-a0b8-\
48637b4bfaa0"]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929160753375065*^9, 
  3.929160753375065*^9}},ExpressionUUID->"e5cc4acc-288b-bf4e-baba-\
53ddd535ace7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["POSLOVANJE",
 FontSize->26,
 FontWeight->"Bold",
 FontColor->RGBColor[0., 0., 0.]]], "Chapter",
 CellChangeTimes->{{3.9241645142153416`*^9, 
  3.924164517065607*^9}},ExpressionUUID->"a74e9b55-0092-8a46-be5e-\
57247f453836"],

Cell["\<\
- podjetje uspe\[SHacek]no posluje \[ZHacek]e od samega za\[CHacek]etka, \
zavezano je k spo\[SHacek]tovanju poslovnosti in se prednostno oskrbuje v \
lokalnem okolju

- PRIHODKI OD PRODAJE: vsi skupni fakturirani zneski, ki jih opazovana enota \
zara\[CHacek]una v nekem odbdobju
- POSLOVNI IZID POSLOVANJA: razlika med prihodki od prodaje in \
stro\[SHacek]ki poslovanja podjetja v nekem obdobju
- \[CapitalCHacek]ISTI DOBI\[CapitalCHacek]EK: dobi\[CHacek]ek, ki ga \
podjetje ustvari po od\[SHacek]tevanju vseh stro\[SHacek]kov od prihodkov
\
\>", "Text",
 CellChangeTimes->{{3.92486299882942*^9, 3.9248630007936745`*^9}, {
  3.9248633926062984`*^9, 
  3.9248635561746407`*^9}},ExpressionUUID->"8a700c9d-344d-c947-971d-\
241a7cf10c48"],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"ListLinePlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "88.2", ",", "99.4", ",", "110.2", ",", "122.4", ",", "131.6", ",", 
          "145.5", ",", "167.0", ",", "191.3", ",", "215.4"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        "                                                         ", 
        RowBox[{"{", 
         RowBox[{
         "3.9", ",", "5.8", ",", "7.9", ",", "8.1", ",", "8.9", ",", "10.1", 
          ",", "14.8", ",", "17.9", ",", "17.5"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        "                                                         ", 
        RowBox[{"{", 
         RowBox[{
         "3.2", ",", "5.0", ",", "7.1", ",", "6.6", ",", "7.3", ",", "8.2", 
          ",", "12.0", ",", "14.6", ",", "14.3"}], "}"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"PlotLegends", "->", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Prihodki od prodaje\>\"", ",", 
         "\"\<Poslovni izid poslovanja\>\"", ",", 
         "\"\<\[CapitalCHacek]isti dobi\[CHacek]ek\>\""}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<Leto\>\"", ",", "\"\<Denar (milijoni eur)\>\""}], 
        "}"}]}], ",", "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"DataRange", "->", 
       RowBox[{"{", 
        RowBox[{"2014", ",", "2022"}], "}"}]}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "                ", 
   RowBox[{"Text", "[", "\"\<Graf 1: Poslovanje podjetja\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.924863365172966*^9, 3.9248633656967735`*^9}, {
   3.924863572308438*^9, 3.924863578008173*^9}, 3.924863624699018*^9},
 CellLabel->"In[57]:=",ExpressionUUID->"10b63eec-bad6-d641-a03b-976b8c99120f"],

Cell["", "Text",ExpressionUUID->"eebe8d9f-585a-a049-97ab-15d7e6e36be4"],

Cell[BoxData[
 TemplateBox[{
   FrameBox[
    TemplateBox[{
      GraphicsBox[{{}, 
        InterpretationBox[{
          TagBox[{{}, {}, 
            TagBox[{
              RGBColor[0.368417, 0.506779, 0.709798], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 88.2}, {2015., 99.4}, {2016., 110.2}, {2017., 
               122.4}, {2018., 131.6}, {2019., 145.5}, {2020., 167.}, {2021., 
               191.3}, {2022., 215.4}}]}, 
             Annotation[#, "Charting`Private`Tag#1"]& ], 
            TagBox[{
              RGBColor[0.880722, 0.611041, 0.142051], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 3.9}, {2015., 5.8}, {2016., 7.9}, {2017., 
               8.1}, {2018., 8.9}, {2019., 10.1}, {2020., 14.8}, {2021., 
               17.9}, {2022., 17.5}}]}, 
             Annotation[#, "Charting`Private`Tag#2"]& ], 
            TagBox[{
              RGBColor[0.560181, 0.691569, 0.194885], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 3.2}, {2015., 5.}, {2016., 7.1}, {2017., 
               6.6}, {2018., 7.3}, {2019., 8.2}, {2020., 12.}, {2021., 
               14.6}, {2022., 14.3}}]}, 
             Annotation[#, "Charting`Private`Tag#3"]& ]}, {
           "WolframDynamicHighlight", <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
          StyleBox[
           DynamicBox[
            (Charting`HighlightActionBox["DynamicHighlight", {}, 
             Slot["HighlightElements"], 
             Slot["LayoutOptions"], 
             Slot["Meta"], 
             Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                Annotation[{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 88.2}, {2015., 99.4}, {2016., 110.2}, {2017., 
                   122.4}, {2018., 131.6}, {2019., 145.5}, {2020., 167.}, {
                   2021., 191.3}, {2022., 215.4}}]}, 
                 "Charting`Private`Tag#1"], 
                Annotation[{
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 3.9}, {2015., 5.8}, {2016., 7.9}, {2017., 
                   8.1}, {2018., 8.9}, {2019., 10.1}, {2020., 14.8}, {2021., 
                   17.9}, {2022., 17.5}}]}, "Charting`Private`Tag#2"], 
                Annotation[{
                  Hue[0.1421359549995791, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 3.2}, {2015., 5.}, {2016., 7.1}, {2017., 
                   6.6}, {2018., 7.3}, {2019., 8.2}, {2020., 12.}, {2021., 
                   14.6}, {2022., 14.3}}]}, "Charting`Private`Tag#3"]}}, <|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, 
                 "PlotRange" -> {{2013.833333333338, 2022.}, {0, 215.4}}, 
                 "Frame" -> {{False, False}, {False, False}}, 
                 "AxesOrigin" -> {2013.833333333338, 0}, 
                 "ImageSize" -> {360, 360/GoldenRatio}, 
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> 
                 False|>|>]]& )[<|
             "HighlightElements" -> <|
               "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
              "LayoutOptions" -> <|
               "PanelPlotLayout" -> <||>, 
                "PlotRange" -> {{2013.833333333338, 2022.}, {0, 215.4}}, 
                "Frame" -> {{False, False}, {False, False}}, 
                "AxesOrigin" -> {2013.833333333338, 0}, 
                "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True},
                 "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
                "DefaultStyle" -> {
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]]}, 
                "HighlightLabelingFunctions" -> <|
                 "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                  "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                False|>, 
              "Meta" -> <|
               "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>], 
            ImageSizeCache -> {{
             4.503599627370496*^15, -4.503599627370496*^15}, {
             4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
           False]}, 
         Annotation[{{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 88.2}, {2015., 99.4}, {2016., 110.2}, {2017., 
               122.4}, {2018., 131.6}, {2019., 145.5}, {2020., 167.}, {2021., 
               191.3}, {2022., 215.4}}]}, "Charting`Private`Tag#1"], 
            Annotation[{
              Hue[0.9060679774997897, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.880722, 0.611041, 0.142051], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 3.9}, {2015., 5.8}, {2016., 7.9}, {2017., 8.1}, {
               2018., 8.9}, {2019., 10.1}, {2020., 14.8}, {2021., 17.9}, {
               2022., 17.5}}]}, "Charting`Private`Tag#2"], 
            Annotation[{
              Hue[0.1421359549995791, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.560181, 0.691569, 0.194885], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 3.2}, {2015., 5.}, {2016., 7.1}, {2017., 6.6}, {
               2018., 7.3}, {2019., 8.2}, {2020., 12.}, {2021., 14.6}, {2022.,
                14.3}}]}, "Charting`Private`Tag#3"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{2013.833333333338, 2022.}, {0, 215.4}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {2013.833333333338, 0}, 
             "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
             "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
             "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
          "DynamicHighlight"]], {{}, {}}}, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {
         FormBox[
          TagBox["\"Leto\"", HoldForm], TraditionalForm], 
         FormBox[
          TagBox["\"Denar (milijoni eur)\"", HoldForm], TraditionalForm]}, 
       AxesOrigin -> {2013.833333333338, 0}, DisplayFunction -> Identity, 
       Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], 
       Method -> {
        "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
         "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
         "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.922526, 0.385626, 0.209179], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.528488, 0.470624, 0.701351], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.772079, 0.431554, 0.102387], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.363898, 0.618501, 0.782349], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[1, 0.75, 0], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.647624, 0.37816, 0.614037], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.571589, 0.586483, 0.], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.915, 0.3325, 0.2125], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[
            0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
            AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
         "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
         "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic,
          "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{2013.833333333338, 2022.}, {0, 215.4}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], 
      FormBox[
       FormBox[
        TemplateBox[{
         "\"Prihodki od prodaje\"", "\"Poslovni izid poslovanja\"", 
          "\"\[CapitalCHacek]isti dobi\[CHacek]ek\""}, "LineLegend", 
         DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"LineLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]}, "Legended", 
     DisplayFunction -> (GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ), Editable -> True, 
     InterpretationFunction -> (RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
    False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Graf 1: Poslovanje podjetja\"", TextForm]], "InlineText"], 
    Text["Graf 1: Poslovanje podjetja"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.9248636252503033`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"6f360ad0-99e7-b946-a282-87670a0d3ab3"],

Cell["", "Text",
 CellChangeTimes->{{3.924863634675152*^9, 
  3.9248636532378235`*^9}},ExpressionUUID->"6a713a07-3352-9042-a484-\
58f302d81ccc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Povpre\[CHacek]en \[CHacek]isti dobi\[CHacek]ek, \
poslovni izid in prihodki prodaje med leti 2014-2022",
 FontSize->18,
 FontWeight->"Bold"]], "Chapter",
 CellChangeTimes->{{3.9291583158487473`*^9, 
  3.929158343280548*^9}},ExpressionUUID->"3fdf1034-8188-ca4a-96bb-\
1849851e694b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cistiDobicek", "=", 
   RowBox[{"{", 
    RowBox[{
    "3200000", ",", "5000000", ",", "7100000", ",", "6600000", ",", "7300000",
      ",", "8200000", ",", "12000000", ",", "14600000", ",", "14300000"}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291577961605625`*^9, 3.9291578643136578`*^9}, {
  3.9291579306038857`*^9, 3.929157982926466*^9}, {3.9291580479520855`*^9, 
  3.929158057420431*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"c0a3e1cd-60e7-9444-ab87-49cfd2d52b71"],

Cell[BoxData[
 RowBox[{
  RowBox[{"poslovniIzid", "=", 
   RowBox[{"{", 
    RowBox[{
    "3900000", ",", "5800000", ",", "7900000", ",", "8100000", ",", "8900000",
      ",", "10100000", ",", "14800000", ",", "17900000", ",", "17500000"}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"59517556-ffe1-7944-8dd7-71c44781183b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodkiProdaje", "=", 
   RowBox[{"{", 
    RowBox[{
    "88200000", ",", "99400000", ",", "110200000", ",", "122400000", ",", 
     "131600000", ",", "145500000", ",", "167000000", ",", "191300000", ",", 
     "215400000"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291579919475193`*^9, 3.929158044987295*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"16f58895-d3ed-6f40-8007-55a67a306284"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tabelePoslovanjePodjetja", " ", "=", 
   RowBox[{"{", 
    RowBox[{"cistiDobicek", ",", "poslovniIzid", ",", "prihodkiProdaje"}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.929157729139969*^9, 3.929157752923975*^9}, {
  3.929158077760088*^9, 3.9291580816772137`*^9}, {3.929158145417263*^9, 
  3.9291581811872616`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"823c6212-52a5-a145-8c3e-6f75e3f1fc07"],

Cell[BoxData[
 RowBox[{
  RowBox[{"skupneVsotePoslovanje", "=", 
   RowBox[{"Map", "[", 
    RowBox[{"Total", ",", "tabelePoslovanjePodjetja"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.929158189436533*^9, 3.9291582325141315`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"17b91a5b-9acf-8c47-85fc-748172037124"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"povprecnoPoslovanje", "=", 
  RowBox[{"Round", "[", 
   RowBox[{"skupneVsotePoslovanje", "/", "9"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.929158251364601*^9, 3.929158289920336*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"61cb3bf0-0a1b-4947-a3ea-4addad65f764"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8700000", ",", "10544444", ",", "141222222"}], "}"}]], "Output",
 CellChangeTimes->{{3.92915827983358*^9, 3.929158290359009*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"96967763-5b94-1f42-82e4-f02c77149671"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929158183827265*^9, 
  3.929158185641508*^9}},ExpressionUUID->"393eaaa6-ce3b-cc47-9d03-\
15460c81c2f7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9248636424622726`*^9, 
  3.924863650444477*^9}},ExpressionUUID->"868b4bb9-89f7-b844-a7ed-\
f2a788882050"],

Cell["\<\
- BILAN\[CapitalCHacek]NA VSOTA: skupna vrednost vseh sredtev, ki jih ima \
podjetje ter vse obveznosti, ki jih ima do drugih subjektov
- KAPITAL: trajen vir financiranja, ki ga v podjetje vlo\[ZHacek]ijo lastniki \
ali pa je nastal z uspe\[SHacek]nim poslovanjem podjetja
- VLAGANJE V OSNOVNA SREDSTVA: nalo\[ZHacek]be, v katere podjetje vlaga \
(dolgoro\[CHacek]ne nalo\[ZHacek]be)\
\>", "Text",
 CellChangeTimes->{{3.9248636750537853`*^9, 3.924863720939005*^9}, {
  3.9248637579170094`*^9, 
  3.924863871196108*^9}},ExpressionUUID->"033fbca7-3ec5-304b-a5f7-\
6556e3d4e0cd"],

Cell["", "Text",ExpressionUUID->"0c0b4978-3a51-0243-a6e5-4df09ad8c405"],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"ListLinePlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "52.9", ",", "58.9", ",", "58.5", ",", "64.1", ",", "72.3", ",", 
          "80.2", ",", "91.2", ",", "105.9", ",", "115.8"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        "                                                         ", 
        RowBox[{"{", 
         RowBox[{
         "31.6", ",", "36.6", ",", "37.9", ",", "44.6", ",", "38.6", ",", 
          "46.9", ",", "59.0", ",", "73.7", ",", "83.1"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        "                                                         ", 
        RowBox[{"{", 
         RowBox[{
         "4.4", ",", "5.8", ",", "8.1", ",", "5.0", ",", "7.5", ",", "11.6", 
          ",", "4.8", ",", "9.1", ",", "6.5"}], "}"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"PlotLegends", "->", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Bilan\[CHacek]na vsota\>\"", ",", "\"\<Kapital\>\"", ",", 
         "\"\<Vlaganja v osnovna sredstva\>\""}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<Leto\>\"", ",", "\"\<Denar (milijoni eur)\>\""}], 
        "}"}]}], ",", "\[IndentingNewLine]", 
      "                                                             ", 
      RowBox[{"DataRange", "->", 
       RowBox[{"{", 
        RowBox[{"2014", ",", "2022"}], "}"}]}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", "               ", 
   RowBox[{"Text", "[", "\"\<Graf 2: Poslovanje podjetja\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9248636656085243`*^9, 3.9248636678789997`*^9}, {
  3.9248638800561256`*^9, 3.9248638866761055`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"858981b5-6673-5147-be5b-cdf6f52193d2"],

Cell["", "Text",ExpressionUUID->"b989dfef-fc44-e544-b9df-2d818960e60a"],

Cell[BoxData[
 TemplateBox[{
   FrameBox[
    TemplateBox[{
      GraphicsBox[{{}, 
        InterpretationBox[{
          TagBox[{{}, {}, 
            TagBox[{
              RGBColor[0.368417, 0.506779, 0.709798], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 52.9}, {2015., 58.9}, {2016., 58.5}, {2017., 
               64.1}, {2018., 72.3}, {2019., 80.2}, {2020., 91.2}, {2021., 
               105.9}, {2022., 115.8}}]}, 
             Annotation[#, "Charting`Private`Tag#1"]& ], 
            TagBox[{
              RGBColor[0.880722, 0.611041, 0.142051], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 31.6}, {2015., 36.6}, {2016., 37.9}, {2017., 
               44.6}, {2018., 38.6}, {2019., 46.9}, {2020., 59.}, {2021., 
               73.7}, {2022., 83.1}}]}, 
             Annotation[#, "Charting`Private`Tag#2"]& ], 
            TagBox[{
              RGBColor[0.560181, 0.691569, 0.194885], 
              PointSize[
               NCache[
                Rational[7, 360], 0.019444444444444445`]], 
              AbsoluteThickness[2], 
              
              LineBox[{{2014., 4.4}, {2015., 5.8}, {2016., 8.1}, {2017., 
               5.}, {2018., 7.5}, {2019., 11.6}, {2020., 4.8}, {2021., 9.1}, {
               2022., 6.5}}]}, Annotation[#, "Charting`Private`Tag#3"]& ]}, {
           "WolframDynamicHighlight", <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
          StyleBox[
           DynamicBox[
            (Charting`HighlightActionBox["DynamicHighlight", {}, 
             Slot["HighlightElements"], 
             Slot["LayoutOptions"], 
             Slot["Meta"], 
             Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                Annotation[{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 52.9}, {2015., 58.9}, {2016., 58.5}, {2017., 
                   64.1}, {2018., 72.3}, {2019., 80.2}, {2020., 91.2}, {2021.,
                    105.9}, {2022., 115.8}}]}, "Charting`Private`Tag#1"], 
                Annotation[{
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 31.6}, {2015., 36.6}, {2016., 37.9}, {2017., 
                   44.6}, {2018., 38.6}, {2019., 46.9}, {2020., 59.}, {2021., 
                   73.7}, {2022., 83.1}}]}, "Charting`Private`Tag#2"], 
                Annotation[{
                  Hue[0.1421359549995791, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  
                  Line[{{2014., 4.4}, {2015., 5.8}, {2016., 8.1}, {2017., 
                   5.}, {2018., 7.5}, {2019., 11.6}, {2020., 4.8}, {2021., 
                   9.1}, {2022., 6.5}}]}, "Charting`Private`Tag#3"]}}, <|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, 
                 "PlotRange" -> {{2013.833333333338, 2022.}, {0, 115.8}}, 
                 "Frame" -> {{False, False}, {False, False}}, 
                 "AxesOrigin" -> {2013.833333333338, 0}, 
                 "ImageSize" -> {360, 360/GoldenRatio}, 
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> 
                 False|>|>]]& )[<|
             "HighlightElements" -> <|
               "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
              "LayoutOptions" -> <|
               "PanelPlotLayout" -> <||>, 
                "PlotRange" -> {{2013.833333333338, 2022.}, {0, 115.8}}, 
                "Frame" -> {{False, False}, {False, False}}, 
                "AxesOrigin" -> {2013.833333333338, 0}, 
                "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True},
                 "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
                "DefaultStyle" -> {
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]]}, 
                "HighlightLabelingFunctions" -> <|
                 "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                  "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                False|>, 
              "Meta" -> <|
               "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>], 
            ImageSizeCache -> {{
             4.503599627370496*^15, -4.503599627370496*^15}, {
             4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
           False]}, 
         Annotation[{{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 52.9}, {2015., 58.9}, {2016., 58.5}, {2017., 
               64.1}, {2018., 72.3}, {2019., 80.2}, {2020., 91.2}, {2021., 
               105.9}, {2022., 115.8}}]}, "Charting`Private`Tag#1"], 
            Annotation[{
              Hue[0.9060679774997897, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.880722, 0.611041, 0.142051], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 31.6}, {2015., 36.6}, {2016., 37.9}, {2017., 
               44.6}, {2018., 38.6}, {2019., 46.9}, {2020., 59.}, {2021., 
               73.7}, {2022., 83.1}}]}, "Charting`Private`Tag#2"], 
            Annotation[{
              Hue[0.1421359549995791, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[7, 360]], 
               RGBColor[0.560181, 0.691569, 0.194885], 
               AbsoluteThickness[2]], 
              
              Line[{{2014., 4.4}, {2015., 5.8}, {2016., 8.1}, {2017., 5.}, {
               2018., 7.5}, {2019., 11.6}, {2020., 4.8}, {2021., 9.1}, {2022.,
                6.5}}]}, "Charting`Private`Tag#3"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{2013.833333333338, 2022.}, {0, 115.8}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {2013.833333333338, 0}, 
             "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
             "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
             "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
          "DynamicHighlight"]], {{}, {}}}, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {
         FormBox[
          TagBox["\"Leto\"", HoldForm], TraditionalForm], 
         FormBox[
          TagBox["\"Denar (milijoni eur)\"", HoldForm], TraditionalForm]}, 
       AxesOrigin -> {2013.833333333338, 0}, DisplayFunction -> Identity, 
       Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], 
       Method -> {
        "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
         "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
         "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.922526, 0.385626, 0.209179], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.528488, 0.470624, 0.701351], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.772079, 0.431554, 0.102387], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.363898, 0.618501, 0.782349], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[1, 0.75, 0], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.647624, 0.37816, 0.614037], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.571589, 0.586483, 0.], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.915, 0.3325, 0.2125], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[
            0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
            AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
         "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
         "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic,
          "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}}, 
       PlotRange -> {{2013.833333333338, 2022.}, {0, 115.8}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], 
      FormBox[
       FormBox[
        TemplateBox[{
         "\"Bilan\[CHacek]na vsota\"", "\"Kapital\"", 
          "\"Vlaganja v osnovna sredstva\""}, "LineLegend", 
         DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"LineLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                "}"}], ",", 
              RowBox[{"{", 
                RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]}, "Legended", 
     DisplayFunction -> (GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ), Editable -> True, 
     InterpretationFunction -> (RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
    False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox["\"Graf 2: Poslovanje podjetja\"", TextForm]], "InlineText"], 
    Text["Graf 2: Poslovanje podjetja"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.924862984477527*^9, 3.924863887246086*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"d84e2c98-24f5-4a40-9084-4c5aee9f7564"],

Cell[TextData[{
 "\n\n",
 StyleBox["PRIHODKI OD PRODAJE PO SEGMENTIH:",
  FontSize->16,
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.924164733541699*^9, 3.924164794572655*^9}, {
  3.924186258892823*^9, 3.924186280503252*^9}, {3.92486293946941*^9, 
  3.9248629560171127`*^9}, {3.9248629904459095`*^9, 
  3.9248629926720734`*^9}},ExpressionUUID->"136f165f-4a01-0543-9cc7-\
525e8e472bd7"],

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Labeled", "[", 
     RowBox[{
      RowBox[{"Framed", "[", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"57", ",", "37", ",", "5", ",", "1"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         "\t                                               ", 
         RowBox[{"ChartLegends", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\[CapitalZHacek]ivila (57 %)\>\"", ",", 
            "\"\<Tehnika (37 %)\>\"", ",", "\"\<Tekstil (5 %)\>\"", ",", 
            "\"\<Gostinstvo (1 %)\>\""}], "}"}]}]}], "]"}], "]"}], ",", 
      "\[IndentingNewLine]", "                                       ", 
      RowBox[{"Text", "[", "\"\<Prihodki od prodaje 2018\>\"", "]"}]}], "]"}],
     ",", "\[IndentingNewLine]", "      ", 
    RowBox[{"Labeled", "[", 
     RowBox[{
      RowBox[{"Framed", "[", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"57", ",", "37", ",", "5", ",", "1"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         "\t                                              ", 
         RowBox[{"ChartLegends", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\[CapitalZHacek]ivila (57 %)\>\"", ",", 
            "\"\<Tehnika (37 %)\>\"", ",", "\"\<Tekstil (5 %)\>\"", ",", 
            "\"\<Gostinstvo (1 %)\>\""}], "}"}]}]}], "]"}], "]"}], ",", 
      "\[IndentingNewLine]", "                                      ", 
      RowBox[{"Text", "[", "\"\<Prihodki od prodaje 2019\>\"", "]"}]}], "]"}],
     ",", "\[IndentingNewLine]", "      ", 
    RowBox[{"Labeled", "[", 
     RowBox[{
      RowBox[{"Framed", "[", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"58", ",", "38", ",", "3", ",", "1"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         "\t                                              ", 
         RowBox[{"ChartLegends", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\[CapitalZHacek]ivila (58 %)\>\"", ",", 
            "\"\<Tehnika (38 %)\>\"", ",", "\"\<Tekstil (3 %)\>\"", ",", 
            "\"\<Gostinstvo (1 %)\>\""}], "}"}]}]}], "]"}], "]"}], ",", "  ", 
      "\[IndentingNewLine]", "                                      ", 
      RowBox[{"Text", "[", "\"\<Prihodki od prodaje 2020\>\"", "]"}]}], "]"}],
     ",", "\[IndentingNewLine]", "      ", 
    RowBox[{"Labeled", "[", 
     RowBox[{
      RowBox[{"Framed", "[", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"53", ",", "41", ",", "4", ",", "1", ",", "1"}], "}"}], ",",
          "\[IndentingNewLine]", 
         "\t                                              ", 
         RowBox[{"ChartLegends", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\[CapitalZHacek]ivila (53 %)\>\"", ",", 
            "\"\<Tehnika (41 %)\>\"", ",", "\"\<Tekstil (4 %)\>\"", ",", 
            "\"\<Gostinstvo (1 %)\>\"", ",", "\"\<Ostale storitve (1%)\>\""}],
            "}"}]}]}], "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
      "                                      ", 
      RowBox[{"Text", "[", "\"\<Prihodki od prodaje 2021\>\"", "]"}]}], "]"}],
     ",", "\[IndentingNewLine]", "      ", 
    RowBox[{"Labeled", "[", 
     RowBox[{
      RowBox[{"Framed", "[", 
       RowBox[{"PieChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"52", ",", "42", ",", "4", ",", "1", ",", "1"}], "}"}], ",",
          "\[IndentingNewLine]", 
         "\t                                              ", 
         RowBox[{"ChartLegends", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\[CapitalZHacek]ivila (52 %)\>\"", ",", 
            "\"\<Tehnika (42 %)\>\"", ",", "\"\<Tekstil (4 %)\>\"", ",", 
            "\"\<Gostinstvo (1 %)\>\"", ",", "\"\<Ostale storitve (1%)\>\""}],
            "}"}]}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
      "                                      ", 
      RowBox[{"Text", "[", "\"\<Prihodki od prodaje 2022\>\"", "]"}]}], 
     "]"}]}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"87fabc10-e026-5644-985c-53b5a20a9798"],

Cell["", "Text",ExpressionUUID->"e347ed38-7ef6-5340-8fdc-4c0080a7ff15"],

Cell[BoxData[
 TemplateBox[{
   TemplateBox[{
     FrameBox[
      TemplateBox[{
        GraphicsBox[{{}, {}, 
          
          DynamicModuleBox[{
           DynamicChart`click$212518$213153 = False, 
            DynamicChart`click$212524$213153 = False, 
            DynamicChart`click$212530$213153 = False, 
            DynamicChart`click$212536$213153 = False}, {{
             RGBColor[0.5, 0.5, 1.], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.5]}], {{{}, {{
                 RGBColor[0.982864, 0.7431472, 0.3262672], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.4398229715025712, 
                    3.141592653589793}]}, 
                    ImageSizeCache -> {{6.835786437626904, 
                    83.16421356237309}, {-40.16421356237309, 
                    15.061602527389514`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 57]& , TagBoxNote -> "57"], 
                    StyleBox["57", {}, StripOnInput -> False]], Annotation[#, 
                    Style[57, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212518$213153, 
                    FEPrivate`Not[DynamicChart`click$212518$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212518$213153, {{{1., 0.}, {0., 1.}}, {
                    0.04362864827930854, 0.19518335238774948`}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212518$213153}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.928, 0.5210666666666667, 0.2], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.7646015351590183`, -0.4398229715025712}]}, 
                    ImageSizeCache -> {{9.416500581233667, 
                    79.6666077404993}, {-3.4142135623731065`, 
                    36.16421356237309}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 37]& , TagBoxNote -> "37"], 
                    StyleBox["37", {}, StripOnInput -> False]], Annotation[#, 
                    Style[37, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212524$213153, 
                    FEPrivate`Not[DynamicChart`click$212524$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212524$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.0062821518156257, -0.19990131207314632`}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212524$213153}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0787608005179976`, -2.7646015351590183`}]}, 
                    ImageSizeCache -> {{6.908304167887923, 
                    46.41421356237311}, {-3.414213562373096, 
                    12.942790873535}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 5]& , TagBoxNote -> "5"], 
                    StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
                    Style[5, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212530$213153, 
                    FEPrivate`Not[DynamicChart`click$212530$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212530$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.1951833523877495, -0.043628648279308464`}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212530$213153}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.4992, 0.5552, 0.8309304], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.0787608005179976`}]}, 
                    ImageSizeCache -> {{6.835786437626905, 
                    46.41421356237311}, {-3.414213562373096, 
                    1.7217651550753512`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212536$213153, 
                    FEPrivate`Not[DynamicChart`click$212536$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212536$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212536$213153}]], 
                  "DelayedClickEffect"]}}}, {}}, {}}, {{{
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 57]& , TagBoxNote -> "57"], 
                    StyleBox["57", {}, StripOnInput -> False]], Annotation[#, 
                    Style[57, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212518$213153, 
                    FEPrivate`Not[DynamicChart`click$212518$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212518$213153, {{{1., 0.}, {0., 1.}}, {
                    0.04362864827930854, 0.19518335238774948`}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212518$213153}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 37]& , TagBoxNote -> "37"], 
                    StyleBox["37", {}, StripOnInput -> False]], Annotation[#, 
                    Style[37, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212524$213153, 
                    FEPrivate`Not[DynamicChart`click$212524$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212524$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.0062821518156257, -0.19990131207314632`}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212524$213153}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 5]& , TagBoxNote -> "5"], 
                    StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
                    Style[5, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212530$213153, 
                    FEPrivate`Not[DynamicChart`click$212530$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212530$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.1951833523877495, -0.043628648279308464`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212530$213153}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212536$213153, 
                    FEPrivate`Not[DynamicChart`click$212536$213153]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212536$213153, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212536$213153}]], 
                "DelayedClickEffect"]}, {}}, {}}, {}, {}}, 
           DynamicModuleValues :> {}], {{}, {}}, {{{}, {}, {}, {}}, {}}}, 
         ContentSelectable -> False, DisplayFunction -> Identity, 
         GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
         PlotRangePadding -> Scaled[0.09166666666666669]], 
        FormBox[
         FormBox[
          
          TemplateBox[{
           "\"\[CapitalZHacek]ivila (57 %)\"", "\"Tehnika (37 %)\"", 
            "\"Tekstil (5 %)\"", "\"Gostinstvo (1 %)\""}, "SwatchLegend", 
           DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.928, 0.5210666666666667, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.928, 0.5210666666666667, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> 
                    RGBColor[
                    0.7116405333333333, 0.4816, 0.5483194666666666]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None", ",", "None", ",", "None"}], 
                    "}"}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True], TraditionalForm], TraditionalForm]}, 
       "Legended", DisplayFunction -> (GridBox[{{
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"], 
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline], 
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, GridBoxItemSize -> Automatic, 
         BaselinePosition -> {1, 1}]& ), Editable -> True, 
       InterpretationFunction -> (RowBox[{"Legended", "[", 
          RowBox[{#, ",", 
            RowBox[{"Placed", "[", 
              RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
      False], 
     InterpretationBox[
      Cell[
       BoxData[
        FormBox["\"Prihodki od prodaje 2018\"", TextForm]], "InlineText"], 
      Text["Prihodki od prodaje 2018"]]}, "Labeled", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Labeled", "[", 
       RowBox[{#, ",", #2, ",", 
         RowBox[{"{", "}"}]}], "]"}]& )], 
   TemplateBox[{
     FrameBox[
      TemplateBox[{
        GraphicsBox[{{}, {}, 
          
          DynamicModuleBox[{
           DynamicChart`click$212635$213178 = False, 
            DynamicChart`click$212641$213178 = False, 
            DynamicChart`click$212647$213178 = False, 
            DynamicChart`click$212653$213178 = False}, {{
             RGBColor[0.5, 0.5, 1.], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.5]}], {{{}, {{
                 RGBColor[0.982864, 0.7431472, 0.3262672], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.4398229715025712, 
                    3.141592653589793}]}, 
                    ImageSizeCache -> {{6.835786437626904, 
                    83.16421356237309}, {-40.16421356237309, 
                    15.061602527389514`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 57]& , TagBoxNote -> "57"], 
                    StyleBox["57", {}, StripOnInput -> False]], Annotation[#, 
                    Style[57, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212635$213178, 
                    FEPrivate`Not[DynamicChart`click$212635$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212635$213178, {{{1., 0.}, {0., 1.}}, {
                    0.04362864827930854, 0.19518335238774948`}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212635$213178}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.928, 0.5210666666666667, 0.2], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.7646015351590183`, -0.4398229715025712}]}, 
                    ImageSizeCache -> {{9.416500581233667, 
                    79.6666077404993}, {-3.4142135623731065`, 
                    36.16421356237309}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 37]& , TagBoxNote -> "37"], 
                    StyleBox["37", {}, StripOnInput -> False]], Annotation[#, 
                    Style[37, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212641$213178, 
                    FEPrivate`Not[DynamicChart`click$212641$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212641$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.0062821518156257, -0.19990131207314632`}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212641$213178}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0787608005179976`, -2.7646015351590183`}]}, 
                    ImageSizeCache -> {{6.908304167887923, 
                    46.41421356237311}, {-3.414213562373096, 
                    12.942790873535}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 5]& , TagBoxNote -> "5"], 
                    StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
                    Style[5, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212647$213178, 
                    FEPrivate`Not[DynamicChart`click$212647$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212647$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.1951833523877495, -0.043628648279308464`}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212647$213178}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.4992, 0.5552, 0.8309304], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.0787608005179976`}]}, 
                    ImageSizeCache -> {{6.835786437626905, 
                    46.41421356237311}, {-3.414213562373096, 
                    1.7217651550753512`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212653$213178, 
                    FEPrivate`Not[DynamicChart`click$212653$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212653$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212653$213178}]], 
                  "DelayedClickEffect"]}}}, {}}, {}}, {{{
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 57]& , TagBoxNote -> "57"], 
                    StyleBox["57", {}, StripOnInput -> False]], Annotation[#, 
                    Style[57, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212635$213178, 
                    FEPrivate`Not[DynamicChart`click$212635$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212635$213178, {{{1., 0.}, {0., 1.}}, {
                    0.04362864827930854, 0.19518335238774948`}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212635$213178}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 37]& , TagBoxNote -> "37"], 
                    StyleBox["37", {}, StripOnInput -> False]], Annotation[#, 
                    Style[37, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212641$213178, 
                    FEPrivate`Not[DynamicChart`click$212641$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212641$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.0062821518156257, -0.19990131207314632`}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212641$213178}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 5]& , TagBoxNote -> "5"], 
                    StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
                    Style[5, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212647$213178, 
                    FEPrivate`Not[DynamicChart`click$212647$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212647$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.1951833523877495, -0.043628648279308464`}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212647$213178}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212653$213178, 
                    FEPrivate`Not[DynamicChart`click$212653$213178]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212653$213178, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212653$213178}]], 
                "DelayedClickEffect"]}, {}}, {}}, {}, {}}, 
           DynamicModuleValues :> {}], {{}, {}}, {{{}, {}, {}, {}}, {}}}, 
         ContentSelectable -> False, DisplayFunction -> Identity, 
         GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
         PlotRangePadding -> Scaled[0.09166666666666669]], 
        FormBox[
         FormBox[
          
          TemplateBox[{
           "\"\[CapitalZHacek]ivila (57 %)\"", "\"Tehnika (37 %)\"", 
            "\"Tekstil (5 %)\"", "\"Gostinstvo (1 %)\""}, "SwatchLegend", 
           DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.928, 0.5210666666666667, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.928, 0.5210666666666667, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> 
                    RGBColor[
                    0.7116405333333333, 0.4816, 0.5483194666666666]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None", ",", "None", ",", "None"}], 
                    "}"}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True], TraditionalForm], TraditionalForm]}, 
       "Legended", DisplayFunction -> (GridBox[{{
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"], 
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline], 
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, GridBoxItemSize -> Automatic, 
         BaselinePosition -> {1, 1}]& ), Editable -> True, 
       InterpretationFunction -> (RowBox[{"Legended", "[", 
          RowBox[{#, ",", 
            RowBox[{"Placed", "[", 
              RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
      False], 
     InterpretationBox[
      Cell[
       BoxData[
        FormBox["\"Prihodki od prodaje 2019\"", TextForm]], "InlineText"], 
      Text["Prihodki od prodaje 2019"]]}, "Labeled", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Labeled", "[", 
       RowBox[{#, ",", #2, ",", 
         RowBox[{"{", "}"}]}], "]"}]& )], 
   TemplateBox[{
     FrameBox[
      TemplateBox[{
        GraphicsBox[{{}, {}, 
          
          DynamicModuleBox[{
           DynamicChart`click$212752$213203 = False, 
            DynamicChart`click$212758$213203 = False, 
            DynamicChart`click$212764$213203 = False, 
            DynamicChart`click$212770$213203 = False}, {{
             RGBColor[0.5, 0.5, 1.], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.5]}], {{{}, {{
                 RGBColor[0.982864, 0.7431472, 0.3262672], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.5026548245743667, 
                    3.141592653589793}]}, 
                    ImageSizeCache -> {{7.6607864376269, 
                    91.3392135623731}, {-44.339213562373104`, 
                    18.389105837934924`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 58]& , TagBoxNote -> "58"], 
                    StyleBox["58", {}, StripOnInput -> False]], Annotation[#, 
                    Style[58, {}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212752$213203, 
                    FEPrivate`Not[DynamicChart`click$212752$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212752$213203, {{{1., 0.}, {0., 1.}}, {
                    0.04973797743297095, 0.19371663222572622`}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212752$213203}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.928, 0.5210666666666667, 0.2], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.8902652413026093`, -0.5026548245743667}]}, 
                    ImageSizeCache -> {{8.93081214900199, 
                    86.33891110314629}, {-3.9142135623730994`, 
                    39.339213562373104`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 38]& , TagBoxNote -> "38"], 
                    StyleBox["38", {}, StripOnInput -> False]], Annotation[#, 
                    Style[38, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212758$213203, 
                    FEPrivate`Not[DynamicChart`click$212758$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212758$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.025066646712860786`, -0.1984229402628956}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212758$213203}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0787608005179976`, -2.8902652413026093`}]}, 
                    ImageSizeCache -> {{7.740555940914025, 
                    50.91421356237311}, {-3.914213562373094, 
                    8.96750225101237}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 3]& , TagBoxNote -> "3"], 
                    StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
                    Style[3, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212764$213203, 
                    FEPrivate`Not[DynamicChart`click$212764$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212764$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.19753766811902754`, -0.0312868930080462}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212764$213203}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.4992, 0.5552, 0.8309304], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.0787608005179976`}]}, 
                    ImageSizeCache -> {{7.660786437626901, 
                    50.91421356237311}, {-3.914213562373094, 
                    1.4525203143455796`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212770$213203, 
                    FEPrivate`Not[DynamicChart`click$212770$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212770$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212770$213203}]], 
                  "DelayedClickEffect"]}}}, {}}, {}}, {{{
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 58]& , TagBoxNote -> "58"], 
                    StyleBox["58", {}, StripOnInput -> False]], Annotation[#, 
                    Style[58, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212752$213203, 
                    FEPrivate`Not[DynamicChart`click$212752$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212752$213203, {{{1., 0.}, {0., 1.}}, {
                    0.04973797743297095, 0.19371663222572622`}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212752$213203}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 38]& , TagBoxNote -> "38"], 
                    StyleBox["38", {}, StripOnInput -> False]], Annotation[#, 
                    Style[38, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212758$213203, 
                    FEPrivate`Not[DynamicChart`click$212758$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212758$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.025066646712860786`, -0.1984229402628956}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212758$213203}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 3]& , TagBoxNote -> "3"], 
                    StyleBox["3", {}, StripOnInput -> False]], Annotation[#, 
                    Style[3, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212764$213203, 
                    FEPrivate`Not[DynamicChart`click$212764$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212764$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.19753766811902754`, -0.0312868930080462}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212764$213203}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212770$213203, 
                    FEPrivate`Not[DynamicChart`click$212770$213203]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212770$213203, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212770$213203}]], 
                "DelayedClickEffect"]}, {}}, {}}, {}, {}}, 
           DynamicModuleValues :> {}], {{}, {}}, {{{}, {}, {}, {}}, {}}}, 
         ContentSelectable -> False, DisplayFunction -> Identity, 
         GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> {99., Automatic}, 
         PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangePadding -> 
         Scaled[0.09166666666666669]], 
        FormBox[
         FormBox[
          
          TemplateBox[{
           "\"\[CapitalZHacek]ivila (58 %)\"", "\"Tehnika (38 %)\"", 
            "\"Tekstil (3 %)\"", "\"Gostinstvo (1 %)\""}, "SwatchLegend", 
           DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.928, 0.5210666666666667, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.7116405333333333, 0.4816, 0.5483194666666666]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.928, 0.5210666666666667, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> 
                    RGBColor[
                    0.7116405333333333, 0.4816, 0.5483194666666666]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", "None", ",", "None", ",", "None"}], 
                    "}"}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True], TraditionalForm], TraditionalForm]}, 
       "Legended", DisplayFunction -> (GridBox[{{
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"], 
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline], 
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, GridBoxItemSize -> Automatic, 
         BaselinePosition -> {1, 1}]& ), Editable -> True, 
       InterpretationFunction -> (RowBox[{"Legended", "[", 
          RowBox[{#, ",", 
            RowBox[{"Placed", "[", 
              RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
      False], 
     InterpretationBox[
      Cell[
       BoxData[
        FormBox["\"Prihodki od prodaje 2020\"", TextForm]], "InlineText"], 
      Text["Prihodki od prodaje 2020"]]}, "Labeled", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Labeled", "[", 
       RowBox[{#, ",", #2, ",", 
         RowBox[{"{", "}"}]}], "]"}]& )], 
   TemplateBox[{
     FrameBox[
      TemplateBox[{
        GraphicsBox[{{}, {}, 
          
          DynamicModuleBox[{
           DynamicChart`click$212869$213231 = False, 
            DynamicChart`click$212875$213231 = False, 
            DynamicChart`click$212881$213231 = False, 
            DynamicChart`click$212887$213231 = False, 
            DynamicChart`click$212893$213231 = False}, {{
             RGBColor[0.5, 0.5, 1.], 
             EdgeForm[{
               GrayLevel[0], 
               Opacity[0.5]}], {{{}, {{
                 RGBColor[0.982864, 0.7431472, 0.3262672], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.18849555921538785`, 
                    3.141592653589793}]}, 
                    ImageSizeCache -> {{6.835786437626905, 
                    83.16421356237309}, {-40.1642135623731, 
                    6.300476873398485}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 53]& , TagBoxNote -> "53"], 
                    StyleBox["53", {}, StripOnInput -> False]], Annotation[#, 
                    Style[53, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212869$213231, 
                    FEPrivate`Not[DynamicChart`click$212869$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212869$213231, {{{1., 0.}, {0., 1.}}, {
                    0.0188216626637029, 0.199112392920616}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212869$213231}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[1., 0.544, 0.2], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.7646015351590183`, -0.18849555921538785`}]}, 
                    ImageSizeCache -> {{9.416500581233667, 
                    82.51327002665238}, {-3.4142135623731065`, 
                    36.16421356237309}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 41]& , TagBoxNote -> "41"], 
                    StyleBox["41", {}, StripOnInput -> False]], Annotation[#, 
                    Style[41, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212875$213231, 
                    FEPrivate`Not[DynamicChart`click$212875$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212875$213231, {{{1., 0.}, {0., 1.}}, {
                    0.018821662663702814`, -0.199112392920616}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212875$213231}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.784, 0.47519999999999996`, 0.2], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.015928947446201, -2.7646015351590183`}]}, 
                    ImageSizeCache -> {{7.125571164319847, 
                    46.41421356237311}, {-3.414213562373096, 
                    12.942790873535}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 4]& , TagBoxNote -> "4"], 
                    StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
                    Style[4, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212881$213231, 
                    FEPrivate`Not[DynamicChart`click$212881$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212881$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.19371663222572622`, -0.04973797743297097}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212881$213231}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.6754608, 0.4848, 0.7224792], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0787608005179976`, -3.015928947446201}]}, 
                    ImageSizeCache -> {{6.908304167887924, 
                    46.41421356237311}, {-3.4142135623730967`, 
                    4.020209895861285}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212887$213231, 
                    FEPrivate`Not[DynamicChart`click$212887$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212887$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.199112392920616, -0.018821662663702873`}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212887$213231}]], 
                  "DelayedClickEffect"]}, {
                 RGBColor[0.4992, 0.5552, 0.8309304], 
                 EdgeForm[{
                   GrayLevel[0], 
                   Opacity[0.5]}], 
                 TagBox[
                  GeometricTransformationBox[
                   TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.0787608005179976`}]}, 
                    ImageSizeCache -> {{6.835786437626905, 
                    46.41421356237311}, {-3.414213562373096, 
                    1.7217651550753512`}}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212893$213231, 
                    FEPrivate`Not[DynamicChart`click$212893$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                   Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$212893$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$212893$213231}]], 
                  "DelayedClickEffect"]}}}, {}}, {}}, {{{
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 53]& , TagBoxNote -> "53"], 
                    StyleBox["53", {}, StripOnInput -> False]], Annotation[#, 
                    Style[53, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212869$213231, 
                    FEPrivate`Not[DynamicChart`click$212869$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212869$213231, {{{1., 0.}, {0., 1.}}, {
                    0.0188216626637029, 0.199112392920616}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212869$213231}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 41]& , TagBoxNote -> "41"], 
                    StyleBox["41", {}, StripOnInput -> False]], Annotation[#, 
                    Style[41, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212875$213231, 
                    FEPrivate`Not[DynamicChart`click$212875$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212875$213231, {{{1., 0.}, {0., 1.}}, {
                    0.018821662663702814`, -0.199112392920616}}, {{1, 0}, {0, 
                   1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212875$213231}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 4]& , TagBoxNote -> "4"], 
                    StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
                    Style[4, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212881$213231, 
                    FEPrivate`Not[DynamicChart`click$212881$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212881$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.19371663222572622`, -0.04973797743297097}}, {{1,
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212881$213231}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212887$213231, 
                    FEPrivate`Not[DynamicChart`click$212887$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212887$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.199112392920616, -0.018821662663702873`}}, {{1, 
                   0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212887$213231}]], 
                "DelayedClickEffect"], 
               TagBox[
                GeometricTransformationBox[
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                  
                  EventHandlerTag[{
                   "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$212893$213231, 
                    FEPrivate`Not[DynamicChart`click$212893$213231]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                 Dynamic[
                  FEPrivate`If[
                  DynamicChart`click$212893$213231, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                  TrackedSymbols :> {DynamicChart`click$212893$213231}]], 
                "DelayedClickEffect"]}, {}}, {}}, {}, {}}, 
           DynamicModuleValues :> {}], {{}, {}}, {{{}, {}, {}, {}}, {}}}, 
         ContentSelectable -> False, DisplayFunction -> Identity, 
         GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
         PlotRangePadding -> Scaled[0.09166666666666669]], 
        FormBox[
         FormBox[
          
          TemplateBox[{
           "\"\[CapitalZHacek]ivila (53 %)\"", "\"Tehnika (41 %)\"", 
            "\"Tekstil (4 %)\"", "\"Gostinstvo (1 %)\"", 
            "\"Ostale storitve (1%)\""}, "SwatchLegend", 
           DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[1., 0.544, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.784, 0.47519999999999996`, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.6754608, 0.4848, 0.7224792]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> RGBColor[1., 0.544, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.784, 0.47519999999999996`, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.6754608, 0.4848, 0.7224792]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "None", ",", "None", ",", "None", ",", "None", ",", 
                    "None"}], "}"}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True], TraditionalForm], TraditionalForm]}, 
       "Legended", DisplayFunction -> (GridBox[{{
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"], 
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline], 
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, GridBoxItemSize -> Automatic, 
         BaselinePosition -> {1, 1}]& ), Editable -> True, 
       InterpretationFunction -> (RowBox[{"Legended", "[", 
          RowBox[{#, ",", 
            RowBox[{"Placed", "[", 
              RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], StripOnInput -> 
      False], 
     InterpretationBox[
      Cell[
       BoxData[
        FormBox["\"Prihodki od prodaje 2021\"", TextForm]], "InlineText"], 
      Text["Prihodki od prodaje 2021"]]}, "Labeled", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Labeled", "[", 
       RowBox[{#, ",", #2, ",", 
         RowBox[{"{", "}"}]}], "]"}]& )], 
   TemplateBox[{
     FrameBox[
      TemplateBox[{
        GraphicsBox[{{}, {}, 
          
          DynamicModuleBox[{
           DynamicChart`click$213009$213259 = False, 
            DynamicChart`click$213015$213259 = False, 
            DynamicChart`click$213021$213259 = False, 
            DynamicChart`click$213027$213259 = False, 
            DynamicChart`click$213033$213259 = False}, {{
             Directive[
              RGBColor[0.5, 0.5, 1.], 
              EdgeForm[
               Directive[
                GrayLevel[0], 
                Opacity[0.5]]]], {{{{{{}, {{
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    TagBox[
                    GeometricTransformationBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-0.1256637061435919, 
                    3.141592653589793}]}], "DelayedMouseEffectStyle"], 
                    StatusArea[#, 52]& , TagBoxNote -> "52"], 
                    StyleBox["52", {}, StripOnInput -> False]], Annotation[#, 
                    Style[52, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213009$213259, 
                    FEPrivate`Not[DynamicChart`click$213009$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                    Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$213009$213259, {{{1., 0.}, {0., 1.}}, {
                    0.012558103905862705`, 0.19960534568565433`}}, {{1, 0}, {
                    0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$213009$213259}]], 
                    "DelayedClickEffect"]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[1., 0.544, 0.2]], 
                    TagBox[
                    GeometricTransformationBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-2.7646015351590183`, -0.1256637061435919}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 42]& , 
                    TagBoxNote -> "42"], 
                    StyleBox["42", {}, StripOnInput -> False]], Annotation[#, 
                    Style[42, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213015$213259, 
                    FEPrivate`Not[DynamicChart`click$213015$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                    Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$213015$213259, {{{1., 0.}, {0., 1.}}, {
                    0.02506664671286081, -0.1984229402628956}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$213015$213259}]], 
                    "DelayedClickEffect"]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.784, 0.47519999999999996`, 0.2]], 
                    TagBox[
                    GeometricTransformationBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.015928947446201, -2.7646015351590183`}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 4]& , 
                    TagBoxNote -> "4"], 
                    StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
                    Style[4, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213021$213259, 
                    FEPrivate`Not[DynamicChart`click$213021$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                    Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$213021$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.19371663222572622`, -0.04973797743297097}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$213021$213259}]], 
                    "DelayedClickEffect"]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.6754608, 0.4848, 0.7224792]], 
                    TagBox[
                    GeometricTransformationBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.0787608005179976`, -3.015928947446201}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213027$213259, 
                    FEPrivate`Not[DynamicChart`click$213027$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                    Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$213027$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.199112392920616, -0.018821662663702873`}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$213027$213259}]], 
                    "DelayedClickEffect"]}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    TagBox[
                    GeometricTransformationBox[
                    TagBox[
                    TagBox[
                    TooltipBox[
                    TagBox[
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -3.0787608005179976`}]}], 
                    "DelayedMouseEffectStyle"], StatusArea[#, 1]& , 
                    TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213033$213259, 
                    FEPrivate`Not[DynamicChart`click$213033$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                    Dynamic[
                    FEPrivate`If[
                    DynamicChart`click$213033$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                    TrackedSymbols :> {DynamicChart`click$213033$213259}]], 
                    "DelayedClickEffect"]}}}}}, {}}, {{}}}}, {{{{
                TagBox[
                 GeometricTransformationBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 52]& , TagBoxNote -> "52"], 
                    StyleBox["52", {}, StripOnInput -> False]], Annotation[#, 
                    Style[52, {}], "Tooltip"]& ], 
                   
                   EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213009$213259, 
                    FEPrivate`Not[DynamicChart`click$213009$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                  Dynamic[
                   FEPrivate`If[
                   DynamicChart`click$213009$213259, {{{1., 0.}, {0., 1.}}, {
                    0.012558103905862705`, 0.19960534568565433`}}, {{1, 0}, {
                    0, 1}}, {{1, 0}, {0, 1}}], 
                   TrackedSymbols :> {DynamicChart`click$213009$213259}]], 
                 "DelayedClickEffect"], 
                TagBox[
                 GeometricTransformationBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 42]& , TagBoxNote -> "42"], 
                    StyleBox["42", {}, StripOnInput -> False]], Annotation[#, 
                    Style[42, {}], "Tooltip"]& ], 
                   
                   EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213015$213259, 
                    FEPrivate`Not[DynamicChart`click$213015$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                  Dynamic[
                   FEPrivate`If[
                   DynamicChart`click$213015$213259, {{{1., 0.}, {0., 1.}}, {
                    0.02506664671286081, -0.1984229402628956}}, {{1, 0}, {0, 
                    1}}, {{1, 0}, {0, 1}}], 
                   TrackedSymbols :> {DynamicChart`click$213015$213259}]], 
                 "DelayedClickEffect"], 
                TagBox[
                 GeometricTransformationBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 4]& , TagBoxNote -> "4"], 
                    StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
                    Style[4, {}], "Tooltip"]& ], 
                   
                   EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213021$213259, 
                    FEPrivate`Not[DynamicChart`click$213021$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                  Dynamic[
                   FEPrivate`If[
                   DynamicChart`click$213021$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.19371663222572622`, -0.04973797743297097}}, {{1,
                     0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                   TrackedSymbols :> {DynamicChart`click$213021$213259}]], 
                 "DelayedClickEffect"], 
                TagBox[
                 GeometricTransformationBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                   
                   EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213027$213259, 
                    FEPrivate`Not[DynamicChart`click$213027$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                  Dynamic[
                   FEPrivate`If[
                   DynamicChart`click$213027$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.199112392920616, -0.018821662663702873`}}, {{1, 
                    0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                   TrackedSymbols :> {DynamicChart`click$213027$213259}]], 
                 "DelayedClickEffect"], 
                TagBox[
                 GeometricTransformationBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    TagBox[{{}, {}}, StatusArea[#, 1]& , TagBoxNote -> "1"], 
                    StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
                    Style[1, {}], "Tooltip"]& ], 
                   
                   EventHandlerTag[{
                    "MouseClicked" :> 
                    FEPrivate`Set[DynamicChart`click$213033$213259, 
                    FEPrivate`Not[DynamicChart`click$213033$213259]], 
                    PassEventsDown -> True, Method -> "Preemptive", 
                    PassEventsUp -> True}]], 
                  Dynamic[
                   FEPrivate`If[
                   DynamicChart`click$213033$213259, {{{1., 0.}, {0., 
                    1.}}, {-0.19990131207314632`, -0.0062821518156256475`}}, \
{{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
                   TrackedSymbols :> {DynamicChart`click$213033$213259}]], 
                 "DelayedClickEffect"]}, {}}}, {}}, {}, {}}, 
           DynamicModuleValues :> {}], {{{}, {}}}, {{{{}, {}, {}, {}}}, {}}}, \
{DisplayFunction -> Identity, ContentSelectable -> False, GridLinesStyle -> 
          Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{-1., 1.}, {-1., 1.}}, 
          PlotRangePadding -> Scaled[0.09166666666666669]}], 
        FormBox[
         FormBox[
          
          TemplateBox[{
           "\"\[CapitalZHacek]ivila (52 %)\"", "\"Tehnika (42 %)\"", 
            "\"Tekstil (4 %)\"", "\"Gostinstvo (1 %)\"", 
            "\"Ostale storitve (1%)\""}, "SwatchLegend", 
           DisplayFunction -> (FormBox[
             StyleBox[
              StyleBox[
               PaneBox[
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[1., 0.544, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.784, 0.47519999999999996`, 0.2]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.6754608, 0.4848, 0.7224792]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                    GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.5]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                 "Grid"], Alignment -> Left, AppearanceElements -> None, 
                ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
              False], TraditionalForm]& ), 
           InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> RGBColor[1., 0.544, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.784, 0.47519999999999996`, 0.2]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.6754608, 0.4848, 0.7224792]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    
                    TemplateBox[<|"color" -> GrayLevel[0]|>, 
                    "GrayLevelColorSwatchTemplate"], ",", 
                    RowBox[{"Opacity", "[", "0.5`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "None", ",", "None", ",", "None", ",", "None", ",", 
                    "None"}], "}"}], "}"}]}], ",", 
                RowBox[{"LabelStyle", "\[Rule]", 
                  RowBox[{"{", "}"}]}], ",", 
                RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ),
            Editable -> True], TraditionalForm], TraditionalForm]}, 
       "Legended", DisplayFunction -> (GridBox[{{
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"], 
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline], 
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, GridBoxItemSize -> Automatic, 
         BaselinePosition -> {1, 1}]& ), 
       InterpretationFunction -> (RowBox[{"Legended", "[", 
          RowBox[{#, ",", 
            RowBox[{"Placed", "[", 
              RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> 
       True], StripOnInput -> False], 
     InterpretationBox[
      Cell[
       BoxData[
        FormBox["\"Prihodki od prodaje 2022\"", TextForm]], "InlineText"], 
      Text["Prihodki od prodaje 2022"]]}, "Labeled", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Labeled", "[", 
       RowBox[{#, ",", #2, ",", 
         RowBox[{"{", "}"}]}], "]"}]& )]},
  "RowDefault"]], "Output",
 CellChangeTimes->{3.924186285987658*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"1c0f5ad8-8540-1c41-b2dc-28d597b564c2"],

Cell["", "Text",ExpressionUUID->"e5a1854d-dea7-2d40-a23c-894433123629"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["POVPRE\[CapitalCHacek]JE PRINOSA PRIHODKOV PO \
SEGMENTIH PRODAJE MED LETI 2018-2022",
 FontSize->16,
 FontWeight->"Bold"]], "Chapter",
 CellChangeTimes->{{3.9291569980023556`*^9, 3.9291570600210075`*^9}, {
  3.929157614686077*^9, 
  3.929157617794567*^9}},ExpressionUUID->"6b5c3159-1d2b-634d-b30e-\
647d3b329f37"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodki2018", "=", 
   RowBox[{"{", 
    RowBox[{"57", ",", "37", ",", "5", ",", "1", ",", "0"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9291570816014423`*^9, 3.9291571065915775`*^9}, {
  3.929157268275877*^9, 3.9291572700029373`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"79d66b62-064a-9043-b6fd-7dd56a873b26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodki2019", "=", 
   RowBox[{"{", 
    RowBox[{"57", ",", "37", ",", "5", ",", "1", ",", "0"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9291571088831844`*^9, 3.9291571153238087`*^9}, 
   3.9291572727812424`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"541cfb7c-a2dd-6d4d-be3e-4941ad7026eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodki2020", "=", 
   RowBox[{"{", 
    RowBox[{"58", ",", "38", ",", "3", ",", "1", ",", "0"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9291571247611904`*^9, 3.929157140950121*^9}, 
   3.929157275512266*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"47836955-f128-3342-bd7d-9b2f94109e48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodki2021", "=", 
   RowBox[{"{", 
    RowBox[{"53", ",", "41", ",", "4", ",", "1", ",", "1"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.929157143143503*^9, 3.9291571610678654`*^9}, 
   3.9291572778122253`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"8c3860e1-6819-584c-9e59-ffe24283ce8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prihodki2022", "=", 
   RowBox[{"{", 
    RowBox[{"52", ",", "42", ",", "4", ",", "1", ",", "1"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9291571634679127`*^9, 3.929157186889454*^9}, 
   3.9291572800357456`*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"a1974406-07d4-254e-8d92-1dac855978ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dolzinaTabel", "=", 
   RowBox[{"Length", "[", "prihodki2018", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9291573109314117`*^9, 3.929157338445753*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"4dac8cf5-1326-7e4c-91ff-b2db76d580b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"poprecjePrihodkovProdaje", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", "dolzinaTabel", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.929157342345415*^9, 3.92915737178327*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"27fb8e53-1729-6b4d-ad24-fded021dcc50"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "<=", "dolzinaTabel"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", "          ", 
   RowBox[{
    RowBox[{"poprecjePrihodkovProdaje", "[", 
     RowBox[{"[", "i", "]"}], "]"}], "=", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"prihodki2018", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", 
        RowBox[{"prihodki2019", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", 
        RowBox[{"prihodki2020", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", 
        RowBox[{"prihodki2021", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "+", 
        RowBox[{"prihodki2022", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", "dolzinaTabel"}], 
     "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.929157375612318*^9, 3.929157516821615*^9}, {
  3.9291575529115353`*^9, 3.929157560669874*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"5c39ce3d-6fc7-244e-8fb9-786a4cce829d"],

Cell[CellGroupData[{

Cell[BoxData["poprecjePrihodkovProdaje"], "Input",
 CellChangeTimes->{{3.9291575271098423`*^9, 3.929157533699972*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"3e14a016-2bf6-324f-bef1-86d3f53c2d53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"55", ",", "39", ",", "4", ",", "1", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.92915752852009*^9, 3.9291575352710342`*^9}, 
   3.929157565981497*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"649d500a-b165-a846-85b4-f9279b25df34"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ZAPOSLENI",
 FontSize->26,
 FontWeight->"Bold",
 FontColor->RGBColor[0., 0., 0.]]], "Chapter",
 CellChangeTimes->{{3.924172668063181*^9, 
  3.924172669977272*^9}},ExpressionUUID->"1b5b0713-1fd1-c341-a295-\
105ddca13ebf"],

Cell["\<\
- podjetje se trudi zaposlenim nuditi prijazno, varno in stabilno delovno \
okolje
- spodbujajo osebnostno in strokovno rast vsakega posameznika
\
\>", "Text",
 CellChangeTimes->{{3.924174419322092*^9, 
  3.924174478136074*^9}},ExpressionUUID->"f08068d3-6fc0-cd45-ba4d-\
d8f2b15f78d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"leta", "[", "leto_", "]"}], ":=", 
  RowBox[{"\"\<Leto: \>\"", "<>", 
   RowBox[{"ToString", "[", "leto", "]"}]}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"bd66f8d5-eb02-8f48-8e65-638692380230"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"BarChart", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "399", ",", "457", ",", "515", ",", "580", ",", "648", ",", "702", ",", 
       "726", ",", "757", ",", "825"}], "}"}], ",", "\[IndentingNewLine]", 
     "                                   ", 
     RowBox[{"ChartLabels", "->", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"leta", "[", "leto", "]"}], ",", "\[IndentingNewLine]", 
        "                                                                     \
    ", 
        RowBox[{"{", 
         RowBox[{"leto", ",", "2014", ",", "2022"}], "}"}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", "                                   ", 
     RowBox[{"ImageSize", "->", 
      RowBox[{"{", 
       RowBox[{"600", ",", "400"}], "}"}]}], ",", "\[IndentingNewLine]", 
     "                                   ", 
     RowBox[{"AxesLabel", "->", 
      RowBox[{"{", 
       RowBox[{"None", ",", "\"\<\[CapitalSHacek]tevilo zaposlenih\>\""}], 
       "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", "\t       ", 
   RowBox[{
   "Text", "[", 
    "\"\<Diagram 2: \[CapitalSHacek]tevilo zaposlenih skozi leta\>\"", 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.924863920957685*^9, 3.924863927031971*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"e4727a1e-de18-804c-907d-ef25c62b518a"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.3707501820830299, 0.}, {9.451201747997086, 0.}}]}, {{}, {
       Directive[
        EdgeForm[
         Directive[
          Thickness[Small], 
          Opacity[0.637]]], 
        RGBColor[0.982864, 0.7431472, 0.3262672]], {{
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
             399.}, "RoundingRadius" -> 0], StatusArea[#, 399]& , TagBoxNote -> 
            "399"], 
           StyleBox["399", {}, StripOnInput -> False]], Annotation[#, 
           Style[399, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
             457.}, "RoundingRadius" -> 0], StatusArea[#, 457]& , TagBoxNote -> 
            "457"], 
           StyleBox["457", {}, StripOnInput -> False]], Annotation[#, 
           Style[457, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             515.}, "RoundingRadius" -> 0], StatusArea[#, 515]& , TagBoxNote -> 
            "515"], 
           StyleBox["515", {}, StripOnInput -> False]], Annotation[#, 
           Style[515, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 580.},
              "RoundingRadius" -> 0], StatusArea[#, 580]& , TagBoxNote -> 
            "580"], 
           StyleBox["580", {}, StripOnInput -> False]], Annotation[#, 
           Style[580, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 648.}, 
             "RoundingRadius" -> 0], StatusArea[#, 648]& , TagBoxNote -> 
            "648"], 
           StyleBox["648", {}, StripOnInput -> False]], Annotation[#, 
           Style[648, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{5.548798252002913, 0.}, {6.451201747997087, 702.}, 
             "RoundingRadius" -> 0], StatusArea[#, 702]& , TagBoxNote -> 
            "702"], 
           StyleBox["702", {}, StripOnInput -> False]], Annotation[#, 
           Style[702, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{6.548798252002913, 0.}, {7.451201747997087, 726.}, 
             "RoundingRadius" -> 0], StatusArea[#, 726]& , TagBoxNote -> 
            "726"], 
           StyleBox["726", {}, StripOnInput -> False]], Annotation[#, 
           Style[726, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{7.548798252002913, 0.}, {8.451201747997086, 757.}, 
             "RoundingRadius" -> 0], StatusArea[#, 757]& , TagBoxNote -> 
            "757"], 
           StyleBox["757", {}, StripOnInput -> False]], Annotation[#, 
           Style[757, {}], "Tooltip"]& ]}, {
         Directive[
          EdgeForm[
           Directive[
            Thickness[Small], 
            Opacity[0.637]]], 
          RGBColor[0.982864, 0.7431472, 0.3262672]], 
         TagBox[
          TooltipBox[
           TagBox[
            
            RectangleBox[{8.548798252002912, 0.}, {9.451201747997086, 825.}, 
             "RoundingRadius" -> 0], StatusArea[#, 825]& , TagBoxNote -> 
            "825"], 
           StyleBox["825", {}, StripOnInput -> False]], Annotation[#, 
           Style[825, {}], "Tooltip"]& ]}}}, {}, {}}, {}, {}, {}, {}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.3707501820830299, 0.}, {9.632810779315367, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.5487982520029133, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
              0.}]}], 
           LineBox[{{9.451201747997086, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {9.451201747997086, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {
             LineBox[{{1.4512017479970867`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
                0.}]}], 
             LineBox[{{1.5487982520029133`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {2.4512017479970867`, 
                0.}]}], 
             LineBox[{{2.5487982520029133`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {2.5487982520029133`, 
                0.}]}], 
             LineBox[{{3.4512017479970867`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {3.4512017479970867`, 
                0.}]}], 
             LineBox[{{3.5487982520029133`, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {3.5487982520029133`, 
                0.}]}], 
             LineBox[{{4.451201747997087, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {4.451201747997087, 
                0.}]}], 
             LineBox[{{4.548798252002913, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {4.548798252002913, 
                0.}]}], 
             LineBox[{{5.451201747997087, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {5.451201747997087, 
                0.}]}], 
             LineBox[{{5.548798252002913, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {5.548798252002913, 
                0.}]}], 
             LineBox[{{6.451201747997087, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {6.451201747997087, 
                0.}]}], 
             LineBox[{{6.548798252002913, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {6.548798252002913, 
                0.}]}], 
             LineBox[{{7.451201747997087, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {7.451201747997087, 
                0.}]}], 
             LineBox[{{7.548798252002913, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {7.548798252002913, 
                0.}]}], 
             LineBox[{{8.451201747997086, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {8.451201747997086, 
                0.}]}], 
             LineBox[{{8.548798252002912, 0.}, 
               
               Offset[{-7.347880794884119*^-16, -4.}, {8.548798252002912, 
                0.}]}]}, {}}}, 
          StyleBox[{
            Directive[
             Thickness[Tiny]], 
            Directive[
             Thickness[Tiny]], 
            StyleBox[{
              InsetBox[
               FormBox["\"Leto: 2014\"", TraditionalForm], 
               Offset[{0, -2}, {1., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2015\"", TraditionalForm], 
               Offset[{0, -2}, {2., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2016\"", TraditionalForm], 
               Offset[{0, -2}, {3., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2017\"", TraditionalForm], 
               Offset[{0, -2}, {4., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2018\"", TraditionalForm], 
               Offset[{0, -2}, {5., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2019\"", TraditionalForm], 
               Offset[{0, -2}, {6., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2020\"", TraditionalForm], 
               Offset[{0, -2}, {7., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2021\"", TraditionalForm], 
               Offset[{0, -2}, {7.999999999999999, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox["\"Leto: 2022\"", TraditionalForm], 
               Offset[{0, -2}, {9., 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
             StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
           False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
       "GraphicsAxes"}, StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, 
       FormBox[
        TagBox["\"\[CapitalSHacek]tevilo zaposlenih\"", HoldForm], 
        TraditionalForm]}, AxesOrigin -> {0.3707501820830299, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> {600, 400}, 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {None, Automatic}}], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox[
      "\"Diagram 2: \[CapitalSHacek]tevilo zaposlenih skozi leta\"", 
       TextForm]], "InlineText"], 
    Text["Diagram 2: \[CapitalSHacek]tevilo zaposlenih skozi leta"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.9241743760818386`*^9, {3.9248639213760166`*^9, 3.924863927399252*^9}, 
   3.924865618403549*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"1f5317ae-749e-a440-a9c4-15cda615d2d8"]
}, Open  ]],

Cell["", "Text",ExpressionUUID->"7c6ce05f-c7a3-414c-8f0f-1dc6cce513f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zaposlene\[CapitalZHacek]enske", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "490", "}"}], ",", 
    RowBox[{"{", "509", "}"}], ",", 
    RowBox[{"{", "504", "}"}], ",", 
    RowBox[{"{", "542", "}"}], ",", 
    RowBox[{"{", "586", "}"}]}], "}"}]}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"936895bd-1a2e-9f46-b3cc-81a98616977f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "490", "}"}], ",", 
   RowBox[{"{", "509", "}"}], ",", 
   RowBox[{"{", "504", "}"}], ",", 
   RowBox[{"{", "542", "}"}], ",", 
   RowBox[{"{", "586", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.924174662293272*^9, 3.924863940085827*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"750cd3e4-753e-284b-ab89-557fe1cc06c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zaposleniMo\[SHacek]ki", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "231", "}"}], ",", 
    RowBox[{"{", "262", "}"}], ",", 
    RowBox[{"{", "260", "}"}], ",", 
    RowBox[{"{", "278", "}"}], ",", 
    RowBox[{"{", "303", "}"}]}], "}"}]}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"d39842d0-a3cc-c746-a6b1-fcb74286c8c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "231", "}"}], ",", 
   RowBox[{"{", "262", "}"}], ",", 
   RowBox[{"{", "260", "}"}], ",", 
   RowBox[{"{", "278", "}"}], ",", 
   RowBox[{"{", "303", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9241746696895676`*^9, 3.924863941637623*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"83725949-c735-d644-992a-89e5db16ed8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"skupajZaposleni", "=", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Plus", ",", 
    RowBox[{"{", 
     RowBox[{
     "zaposlene\[CapitalZHacek]enske", ",", "zaposleniMo\[SHacek]ki"}], 
     "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"6073ddc0-da5d-9e47-b288-00d576a149d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "721", "}"}], ",", 
   RowBox[{"{", "771", "}"}], ",", 
   RowBox[{"{", "764", "}"}], ",", 
   RowBox[{"{", "820", "}"}], ",", 
   RowBox[{"{", "889", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.924174703917069*^9, 3.924863942685938*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"40dbdb23-26f0-084b-9c7a-8af7ef548e89"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"TableForm", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "zaposlene\[CapitalZHacek]enske", ",", "\[IndentingNewLine]", 
        "                                                   ", 
        RowBox[{"Round", "[", 
         RowBox[{"100", "*", 
          RowBox[{
          "zaposlene\[CapitalZHacek]enske", "/", "skupajZaposleni"}]}], "]"}],
         ",", "\[IndentingNewLine]", 
        "                                                   ", 
        "zaposleniMo\[SHacek]ki", ",", "\[IndentingNewLine]", 
        "                                                    ", 
        RowBox[{"Round", "[", 
         RowBox[{"100", "*", 
          RowBox[{"zaposleniMo\[SHacek]ki", "/", "skupajZaposleni"}]}], 
         "]"}]}], "}"}], ",", " ", "\[IndentingNewLine]", 
      "                                                      ", 
      RowBox[{"TableHeadings", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Zaposlene \[ZHacek]enske\>\"", ",", 
           "\"\<Odstotek \[ZHacek]ensk (%)\>\"", ",", 
           "\"\<Zaposleni mo\[SHacek]ki\>\"", ",", 
           "\"\<Odstotek mo\[SHacek]kih (%)\>\""}], "}"}], ",", " ", 
         "\[IndentingNewLine]", 
         "                                                                    \
                    ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<2018\>\"", ",", "\"\<2019\>\"", ",", "\"\<2020\>\"", ",", 
           "\"\<2021\>\"", ",", "\"\<2022\>\""}], "}"}]}], "}"}]}]}], "]"}], 
    "]"}], ",", "      ", "\[IndentingNewLine]", "                ", 
   RowBox[{
   "Text", "[", 
    "\"\<Tabela 1: \[CapitalSHacek]tevilo in odstotek zaposlenih glede na \
spol\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9241756621887302`*^9, 3.924175691969*^9}, {
  3.924863934256418*^9, 3.9248639481946316`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"a9c68c54-03f2-4a43-a1fb-72462e62f148"],

Cell["", "Text",ExpressionUUID->"f77e69b0-89ba-274b-a147-d5b523f18b12"],

Cell[BoxData[
 TemplateBox[{
   FrameBox[
    TagBox[
     TagBox[
      GridBox[{{
         StyleBox["\[Null]", ShowStringCharacters -> False], 
         TagBox["\"2018\"", HoldForm], 
         TagBox["\"2019\"", HoldForm], 
         TagBox["\"2020\"", HoldForm], 
         TagBox["\"2021\"", HoldForm], 
         TagBox["\"2022\"", HoldForm]}, {
         TagBox["\"Zaposlene \[ZHacek]enske\"", HoldForm], 
         TagBox[
          
          GridBox[{{"490"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"509"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"504"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"542"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"586"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column]}, {
         TagBox["\"Odstotek \[ZHacek]ensk (%)\"", HoldForm], 
         TagBox[
          
          GridBox[{{"68"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"66"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"66"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"66"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"66"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column]}, {
         TagBox["\"Zaposleni mo\[SHacek]ki\"", HoldForm], 
         TagBox[
          
          GridBox[{{"231"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"262"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"260"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"278"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"303"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column]}, {
         TagBox["\"Odstotek mo\[SHacek]kih (%)\"", HoldForm], 
         TagBox[
          
          GridBox[{{"32"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"34"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"34"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"34"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column], 
         TagBox[
          
          GridBox[{{"34"}}, ColumnAlignments -> Left, RowSpacings -> 0.5, 
           ColumnAlignments -> Left], Column]}}, RowSpacings -> 1, 
       ColumnSpacings -> 3, RowAlignments -> Baseline, ColumnAlignments -> 
       Left, GridBoxDividers -> {
        "Columns" -> {False, True, {False}, False}, 
         "Rows" -> {False, True, {False}, False}}, ColumnAlignments -> 
       Left], {OutputFormsDump`HeadedRows, OutputFormsDump`HeadedColumns}], 
     Function[BoxForm`e$, 
      TableForm[
      BoxForm`e$, 
       TableHeadings -> {{
         "Zaposlene \[ZHacek]enske", "Odstotek \[ZHacek]ensk (%)", 
          "Zaposleni mo\[SHacek]ki", "Odstotek mo\[SHacek]kih (%)"}, {
         "2018", "2019", "2020", "2021", "2022"}}]]], StripOnInput -> False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox[
      "\"Tabela 1: \[CapitalSHacek]tevilo in odstotek zaposlenih glede na \
spol\"", TextForm]], "InlineText"], 
    Text["Tabela 1: \[CapitalSHacek]tevilo in odstotek zaposlenih glede na \
spol"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.924863934666254*^9, 3.9248639484561844`*^9}},
 CellLabel->"Out[66]=",ExpressionUUID->"5c608817-dbad-1547-8284-0e3ae647785b"],

Cell["", "Text",ExpressionUUID->"aad6d03f-121d-5042-a916-0b23f0cdcc8e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.924863955506241*^9, 
  3.924863955506241*^9}},ExpressionUUID->"e2d12af0-130c-6543-b456-\
abe1e50c9adf"],

Cell["", "Text",ExpressionUUID->"157ebcec-209c-5748-abdd-3e0ae1bb01df"],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<C:\\\\Users\\\\HP\\\\Desktop\\\\Ra\[CHacek]unalni\[SHacek]ka orodja \
v matematiki\\\\Vrsta zaposlitve.xlsx\>\"", ",", "\"\<Dataset\>\"", ",", 
      RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "1"}]}], "]"}], "//", 
    "First"}], ",", "\[IndentingNewLine]", "                ", 
   RowBox[{
   "Text", "[", 
    "\"\<Tabela 2: \[CapitalSHacek]tevilo zaposlitev za dolo\[CHacek]en / \
nedolo\[CHacek]en \[CHacek]as in \[SHacek]tevilo na novo sklenjenih / \
prekinjenih delovnih razmerij\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9241757935012665`*^9, 3.924175905472231*^9}, {
  3.92486396302627*^9, 3.9248639696058083`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"75d7d634-038f-7b4f-ad16-ecf4008759b4"],

Cell["", "Text",ExpressionUUID->"3830299c-789e-894c-a55b-189d11e25736"],

Cell[BoxData[
 TemplateBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> {<|
           "" -> "Zaposlitev za dolo\[CHacek]en \[CHacek]as", "2018.0" -> 
            184., "2019.0" -> 204., "2020.0" -> 155., "2021.0" -> 158., 
            "2022.0" -> 240.|>, <|
           "" -> "Zaposlitev za nedolo\[CHacek]en \[CHacek]as", "2018.0" -> 
            537., "2019.0" -> 567., "2020.0" -> 609., "2021.0" -> 662., 
            "2022.0" -> 649.|>, <|
           "" -> "Na novo sklenjena delovna razmerja", "2018.0" -> 260., 
            "2019.0" -> 204., "2020.0" -> 117., "2021.0" -> 207., "2022.0" -> 
            240.|>, <|
           "" -> "Prekinjena delovna razmerja", "2018.0" -> 138., "2019.0" -> 
            134., "2020.0" -> 124., "2021.0" -> 131., "2022.0" -> 183.|>}, 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, ""} -> 
            1, {All, "2018.0"} -> 1, {All, "2019.0"} -> 1, {All, "2020.0"} -> 
            1, {All, "2021.0"} -> 1, {All, "2022.0"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "" -> TypeSystem`PackageScope`AtomShape[380.8], "2018.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2019.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2020.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2021.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2022.0" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All}]], 4, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "", "2018.0", "2019.0", "2020.0", "2021.0", "2022.0"}, {
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 4], "Meta" -> <||>, "RowTarget" -> 20, 
         "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, ""} -> 
            1, {All, "2018.0"} -> 1, {All, "2019.0"} -> 1, {All, "2020.0"} -> 
            1, {All, "2021.0"} -> 1, {All, "2022.0"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "" -> TypeSystem`PackageScope`AtomShape[380.8], "2018.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2019.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2020.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2021.0" -> 
                TypeSystem`PackageScope`AtomShape[60], "2022.0" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 6, {All}]], 4, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "", "2018.0", "2019.0", "2020.0", "2021.0", "2022.0"}, {
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 4], "Path" -> {}, "DisplayedRowCount" -> 
         4, "DisplayedColumnCount" -> 6, "DataRowCount" -> 4, 
         "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
         "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["", 
                    Style[
                    "", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, ""}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, ""}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["2018.0", 
                    Style[
                    "2018.0", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "2018.0"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "2018.0"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["2019.0", 
                    Style[
                    "2019.0", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "2019.0"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "2019.0"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["2020.0", 
                    Style[
                    "2020.0", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "2020.0"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "2020.0"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["2021.0", 
                    Style[
                    "2021.0", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "2021.0"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "2021.0"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["2022.0", 
                    Style[
                    "2022.0", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "2022.0"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "2022.0"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["Zaposlitev za dolo\[CHacek]en \[CHacek]as", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key[""]}, "Item", False], "Mouse"], 
                  ImageSize -> {{380.8, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["184.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["2018.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["204.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["2019.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["155.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["2020.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["158.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["2021.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["240.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["2022.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["Zaposlitev za nedolo\[CHacek]en \[CHacek]as", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key[""]}, "Item", False], "Mouse"], 
                  ImageSize -> {{380.8, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["537.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["2018.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["567.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["2019.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["609.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["2020.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["662.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["2021.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["649.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["2022.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["Na novo sklenjena delovna razmerja", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key[""]}, "Item", False], "Mouse"], 
                  ImageSize -> {{380.8, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["260.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["2018.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["204.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["2019.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["117.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["2020.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["207.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["2021.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["240.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["2022.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["Prekinjena delovna razmerja", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key[""]}, "Item", False], "Mouse"], 
                  ImageSize -> {{380.8, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["138.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["2018.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["134.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["2019.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["124.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["2020.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["131.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["2021.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["183.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["2022.0"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        ImageSizeCache -> {729.8, {73.13403328722343, 78.86596671277657}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], 
       ImageSizeCache -> {729.8, {73.13403328722343, 78.86596671277657}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"], 
    Dataset`InterpretDataset[1], Editable -> False, SelectWithContents -> 
    True, Selectable -> False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox[
      "\"Tabela 2: \[CapitalSHacek]tevilo zaposlitev za dolo\[CHacek]en / \
nedolo\[CHacek]en \[CHacek]as in \[SHacek]tevilo na novo sklenjenih / \
prekinjenih delovnih razmerij\"", TextForm]], "InlineText"], 
    Text["Tabela 2: \[CapitalSHacek]tevilo zaposlitev za dolo\[CHacek]en / \
nedolo\[CHacek]en \[CHacek]as in \[SHacek]tevilo na novo sklenjenih / \
prekinjenih delovnih razmerij"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.92417590715481*^9, 3.924176639072885*^9, {3.924863964525968*^9, 
   3.924863969881119*^9}},
 CellLabel->"Out[68]=",ExpressionUUID->"6f880b32-58e3-9f4d-a6a5-507cf7405f93"],

Cell["", "Text",ExpressionUUID->"bc5f9107-4447-454b-8fa3-0479480b2fde"],

Cell[BoxData[
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\<C:\\\\Users\\\\HP\\\\Desktop\\\\Ra\[CHacek]unalni\[SHacek]ka \
orodja v matematiki\\\\Povpre\[CHacek]na pla\[CHacek]a.xlsx\>\"", ",", 
       "\"\<Dataset\>\"", ",", 
       RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "1"}]}], "]"}], "//", 
     "First"}], "//", "\[IndentingNewLine]", "                              ", 
    RowBox[{"Query", "[", 
     RowBox[{
     "All", ",", "\[IndentingNewLine]", 
      "                                         ", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"#", ",", 
         RowBox[{
         "\"\<Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])\>\"", 
          "\[Rule]", 
          RowBox[{
           RowBox[{
            RowBox[{
            "#", "[", "\"\<Stro\[SHacek]ki pla\[CHacek] (\[Euro])\>\"", "]"}],
             "/", "12"}], "/", 
           RowBox[{
           "#", "[", "\"\<\[CapitalSHacek]tevilo zaposlenih\>\"", "]"}]}]}]}],
         "\[RightAssociation]"}], "&"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", "                ", 
   RowBox[{
   "Text", "[", 
    "\"\<Tabela 3: Stro\[SHacek]ki pla\[CHacek] in povpre\[CHacek]na mese\
\[CHacek]na pla\[CHacek]a\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.924176656569317*^9, 3.924176665101143*^9}, {
  3.9248639743564205`*^9, 3.924863976946024*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"1a144594-6c2c-d046-b230-341889fb7e4e"],

Cell["", "Text",ExpressionUUID->"0540c310-dc8f-134d-b0c7-e99070226805"],

Cell[BoxData[
 TemplateBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> {<|
           "Leto" -> 2018., "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
            1.0108334*^7, "\[CapitalSHacek]tevilo zaposlenih" -> 648., 
            "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
            1299.9400720164608`|>, <|
           "Leto" -> 2019., "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
            1.1846047*^7, "\[CapitalSHacek]tevilo zaposlenih" -> 702., 
            "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
            1406.2259021842356`|>, <|
           "Leto" -> 2020., "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
            1.2680714*^7, "\[CapitalSHacek]tevilo zaposlenih" -> 726., 
            "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
            1455.5456841138657`|>, <|
           "Leto" -> 2021., "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
            1.4859785*^7, "\[CapitalSHacek]tevilo zaposlenih" -> 757., 
            "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
            1635.8195728753851`|>, <|
           "Leto" -> 2022., "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
            1.7472824*^7, "\[CapitalSHacek]tevilo zaposlenih" -> 825., 
            "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
            1764.931717171717|>}, "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
            1, {All, "Stro\[SHacek]ki pla\[CHacek] (\[Euro])"} -> 
            1, {All, "\[CapitalSHacek]tevilo zaposlenih"} -> 
            1, {All, 
              "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])"} -> 
            1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
                "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalSHacek]tevilo zaposlenih" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 4, {All}]], 5, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "Leto", "Stro\[SHacek]ki pla\[CHacek] (\[Euro])", 
             "\[CapitalSHacek]tevilo zaposlenih", 
             "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
         "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
            1, {All, "Stro\[SHacek]ki pla\[CHacek] (\[Euro])"} -> 
            1, {All, "\[CapitalSHacek]tevilo zaposlenih"} -> 
            1, {All, 
              "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])"} -> 
            1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
                "Stro\[SHacek]ki pla\[CHacek] (\[Euro])" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "\[CapitalSHacek]tevilo zaposlenih" -> 
                TypeSystem`PackageScope`AtomShape[60], 
                "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])" -> 
                TypeSystem`PackageScope`AtomShape[60]|>], 
              DirectedInfinity[1], 4, {All}]], 5, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "Leto", "Stro\[SHacek]ki pla\[CHacek] (\[Euro])", 
             "\[CapitalSHacek]tevilo zaposlenih", 
             "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\[Euro])"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 
         5, "DisplayedColumnCount" -> 4, "DataRowCount" -> 5, 
         "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
         "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
       TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Leto", 
                    Style[
                    "Leto", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Leto"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Leto"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Stro\[SHacek]ki pla\[CHacek] (\[Euro])", 
                    Style[
                    "Stro\[SHacek]ki pla\[CHacek] (\[Euro])", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Stro\[SHacek]ki pla\[CHacek] (\[Euro])"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Stro\[SHacek]ki pla\[CHacek] (\[Euro])"}, 
                    "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["\[CapitalSHacek]tevilo zaposlenih", 
                    Style[
                    "\[CapitalSHacek]tevilo zaposlenih", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "\[CapitalSHacek]tevilo zaposlenih"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "\[CapitalSHacek]tevilo zaposlenih"}, "ColumnHeader",
                     True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])", 
                    Style[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\
\[Euro])"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a (\
\[Euro])"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2018.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Leto"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["10108334."], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Stro\[SHacek]ki pla\[CHacek] (\[Euro])"]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["648.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["\[CapitalSHacek]tevilo zaposlenih"]}, "Item", False],
                    "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1299.94"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2019.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Leto"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["11846047."], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Stro\[SHacek]ki pla\[CHacek] (\[Euro])"]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["702.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["\[CapitalSHacek]tevilo zaposlenih"]}, "Item", False],
                    "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1406.23"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2020.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Leto"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["12680714."], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Stro\[SHacek]ki pla\[CHacek] (\[Euro])"]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["726.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["\[CapitalSHacek]tevilo zaposlenih"]}, "Item", False],
                    "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1455.55"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2021.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Leto"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["14859785."], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Stro\[SHacek]ki pla\[CHacek] (\[Euro])"]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["757.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["\[CapitalSHacek]tevilo zaposlenih"]}, "Item", False],
                    "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1635.82"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2022.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Leto"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["17472824."], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Stro\[SHacek]ki pla\[CHacek] (\[Euro])"]}, "Item", 
                    False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["825.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["\[CapitalSHacek]tevilo zaposlenih"]}, "Item", False],
                    "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1764.93"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key[
                    "Povpre\[CHacek]na mese\[CHacek]na pla\[CHacek]a \
(\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        ImageSizeCache -> {459., {86.63403328722343, 92.36596671277657}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], 
       ImageSizeCache -> {459., {86.63403328722343, 92.36596671277657}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"], 
    Dataset`InterpretDataset[1], Editable -> False, SelectWithContents -> 
    True, Selectable -> False], 
   InterpretationBox[
    Cell[
     BoxData[
      FormBox[
      "\"Tabela 3: Stro\[SHacek]ki pla\[CHacek] in povpre\[CHacek]na mese\
\[CHacek]na pla\[CHacek]a\"", TextForm]], "InlineText"], 
    Text["Tabela 3: Stro\[SHacek]ki pla\[CHacek] in povpre\[CHacek]na mese\
\[CHacek]na pla\[CHacek]a"]]},
  "Labeled",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 1}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", #2, ",", 
       RowBox[{"{", "}"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.9241763336284523`*^9, {3.924176641627628*^9, 3.9241766654999256`*^9}, 
   3.924863977206137*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"17bdbdce-2d06-4f41-9804-2ad78a208415"],

Cell["", "Text",ExpressionUUID->"6f39c391-5c97-9d4c-a9b5-4187ca4c1c9d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RA\[CapitalCHacek]UNOVODSKI IZKAZ",
 FontSize->26,
 FontWeight->"Bold",
 FontColor->RGBColor[0., 0., 0.]]], "Chapter",
 CellChangeTimes->{{3.9241764427663803`*^9, 
  3.924176450559244*^9}},ExpressionUUID->"f530543f-920f-2c4a-bf58-\
953ac4c149a2"],

Cell["\<\
- DOLGORO\[CapitalCHacek]NA SREDSTVA:
\t- opredmetena osnovna sredstva,
\t- dolgoro\[CHacek]ne finan\[CHacek]ne nalo\[ZHacek]be,
\t- odlo\[ZHacek]ene terjatve za davek, ...
- KRATKORO\[CapitalCHacek]NA SREDSTVA:
\t- sredstva za prodajajo,
\t- zaloge,
\t- kratkoro\[CHacek]ne finan\[CHacek]ne nalo\[ZHacek]be, ...
- KRATKORO\[CapitalCHacek]NE AKTIVNE \[CapitalCHacek]ASOVNE RAZMEJITVE:
\t\
\>", "Text",
 CellChangeTimes->{{3.9248640165372677`*^9, 
  3.924864164316372*^9}},ExpressionUUID->"afa3c966-2e7c-b945-9b6a-\
88ce6503cd33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"podatkiZaRa\[CHacek]unovodskiIzkaz", "=", 
  RowBox[{
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\HP\\\\Desktop\\\\Ra\[CHacek]unalni\[SHacek]ka orodja \
v matematiki\\\\Datoteke za projektno nalogo\\\\Ra\[CHacek]unovoski \
izkaz.xlsx\>\"", ",", "\"\<Dataset\>\"", ",", 
     RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", "1"}]}], "]"}], "//", 
   "First"}]}]], "Input",
 CellChangeTimes->{{3.924176484542385*^9, 3.9241765129123945`*^9}, {
  3.9291982281922493`*^9, 3.9291982918054485`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"f1be5618-ab77-cb4d-84ba-7b43980a0317"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Leto" -> 2018., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        4.1079189*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        3.1176979*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        121197.|>, <|
       "Leto" -> 2019., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        4.9662908*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        3.0431171*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        117934.|>, <|
       "Leto" -> 2020., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.0674495*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        4.0442368*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        106010.|>, <|
       "Leto" -> 2021., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.5783707*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        5.0023778*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        181086.|>, <|
       "Leto" -> 2022., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.9042337*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        5.6534201*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        250365.|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
        1, {All, "Dolgoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, "Kratkoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, 
          "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
            "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 4, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Leto", "Dolgoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
        1, {All, "Dolgoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, "Kratkoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, 
          "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
            "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 4, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Leto", "Dolgoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 4, "DataRowCount" -> 5, "DataColumnCount" -> 4,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Leto", 
                  Style[
                  "Leto", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Leto"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Leto"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dolgoro\[CHacek]na sredstva (\[Euro])", 
                  Style[
                  "Dolgoro\[CHacek]na sredstva (\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Dolgoro\[CHacek]na sredstva (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Dolgoro\[CHacek]na sredstva (\[Euro])"}, "ColumnHeader",
                 True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Kratkoro\[CHacek]na sredstva (\[Euro])", 
                  Style[
                  "Kratkoro\[CHacek]na sredstva (\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Kratkoro\[CHacek]na sredstva (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Kratkoro\[CHacek]na sredstva (\[Euro])"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])", 
                  Style[
                  "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne \
razmejitve (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2018.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41079189."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["31176979."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["121197."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2019.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49662908."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30431171."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["117934."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2020.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50674495."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40442368."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["106010."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2021.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["55783707."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50023778."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181086."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2022.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["59042337."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["56534201."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["250365."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{629., {86.63403328722343, 92.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{629., {86.63403328722343, 92.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.929198293227247*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"39eb3162-01e3-1b4c-aae5-94ae4c66f009"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"podatkiZaRa\[CHacek]unovodskiIzkaz", "//", 
  RowBox[{"Query", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<Skupaj (\[Euro])\>\"", "\[Rule]", 
        RowBox[{
         RowBox[{
         "#", "[", "\"\<Dolgoro\[CHacek]na sredstva (\[Euro])\>\"", "]"}], 
         "+", 
         RowBox[{
         "#", "[", "\"\<Kratkoro\[CHacek]na sredstva (\[Euro])\>\"", "]"}], 
         "+", 
         RowBox[{
         "#", "[", 
          "\"\<Kratkoro\[CHacek]ne \[CHacek]asovne razmejitve (\[Euro])\>\"", 
          "]"}]}]}]}], "\[RightAssociation]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.929198721074089*^9, 3.929198739733925*^9}, 
   3.9291987776559067`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"89461e2b-43c4-b34d-bd04-57e1a385dd8c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Leto" -> 2018., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        4.1079189*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        3.1176979*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        121197., "Skupaj (\[Euro])" -> 7.2256168*^7|>, <|
       "Leto" -> 2019., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        4.9662908*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        3.0431171*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        117934., "Skupaj (\[Euro])" -> 8.0094079*^7|>, <|
       "Leto" -> 2020., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.0674495*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        4.0442368*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        106010., "Skupaj (\[Euro])" -> 9.1116863*^7|>, <|
       "Leto" -> 2021., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.5783707*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        5.0023778*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        181086., "Skupaj (\[Euro])" -> 1.05807485*^8|>, <|
       "Leto" -> 2022., "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
        5.9042337*^7, "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
        5.6534201*^7, 
        "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])" -> 
        250365., "Skupaj (\[Euro])" -> 1.15576538*^8|>}, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
        1, {All, "Dolgoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, "Kratkoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, 
          "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"} -> 
        1, {All, "Skupaj (\[Euro])"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
            "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])" -> TypeSystem`PackageScope`AtomShape[60], "Skupaj (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 5, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Leto", "Dolgoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])", 
         "Skupaj (\[Euro])"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 5], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Leto"} -> 
        1, {All, "Dolgoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, "Kratkoro\[CHacek]na sredstva (\[Euro])"} -> 
        1, {All, 
          "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])"} -> 
        1, {All, "Skupaj (\[Euro])"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Leto" -> TypeSystem`PackageScope`AtomShape[60], 
            "Dolgoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]na sredstva (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60], 
            "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])" -> TypeSystem`PackageScope`AtomShape[60], "Skupaj (\[Euro])" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 5, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Leto", "Dolgoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]na sredstva (\[Euro])", 
         "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\[Euro])", 
         "Skupaj (\[Euro])"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 5], "Path" -> {}, "DisplayedRowCount" -> 5, 
     "DisplayedColumnCount" -> 5, "DataRowCount" -> 5, "DataColumnCount" -> 5,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Leto", 
                  Style[
                  "Leto", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Leto"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Leto"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Dolgoro\[CHacek]na sredstva (\[Euro])", 
                  Style[
                  "Dolgoro\[CHacek]na sredstva (\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Dolgoro\[CHacek]na sredstva (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Dolgoro\[CHacek]na sredstva (\[Euro])"}, "ColumnHeader",
                 True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Kratkoro\[CHacek]na sredstva (\[Euro])", 
                  Style[
                  "Kratkoro\[CHacek]na sredstva (\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Kratkoro\[CHacek]na sredstva (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Kratkoro\[CHacek]na sredstva (\[Euro])"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])", 
                  Style[
                  "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne \
razmejitve (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve \
(\[Euro])"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Skupaj (\[Euro])", 
                  Style[
                  "Skupaj (\[Euro])", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Skupaj (\[Euro])"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Skupaj (\[Euro])"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2018.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41079189."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["31176979."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["121197."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["72256168."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Skupaj (\[Euro])"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2019.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49662908."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30431171."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["117934."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80094079."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Skupaj (\[Euro])"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2020.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50674495."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40442368."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["106010."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["91116863."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Skupaj (\[Euro])"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2021.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["55783707."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["50023778."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181086."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["105807485."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Skupaj (\[Euro])"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2022.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Leto"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["59042337."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Dolgoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["56534201."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Kratkoro\[CHacek]na sredstva (\[Euro])"]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["250365."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key[
                 "Kratkoro\[CHacek]ne aktivne \[CHacek]asovne razmejitve (\
\[Euro])"]}, "Item", False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["115576538."], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Skupaj (\[Euro])"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{707., {86.63403328722343, 92.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{707., {86.63403328722343, 92.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9291987783588505`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"4ecb4055-d58f-9b44-a10a-06897f62043a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\</mnt/data/obdelani_podatki.xlsx\>\"", ",", "podatkiZNovimStolpcem"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9291988214218884`*^9, 3.9291988242813377`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"2ffc85c4-8539-4246-8347-3909aab0db25"],

Cell[BoxData["\<\"/mnt/data/obdelani_podatki.xlsx\"\>"], "Output",
 CellChangeTimes->{3.9291988261255302`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"f86e0921-2b56-6c4f-bbbf-5d9ee5126f52"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198311539835*^9, 3.929198331368534*^9}, {
   3.9291984297044525`*^9, 3.929198429876314*^9}, {3.9291984817695656`*^9, 
   3.9291984960507774`*^9}, 
   3.9291987063124638`*^9},ExpressionUUID->"3d635582-6eaa-0045-b418-\
32f40755630b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198704312483*^9, 
  3.929198704312483*^9}},ExpressionUUID->"8e0bcaf7-d9b0-ef48-b0e6-\
926ae460316a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198508176422*^9, 3.929198518739235*^9}, 
   3.929198684248329*^9},ExpressionUUID->"ddb55a37-4c04-7342-b01e-\
cae807ddd457"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198527465189*^9, 3.929198527465189*^9}, 
   3.9291986817014465`*^9},ExpressionUUID->"dfd80ae5-9a67-e743-a39e-\
97f711ff322e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291986862484016`*^9, 
  3.9291986862484016`*^9}},ExpressionUUID->"5a760f19-2fa7-fc43-b6cf-\
4bbc96475387"],

Cell[CellGroupData[{

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.929198547329483*^9, 3.9291985597831593`*^9}, {
  3.9291986927482567`*^9, 
  3.92919869504554*^9}},ExpressionUUID->"5020c23b-2ce0-7a46-9ee4-\
7457bb851b15"],

Cell[BoxData[
 TemplateBox[{
  "Prepend", "normal", 
   "\"Nonatomic expression expected at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Prepend\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"Failure\\\", \\\"[\\\", \
RowBox[{\\\"Prepend\\\", \\\",\\\", RowBox[{\\\"\[LeftAssociation]\\\", \
RowBox[{RowBox[{\\\"\\\\\\\"MessageTemplate\\\\\\\"\\\", \\\"\[RuleDelayed]\\\
\", StyleBox[RowBox[{\\\"Prepend\\\", \\\"::\\\", \\\"invdt\\\"}], \
\\\"MessageName\\\"]}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"MessageParameters\\\\\\\"\\\", \\\"\[Rule]\\\", \
RowBox[{\\\"{\\\", \\\"\\\\\\\"Vsote\\\\\\\"\\\", \\\"}\\\"}]}]}], \\\"\
\[RightAssociation]\\\"}]}], \\\"]\\\"}], \\\",\\\", \
\\\"\\\\\\\"Vsote\\\\\\\"\\\"}], \\\"]\\\"}]\\).\"", 2, 26, 18, 
   31121440020458170346, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9291985604236946`*^9},
 CellLabel->
  "During evaluation of \
In[26]:=",ExpressionUUID->"a7c5c493-42df-5741-a159-59f79ab87332"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291986889358997`*^9, 
  3.929198690076338*^9}},ExpressionUUID->"ca14b381-69d5-344d-861f-\
898380c3438e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198486878954*^9, 
  3.929198486878954*^9}},ExpressionUUID->"50c3e3c1-235c-4d43-9897-\
9d8182569467"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291983418813934`*^9, 3.929198378367895*^9}, 
   3.92919842693882*^9},ExpressionUUID->"dd60d7bc-f6f2-6a44-a7e9-\
e89575a49f18"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9291983848567123`*^9, 3.9291983918959026`*^9}, 
   3.9291984240325737`*^9},ExpressionUUID->"df6acbe4-8fef-bd41-a00e-\
30698f898537"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198421626129*^9, 
  3.929198421626129*^9}},ExpressionUUID->"e753aef2-fb38-7342-8741-\
c08d4e616392"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.924176699977396*^9, 3.924176727047615*^9}, 
   3.9291987869690895`*^9},ExpressionUUID->"84c6c589-2867-aa4b-9f98-\
c5584cae65f5"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.929198784281788*^9, 
  3.9291987842972984`*^9}},ExpressionUUID->"3c33bc62-09ce-0046-beff-\
e1f5c3d7af70"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152, 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"14.0 for Microsoft Windows (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"60069cb4-4880-4e4c-ba0f-dcb807ff6dcd"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 236, 5, 98, "Title",ExpressionUUID->"8714285d-1c0c-b243-a8be-c16515793d5b"],
Cell[CellGroupData[{
Cell[841, 31, 444, 11, 48, "Input",ExpressionUUID->"6c65cd28-ec78-4f40-81e9-b36a7a0db7a1"],
Cell[1288, 44, 31151, 521, 157, "Output",ExpressionUUID->"c3cf00c0-ace4-c146-9c94-56e391503e1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32476, 570, 250, 4, 28, "Input",ExpressionUUID->"397f2813-6f2c-e449-a544-1117724316ea"],
Cell[32729, 576, 255, 5, 35, "Output",ExpressionUUID->"2cd73f32-cae6-fd4b-b0b9-2f863f761b34"]
}, Open  ]],
Cell[32999, 584, 71, 0, 35, "Text",ExpressionUUID->"957b46f6-5c96-704d-9de5-95c0867bc6d9"],
Cell[CellGroupData[{
Cell[33095, 588, 252, 6, 59, "Chapter",ExpressionUUID->"3a67079e-ec43-6049-8aca-6a1c75bac0ef"],
Cell[33350, 596, 558, 13, 127, "Text",ExpressionUUID->"bd3a56b8-233a-f640-ae2a-6563dbabbc03"],
Cell[33911, 611, 1196, 28, 86, "Input",ExpressionUUID->"ff7bfd5a-f1ab-9144-a49f-34242cd349a4"],
Cell[35110, 641, 71, 0, 35, "Text",ExpressionUUID->"0f9d2766-a62f-3843-8c1e-3ddd0be4dd2f"],
Cell[35184, 643, 27558, 556, 196, "Output",ExpressionUUID->"4df3b740-705c-1d4a-822c-cf26cd5409a5"],
Cell[62745, 1201, 142, 3, 35, "Text",ExpressionUUID->"2970f341-83d2-7541-b88e-726f702a3735"],
Cell[62890, 1206, 156, 3, 28, "Input",ExpressionUUID->"621b16e5-663a-2840-8ad5-d88896e4a274"],
Cell[63049, 1211, 71, 0, 35, "Text",ExpressionUUID->"f4f113a2-cc00-af4a-a431-f06028135bac"],
Cell[CellGroupData[{
Cell[63145, 1215, 454, 11, 48, "Input",ExpressionUUID->"306dc76c-db3a-e24e-a760-e3403353af5f"],
Cell[63602, 1228, 379923, 6238, 273, "Output",ExpressionUUID->"ae1a8639-7848-dd4b-a4ff-b1874fa03b94"]
}, Open  ]],
Cell[443540, 7469, 71, 0, 35, "Text",ExpressionUUID->"891784d1-32a9-df43-8b37-022625cf6ce5"],
Cell[443614, 7471, 342, 8, 58, "Text",ExpressionUUID->"c15af734-f211-8346-a63b-817d878bbb2c"],
Cell[443959, 7481, 255, 4, 28, "Input",ExpressionUUID->"3831ce76-4cf0-5846-b444-d0ca1f738605"],
Cell[444217, 7487, 71, 0, 35, "Text",ExpressionUUID->"5f7e2ecd-f3fd-eb4e-849f-59a3af9a401c"],
Cell[444291, 7489, 152, 3, 28, "Input",ExpressionUUID->"9d79afdd-4b21-5d4b-b44c-ef76d2b6067c"],
Cell[444446, 7494, 152, 3, 28, "Input",ExpressionUUID->"651d12d7-20aa-1b43-9b88-3fd475c62b6b"],
Cell[444601, 7499, 1588, 37, 67, "Input",ExpressionUUID->"efe16d13-ba37-924d-ac81-9193d28d82e4"],
Cell[446192, 7538, 876, 16, 53, "Input",ExpressionUUID->"735f78b9-baec-c249-8b64-8ff98527a414"],
Cell[447071, 7556, 649, 16, 28, "Input",ExpressionUUID->"2a822535-5eaa-fb43-8f5a-d856eb1ad71b"],
Cell[447723, 7574, 154, 3, 28, "Input",ExpressionUUID->"31e34dc1-1f1d-a245-870b-7e989271bbbe"],
Cell[447880, 7579, 156, 3, 28, "Input",ExpressionUUID->"ac210c16-1053-2648-9218-8884310dd8d0"],
Cell[448039, 7584, 551, 13, 28, "Input",ExpressionUUID->"531e4a8f-6aa9-d143-a0fb-389efa0bcfc3"],
Cell[448593, 7599, 330, 7, 28, "Input",ExpressionUUID->"8a3ffda5-eedd-7a4c-9b1a-c502875ea2ca"],
Cell[CellGroupData[{
Cell[448948, 7610, 571, 14, 28, "Input",ExpressionUUID->"7001d3f5-f39b-e647-bc33-2a4014b220d5"],
Cell[449522, 7626, 420145, 7149, 311, "Output",ExpressionUUID->"ae820da4-84e9-a44f-a8e0-1591cd13e420"]
}, Open  ]],
Cell[869682, 14778, 1756, 48, 86, "Input",ExpressionUUID->"0ed1a8fa-e09c-d945-b26b-136d354051f0"],
Cell[CellGroupData[{
Cell[871463, 14830, 807, 20, 28, "Input",ExpressionUUID->"0847ee80-f217-0845-a84f-4c3f19615535"],
Cell[872273, 14852, 46510, 877, 414, "Output",ExpressionUUID->"aa5d558e-6f3e-524f-8270-b21fac1598d7"]
}, Open  ]],
Cell[918798, 15732, 326, 6, 28, "Input",ExpressionUUID->"47386ed4-bb85-7b4a-981c-0786667372c5"],
Cell[919127, 15740, 321, 6, 28, "Input",ExpressionUUID->"9e8c478b-a835-7546-b3ce-103b857da3f5"],
Cell[919451, 15748, 205, 4, 28, "Input",ExpressionUUID->"3f0a7318-252d-7241-8cf9-a1c10ca5dcfc"],
Cell[919659, 15754, 367, 8, 28, "Input",ExpressionUUID->"d5b49e1f-e645-e04e-869f-9098711b2e66"],
Cell[920029, 15764, 519, 11, 48, "Input",ExpressionUUID->"95e66aeb-0899-bf4b-bee2-6e0c61cf8d2d"],
Cell[CellGroupData[{
Cell[920573, 15779, 858, 22, 67, "Input",ExpressionUUID->"4e7c4587-3ec7-fa4f-bb89-dea84e577370"],
Cell[921434, 15803, 48793, 959, 414, "Output",ExpressionUUID->"49385231-4eae-ea45-98c5-87badc8c762d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[970264, 16767, 203, 4, 28, "Input",ExpressionUUID->"1b1b24b0-dbc5-2a4b-8554-4e8ef618e879"],
Cell[970470, 16773, 506, 12, 28, "Message",ExpressionUUID->"90dcd2a3-7fd0-9647-9590-5c4e27082c5e"],
Cell[970979, 16787, 543, 12, 28, "Message",ExpressionUUID->"58f5d3ea-e0cd-314d-b21f-028a1d47c7da"],
Cell[971525, 16801, 522, 13, 28, "Message",ExpressionUUID->"353f862d-55d1-1449-a0b8-48637b4bfaa0"]
}, Closed]],
Cell[972062, 16817, 152, 3, 24, "Input",ExpressionUUID->"e5cc4acc-288b-bf4e-baba-53ddd535ace7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[972251, 16825, 247, 6, 59, "Chapter",ExpressionUUID->"a74e9b55-0092-8a46-be5e-57247f453836"],
Cell[972501, 16833, 748, 16, 150, "Text",ExpressionUUID->"8a700c9d-344d-c947-971d-241a7cf10c48"],
Cell[973252, 16851, 2107, 47, 153, "Input",ExpressionUUID->"10b63eec-bad6-d641-a03b-976b8c99120f"],
Cell[975362, 16900, 71, 0, 35, "Text",ExpressionUUID->"eebe8d9f-585a-a049-97ab-15d7e6e36be4"],
Cell[975436, 16902, 22795, 508, 260, "Output",ExpressionUUID->"6f360ad0-99e7-b946-a282-87670a0d3ab3"],
Cell[998234, 17412, 144, 3, 35, "Text",ExpressionUUID->"6a713a07-3352-9042-a484-58f302d81ccc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[998415, 17420, 306, 6, 48, "Chapter",ExpressionUUID->"3fdf1034-8188-ca4a-96bb-1849851e694b"],
Cell[998724, 17428, 521, 11, 28, "Input",ExpressionUUID->"c0a3e1cd-60e7-9444-ab87-49cfd2d52b71"],
Cell[999248, 17441, 350, 8, 28, "Input",ExpressionUUID->"59517556-ffe1-7944-8dd7-71c44781183b"],
Cell[999601, 17451, 434, 9, 28, "Input",ExpressionUUID->"16f58895-d3ed-6f40-8007-55a67a306284"],
Cell[1000038, 17462, 442, 9, 28, "Input",ExpressionUUID->"823c6212-52a5-a145-8c3e-6f75e3f1fc07"],
Cell[1000483, 17473, 320, 7, 28, "Input",ExpressionUUID->"17b91a5b-9acf-8c47-85fc-748172037124"],
Cell[CellGroupData[{
Cell[1000828, 17484, 288, 5, 28, "Input",ExpressionUUID->"61cb3bf0-0a1b-4947-a3ea-4addad65f764"],
Cell[1001119, 17491, 248, 4, 32, "Output",ExpressionUUID->"96967763-5b94-1f42-82e4-f02c77149671"]
}, Open  ]],
Cell[1001382, 17498, 152, 3, 28, "Input",ExpressionUUID->"393eaaa6-ce3b-cc47-9d03-15460c81c2f7"],
Cell[1001537, 17503, 154, 3, 28, "Input",ExpressionUUID->"868b4bb9-89f7-b844-a7ed-f2a788882050"],
Cell[1001694, 17508, 586, 11, 81, "Text",ExpressionUUID->"033fbca7-3ec5-304b-a5f7-6556e3d4e0cd"],
Cell[1002283, 17521, 71, 0, 35, "Text",ExpressionUUID->"0c0b4978-3a51-0243-a6e5-4df09ad8c405"],
Cell[1002357, 17523, 2054, 46, 143, "Input",ExpressionUUID->"858981b5-6673-5147-be5b-cdf6f52193d2"],
Cell[1004414, 17571, 71, 0, 35, "Text",ExpressionUUID->"b989dfef-fc44-e544-b9df-2d818960e60a"],
Cell[1004488, 17573, 22757, 506, 260, "Output",ExpressionUUID->"d84e2c98-24f5-4a40-9084-4c5aee9f7564"],
Cell[1027248, 18081, 431, 11, 82, "Text",ExpressionUUID->"136f165f-4a01-0543-9cc7-525e8e472bd7"],
Cell[1027682, 18094, 4235, 97, 335, "Input",ExpressionUUID->"87fabc10-e026-5644-985c-53b5a20a9798"],
Cell[1031920, 18193, 71, 0, 35, "Text",ExpressionUUID->"e347ed38-7ef6-5340-8fdc-4c0080a7ff15"],
Cell[1031994, 18195, 117751, 2516, 300, "Output",ExpressionUUID->"1c0f5ad8-8540-1c41-b2dc-28d597b564c2"],
Cell[1149748, 20713, 71, 0, 35, "Text",ExpressionUUID->"e5a1854d-dea7-2d40-a23c-894433123629"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1149856, 20718, 338, 7, 46, "Chapter",ExpressionUUID->"6b5c3159-1d2b-634d-b30e-647d3b329f37"],
Cell[1150197, 20727, 361, 8, 28, "Input",ExpressionUUID->"79d66b62-064a-9043-b6fd-7dd56a873b26"],
Cell[1150561, 20737, 338, 8, 28, "Input",ExpressionUUID->"541cfb7c-a2dd-6d4d-be3e-4941ad7026eb"],
Cell[1150902, 20747, 334, 8, 28, "Input",ExpressionUUID->"47836955-f128-3342-bd7d-9b2f94109e48"],
Cell[1151239, 20757, 336, 8, 28, "Input",ExpressionUUID->"8c3860e1-6819-584c-9e59-ffe24283ce8a"],
Cell[1151578, 20767, 337, 8, 28, "Input",ExpressionUUID->"a1974406-07d4-254e-8d92-1dac855978ac"],
Cell[1151918, 20777, 270, 5, 28, "Input",ExpressionUUID->"4dac8cf5-1326-7e4c-91ff-b2db76d580b3"],
Cell[1152191, 20784, 329, 7, 28, "Input",ExpressionUUID->"27fb8e53-1729-6b4d-ad24-fded021dcc50"],
Cell[1152523, 20793, 1052, 26, 48, "Input",ExpressionUUID->"5c39ce3d-6fc7-244e-8fb9-786a4cce829d"],
Cell[CellGroupData[{
Cell[1153600, 20823, 197, 2, 28, "Input",ExpressionUUID->"3e14a016-2bf6-324f-bef1-86d3f53c2d53"],
Cell[1153800, 20827, 277, 5, 32, "Output",ExpressionUUID->"649d500a-b165-a846-85b4-f9279b25df34"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1154126, 20838, 244, 6, 59, "Chapter",ExpressionUUID->"1b5b0713-1fd1-c341-a295-105ddca13ebf"],
Cell[1154373, 20846, 295, 8, 81, "Text",ExpressionUUID->"f08068d3-6fc0-cd45-ba4d-d8f2b15f78d9"],
Cell[1154671, 20856, 239, 5, 28, "Input",ExpressionUUID->"bd66f8d5-eb02-8f48-8e65-638692380230"],
Cell[CellGroupData[{
Cell[1154935, 20865, 1377, 32, 131, "Input",ExpressionUUID->"e4727a1e-de18-804c-907d-ef25c62b518a"],
Cell[1156315, 20899, 13506, 347, 438, "Output",ExpressionUUID->"1f5317ae-749e-a440-a9c4-15cda615d2d8"]
}, Open  ]],
Cell[1169836, 21249, 71, 0, 35, "Text",ExpressionUUID->"7c6ce05f-c7a3-414c-8f0f-1dc6cce513f7"],
Cell[CellGroupData[{
Cell[1169932, 21253, 369, 9, 28, "Input",ExpressionUUID->"936895bd-1a2e-9f46-b3cc-81a98616977f"],
Cell[1170304, 21264, 376, 9, 32, "Output",ExpressionUUID->"750cd3e4-753e-284b-ab89-557fe1cc06c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1170717, 21278, 361, 9, 28, "Input",ExpressionUUID->"d39842d0-a3cc-c746-a6b1-fcb74286c8c8"],
Cell[1171081, 21289, 378, 9, 32, "Output",ExpressionUUID->"83725949-c735-d644-992a-89e5db16ed8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1171496, 21303, 318, 8, 31, "Input",ExpressionUUID->"6073ddc0-da5d-9e47-b288-00d576a149d1"],
Cell[1171817, 21313, 376, 9, 32, "Output",ExpressionUUID->"40dbdb23-26f0-084b-9c7a-8af7ef548e89"]
}, Open  ]],
Cell[1172208, 21325, 2024, 46, 156, "Input",ExpressionUUID->"a9c68c54-03f2-4a43-a1fb-72462e62f148"],
Cell[1174235, 21373, 71, 0, 35, "Text",ExpressionUUID->"f77e69b0-89ba-274b-a147-d5b523f18b12"],
Cell[1174309, 21375, 5355, 133, 131, "Output",ExpressionUUID->"5c608817-dbad-1547-8284-0e3ae647785b"],
Cell[1179667, 21510, 71, 0, 35, "Text",ExpressionUUID->"aad6d03f-121d-5042-a916-0b23f0cdcc8e"],
Cell[1179741, 21512, 152, 3, 28, "Input",ExpressionUUID->"e2d12af0-130c-6543-b456-abe1e50c9adf"],
Cell[1179896, 21517, 71, 0, 35, "Text",ExpressionUUID->"157ebcec-209c-5748-abdd-3e0ae1bb01df"],
Cell[1179970, 21519, 829, 17, 53, "Input",ExpressionUUID->"75d7d634-038f-7b4f-ad16-ecf4008759b4"],
Cell[1180802, 21538, 71, 0, 35, "Text",ExpressionUUID->"3830299c-789e-894c-a55b-189d11e25736"],
Cell[1180876, 21540, 47699, 867, 191, "Output",ExpressionUUID->"6f880b32-58e3-9f4d-a6a5-507cf7405f93"],
Cell[1228578, 22409, 71, 0, 35, "Text",ExpressionUUID->"bc5f9107-4447-454b-8fa3-0479480b2fde"],
Cell[1228652, 22411, 1515, 37, 96, "Input",ExpressionUUID->"1a144594-6c2c-d046-b230-341889fb7e4e"],
Cell[1230170, 22450, 71, 0, 35, "Text",ExpressionUUID->"0540c310-dc8f-134d-b0c7-e99070226805"],
Cell[1230244, 22452, 43956, 790, 218, "Output",ExpressionUUID->"17bdbdce-2d06-4f41-9804-2ad78a208415"],
Cell[1274203, 23244, 71, 0, 35, "Text",ExpressionUUID->"6f39c391-5c97-9d4c-a9b5-4187ca4c1c9d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1274311, 23249, 270, 6, 59, "Chapter",ExpressionUUID->"f530543f-920f-2c4a-bf58-953ac4c149a2"],
Cell[1274584, 23257, 539, 14, 242, "Text",ExpressionUUID->"afa3c966-2e7c-b945-9b6a-88ce6503cd33"],
Cell[CellGroupData[{
Cell[1275148, 23275, 609, 12, 67, "Input",ExpressionUUID->"f1be5618-ab77-cb4d-84ba-7b43980a0317"],
Cell[1275760, 23289, 41027, 760, 198, "Output",ExpressionUUID->"39eb3162-01e3-1b4c-aae5-94ae4c66f009"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1316824, 24054, 847, 21, 48, "Input",ExpressionUUID->"89461e2b-43c4-b34d-bd04-57e1a385dd8c"],
Cell[1317674, 24077, 45847, 852, 198, "Output",ExpressionUUID->"4ecb4055-d58f-9b44-a10a-06897f62043a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1363558, 24934, 295, 6, 28, "Input",ExpressionUUID->"2ffc85c4-8539-4246-8347-3909aab0db25"],
Cell[1363856, 24942, 189, 2, 32, "Output",ExpressionUUID->"f86e0921-2b56-6c4f-bbbf-5d9ee5126f52"]
}, Open  ]],
Cell[1364060, 24947, 283, 5, 28, "Input",ExpressionUUID->"3d635582-6eaa-0045-b418-32f40755630b"],
Cell[1364346, 24954, 152, 3, 28, "Input",ExpressionUUID->"8e0bcaf7-d9b0-ef48-b0e6-926ae460316a"],
Cell[1364501, 24959, 175, 3, 28, "Input",ExpressionUUID->"ddb55a37-4c04-7342-b01e-cae807ddd457"],
Cell[1364679, 24964, 177, 3, 28, "Input",ExpressionUUID->"dfd80ae5-9a67-e743-a39e-97f711ff322e"],
Cell[1364859, 24969, 156, 3, 28, "Input",ExpressionUUID->"5a760f19-2fa7-fc43-b6cf-4bbc96475387"],
Cell[CellGroupData[{
Cell[1365040, 24976, 223, 4, 48, "Input",ExpressionUUID->"5020c23b-2ce0-7a46-9ee4-7457bb851b15"],
Cell[1365266, 24982, 977, 19, 28, "Message",ExpressionUUID->"a7c5c493-42df-5741-a159-59f79ab87332"]
}, Open  ]],
Cell[1366258, 25004, 154, 3, 28, "Input",ExpressionUUID->"ca14b381-69d5-344d-861f-898380c3438e"],
Cell[1366415, 25009, 152, 3, 28, "Input",ExpressionUUID->"50c3e3c1-235c-4d43-9897-9d8182569467"],
Cell[1366570, 25014, 176, 3, 28, "Input",ExpressionUUID->"dd60d7bc-f6f2-6a44-a7e9-e89575a49f18"],
Cell[1366749, 25019, 181, 3, 28, "Input",ExpressionUUID->"df6acbe4-8fef-bd41-a00e-30698f898537"],
Cell[1366933, 25024, 152, 3, 28, "Input",ExpressionUUID->"e753aef2-fb38-7342-8741-c08d4e616392"],
Cell[1367088, 25029, 177, 3, 28, "Input",ExpressionUUID->"84c6c589-2867-aa4b-9f98-c5584cae65f5"],
Cell[1367268, 25034, 154, 3, 28, "Input",ExpressionUUID->"3c33bc62-09ce-0046-beff-e1f5c3d7af70"]
}, Open  ]]
}, Open  ]]
}
]
*)

